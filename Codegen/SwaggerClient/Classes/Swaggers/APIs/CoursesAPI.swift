//
// CooeyAPIClient
// CoursesAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CoursesAPI {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: CourseRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/courses
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(body: CourseRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/courses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter courseId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteById(courseId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteByIdWithRequestBuilder(courseId: courseId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/courses/{courseId}
     
     - parameter courseId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteByIdWithRequestBuilder(courseId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/courses/{courseId}"
        let courseIdPreEscape = "\(courseId)"
        let courseIdPostEscape = courseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{courseId}", with: courseIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter tags: (query)  (optional)
     - parameter courseName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAll(tenantId: String, type: String? = nil, offset: Int64? = nil, limit: Int? = nil, tags: String? = nil, courseName: String? = nil, completion: @escaping ((_ data: PagedResultCourseResponseDTO?,_ error: Error?) -> Void)) {
        getAllWithRequestBuilder(tenantId: tenantId, type: type, offset: offset, limit: limit, tags: tags, courseName: courseName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/courses/tenants/{tenantId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "archived" : false,
    "name" : "name",
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "id" : "id",
    "updatedOn" : 5,
    "type" : "type",
    "applicationId" : "applicationId",
    "createdOn" : 1,
    "content" : [ {
      "archived" : false,
      "courseType" : "courseType",
      "name" : "name",
      "tenantId" : "tenantId",
      "id" : "id",
      "updatedOn" : 6,
      "type" : "BLOG",
      "createdOn" : 0,
      "url" : "url",
      "tags" : [ "tags", "tags" ]
    }, {
      "archived" : false,
      "courseType" : "courseType",
      "name" : "name",
      "tenantId" : "tenantId",
      "id" : "id",
      "updatedOn" : 6,
      "type" : "BLOG",
      "createdOn" : 0,
      "url" : "url",
      "tags" : [ "tags", "tags" ]
    } ],
    "tags" : [ "tags", "tags" ]
  }, {
    "archived" : false,
    "name" : "name",
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "id" : "id",
    "updatedOn" : 5,
    "type" : "type",
    "applicationId" : "applicationId",
    "createdOn" : 1,
    "content" : [ {
      "archived" : false,
      "courseType" : "courseType",
      "name" : "name",
      "tenantId" : "tenantId",
      "id" : "id",
      "updatedOn" : 6,
      "type" : "BLOG",
      "createdOn" : 0,
      "url" : "url",
      "tags" : [ "tags", "tags" ]
    }, {
      "archived" : false,
      "courseType" : "courseType",
      "name" : "name",
      "tenantId" : "tenantId",
      "id" : "id",
      "updatedOn" : 6,
      "type" : "BLOG",
      "createdOn" : 0,
      "url" : "url",
      "tags" : [ "tags", "tags" ]
    } ],
    "tags" : [ "tags", "tags" ]
  } ],
  "offset" : 6,
  "totalPages" : 5,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter tags: (query)  (optional)
     - parameter courseName: (query)  (optional)

     - returns: RequestBuilder<PagedResultCourseResponseDTO> 
     */
    open class func getAllWithRequestBuilder(tenantId: String, type: String? = nil, offset: Int64? = nil, limit: Int? = nil, tags: String? = nil, courseName: String? = nil) -> RequestBuilder<PagedResultCourseResponseDTO> {
        var path = "/ehealth/v2/courses/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "tags": tags, 
            "courseName": courseName
        ])

        let requestBuilder: RequestBuilder<PagedResultCourseResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter courseId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCourseById(courseId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getCourseByIdWithRequestBuilder(courseId: courseId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/courses/{courseId}
     
     - parameter courseId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getCourseByIdWithRequestBuilder(courseId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/courses/{courseId}"
        let courseIdPreEscape = "\(courseId)"
        let courseIdPostEscape = courseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{courseId}", with: courseIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter courseId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(courseId: String, body: CourseRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(courseId: courseId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/courses/{courseId}
     
     - parameter courseId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(courseId: String, body: CourseRequestDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/courses/{courseId}"
        let courseIdPreEscape = "\(courseId)"
        let courseIdPostEscape = courseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{courseId}", with: courseIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
