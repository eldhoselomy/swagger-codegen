//
// CooeyAPIClient
// TenantsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TenantsAPI {
    /**

     - parameter tenantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addReferralSettings(tenantId: String, body: ReferralSettingsRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addReferralSettingsWithRequestBuilder(tenantId: tenantId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /ehealth/v2/tenants/{tenantId}/referrals/settings
     
     - parameter tenantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addReferralSettingsWithRequestBuilder(tenantId: String, body: ReferralSettingsRequestDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/referrals/settings"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter tagId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveTag(tagId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        archiveTagWithRequestBuilder(tagId: tagId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/tenants/{tenantId}/tags/{tagId}
     
     - parameter tagId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func archiveTagWithRequestBuilder(tagId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/tags/{tagId}"
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tagId}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Tenant?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}
     - examples: [{contentType=application/json, example={
  "clientId" : "clientId",
  "rootTenant" : false,
  "apiKey" : "apiKey",
  "mobile" : "mobile",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "isRootTenant" : false,
  "createdOn" : 0,
  "parentId" : "parentId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "password" : "password",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "email" : "email"
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Tenant> 
     */
    open class func callGetWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<Tenant> {
        var path = "/ehealth/v2/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tenant>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func canCaretakerCreateMedicine(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        canCaretakerCreateMedicineWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/prescription/settings/{tenantId}
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func canCaretakerCreateMedicineWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/prescription/settings/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func configureTenant(body: TenantConfigurations? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        configureTenantWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/tenants/configurations
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func configureTenantWithRequestBuilder(body: TenantConfigurations? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/tenants/configurations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: Tenant? = nil, completion: @escaping ((_ data: Tenant?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants
     - examples: [{contentType=application/json, example={
  "clientId" : "clientId",
  "rootTenant" : false,
  "apiKey" : "apiKey",
  "mobile" : "mobile",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "isRootTenant" : false,
  "createdOn" : 0,
  "parentId" : "parentId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "password" : "password",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "email" : "email"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Tenant> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: Tenant? = nil) -> RequestBuilder<Tenant> {
        let path = "/ehealth/v2/tenants"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tenant>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createArtifact(tenantId: String, xAuthToken: String? = nil, body: Artifact? = nil, completion: @escaping ((_ data: Artifact?,_ error: Error?) -> Void)) {
        createArtifactWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/{tenantId}/artifacts
     - examples: [{contentType=application/json, example={
  "accountType" : "PATIENT",
  "changes" : "changes",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "published" : false,
  "createdOn" : 0,
  "version" : "version",
  "platform" : "ANDROID",
  "url" : "url",
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "status" : "PENDING"
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Artifact> 
     */
    open class func createArtifactWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: Artifact? = nil) -> RequestBuilder<Artifact> {
        var path = "/ehealth/v2/tenants/{tenantId}/artifacts"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Artifact>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createShift(tenantId: String, xAuthToken: String? = nil, body: Shift? = nil, completion: @escaping ((_ data: Shift?,_ error: Error?) -> Void)) {
        createShiftWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/{tenantId}/shifts
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "tenantId" : "tenantId",
  "startTime" : "startTime",
  "id" : "id",
  "endTime" : "endTime"
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Shift> 
     */
    open class func createShiftWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: Shift? = nil) -> RequestBuilder<Shift> {
        var path = "/ehealth/v2/tenants/{tenantId}/shifts"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Shift>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSubTenant(tenantId: String, body: SubtenantCreateRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createSubTenantWithRequestBuilder(tenantId: tenantId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/tenants/{tenantId}/sub-tenant
     
     - parameter tenantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createSubTenantWithRequestBuilder(tenantId: String, body: SubtenantCreateRequestDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/sub-tenant"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTax(tenantId: String, xAuthToken: String? = nil, body: Tax? = nil, completion: @escaping ((_ data: Tax?,_ error: Error?) -> Void)) {
        createTaxWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/{tenantId}/taxes
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 3,
  "id" : "id",
  "applicationId" : "applicationId",
  "taxAmount" : 2.027123023002322,
  "createdOn" : 9,
  "percent" : 4.145608029883936
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Tax> 
     */
    open class func createTaxWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: Tax? = nil) -> RequestBuilder<Tax> {
        var path = "/ehealth/v2/tenants/{tenantId}/taxes"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tax>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTenantBluePrint(body: TenantBlueprintRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createTenantBluePrintWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/tenants/blueprints
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createTenantBluePrintWithRequestBuilder(body: TenantBlueprintRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/tenants/blueprints"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(xAuthToken: String? = nil, body: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/roles
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "privileges" : [ "PATIENT_UPDATE", "PATIENT_UPDATE" ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func create_0WithRequestBuilder(xAuthToken: String? = nil, body: Role? = nil) -> RequestBuilder<Role> {
        let path = "/ehealth/v2/tenants/roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter shiftId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteShift(tenantId: String, shiftId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteShiftWithRequestBuilder(tenantId: tenantId, shiftId: shiftId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/tenants/{tenantId}/shifts/{shiftId}
     
     - parameter tenantId: (path)  
     - parameter shiftId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteShiftWithRequestBuilder(tenantId: String, shiftId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/shifts/{shiftId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let shiftIdPreEscape = "\(shiftId)"
        let shiftIdPostEscape = shiftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shiftId}", with: shiftIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter tags: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getALLTags(tenantId: String, tags: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getALLTagsWithRequestBuilder(tenantId: tenantId, tags: tags, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/alltags/{tags}
     
     - parameter tenantId: (path)  
     - parameter tags: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getALLTagsWithRequestBuilder(tenantId: String, tags: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/alltags/{tags}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let tagsPreEscape = "\(tags)"
        let tagsPostEscape = tagsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tags}", with: tagsPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllTax(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAllTaxWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/taxes
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func getAllTaxWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/taxes"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter platForm: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter appType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppSettings(tenantId: String, platForm: String, xAuthToken: String? = nil, appType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAppSettingsWithRequestBuilder(tenantId: tenantId, platForm: platForm, xAuthToken: xAuthToken, appType: appType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/configuration/{platForm}
     
     - parameter tenantId: (path)  
     - parameter platForm: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter appType: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAppSettingsWithRequestBuilder(tenantId: String, platForm: String, xAuthToken: String? = nil, appType: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/configuration/{platForm}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let platFormPreEscape = "\(platForm)"
        let platFormPostEscape = platFormPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{platForm}", with: platFormPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "appType": appType
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter artifactId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtifact(tenantId: String, artifactId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Artifact?,_ error: Error?) -> Void)) {
        getArtifactWithRequestBuilder(tenantId: tenantId, artifactId: artifactId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/artifacts/{artifactId}
     - examples: [{contentType=application/json, example={
  "accountType" : "PATIENT",
  "changes" : "changes",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "published" : false,
  "createdOn" : 0,
  "version" : "version",
  "platform" : "ANDROID",
  "url" : "url",
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "status" : "PENDING"
}}]
     
     - parameter tenantId: (path)  
     - parameter artifactId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Artifact> 
     */
    open class func getArtifactWithRequestBuilder(tenantId: String, artifactId: String, xAuthToken: String? = nil) -> RequestBuilder<Artifact> {
        var path = "/ehealth/v2/tenants/{tenantId}/artifacts/{artifactId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let artifactIdPreEscape = "\(artifactId)"
        let artifactIdPostEscape = artifactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{artifactId}", with: artifactIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Artifact>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceSettings(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: DeviceAlertSettings?,_ error: Error?) -> Void)) {
        getDeviceSettingsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/devices/{tenantId}
     - examples: [{contentType=application/json, example={
  "gpsAlertSettings" : {
    "sleep" : 5,
    "night" : 5,
    "day" : 1
  },
  "patientId" : "patientId",
  "deviceTemperatureLevelSettings" : {
    "high" : 7,
    "period" : 1,
    "low" : 1
  },
  "deviceActivityPeriodSettings" : {
    "sleep" : "sleep",
    "night" : "night",
    "day" : "day"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "archived" : false,
  "deviceSettingLevel" : "TENANT",
  "temperatureAlertSettings" : {
    "sleep" : 9,
    "night" : 7,
    "day" : 2
  },
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "serverConnectionFrequency" : {
    "sleep" : 4,
    "night" : 2,
    "day" : 3
  },
  "enableGPS" : false,
  "timestamp" : 1
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<DeviceAlertSettings> 
     */
    open class func getDeviceSettingsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<DeviceAlertSettings> {
        var path = "/ehealth/v2/tenants/devices/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeviceAlertSettings>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMedicineSettings(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: MedicineSettings?,_ error: Error?) -> Void)) {
        getMedicineSettingsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/medicine/settings/{tenantId}
     - examples: [{contentType=application/json, example={
  "canUserAddMedicine" : false,
  "canCaretakerCreatePrescription" : false,
  "version" : "version",
  "enabled" : false
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<MedicineSettings> 
     */
    open class func getMedicineSettingsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<MedicineSettings> {
        var path = "/ehealth/v2/tenants/medicine/settings/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MedicineSettings>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoles(xAuthToken: String? = nil, completion: @escaping ((_ data: [Role]?,_ error: Error?) -> Void)) {
        getRolesWithRequestBuilder(xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/roles
     - examples: [{contentType=application/json, example=[ {
  "archived" : false,
  "privileges" : [ "PATIENT_UPDATE", "PATIENT_UPDATE" ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}, {
  "archived" : false,
  "privileges" : [ "PATIENT_UPDATE", "PATIENT_UPDATE" ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
} ]}]
     
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Role]> 
     */
    open class func getRolesWithRequestBuilder(xAuthToken: String? = nil) -> RequestBuilder<[Role]> {
        let path = "/ehealth/v2/tenants/roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Role]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter roleId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRolesById(roleId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        getRolesByIdWithRequestBuilder(roleId: roleId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/roles/{roleId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "privileges" : [ "PATIENT_UPDATE", "PATIENT_UPDATE" ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter roleId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func getRolesByIdWithRequestBuilder(roleId: String, xAuthToken: String? = nil) -> RequestBuilder<Role> {
        var path = "/ehealth/v2/tenants/roles/{roleId}"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSettings(xAuthToken: String? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        getSettingsWithRequestBuilder(xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/settings
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func getSettingsWithRequestBuilder(xAuthToken: String? = nil) -> RequestBuilder<TenantConfig> {
        let path = "/ehealth/v2/tenants/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantName: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSettings_0(tenantName: String, xAuthToken: String? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        getSettings_0WithRequestBuilder(tenantName: tenantName, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantName}/settings
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter tenantName: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func getSettings_0WithRequestBuilder(tenantName: String, xAuthToken: String? = nil) -> RequestBuilder<TenantConfig> {
        var path = "/ehealth/v2/tenants/{tenantName}/settings"
        let tenantNamePreEscape = "\(tenantName)"
        let tenantNamePostEscape = tenantNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantName}", with: tenantNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter shiftId: (path)  
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShift(shiftId: String, tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Shift?,_ error: Error?) -> Void)) {
        getShiftWithRequestBuilder(shiftId: shiftId, tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/shifts/{shiftId}
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "tenantId" : "tenantId",
  "startTime" : "startTime",
  "id" : "id",
  "endTime" : "endTime"
}}]
     
     - parameter shiftId: (path)  
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Shift> 
     */
    open class func getShiftWithRequestBuilder(shiftId: String, tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<Shift> {
        var path = "/ehealth/v2/tenants/{tenantId}/shifts/{shiftId}"
        let shiftIdPreEscape = "\(shiftId)"
        let shiftIdPostEscape = shiftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shiftId}", with: shiftIdPostEscape, options: .literal, range: nil)
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Shift>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShiftsForTenant(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Shift]?,_ error: Error?) -> Void)) {
        getShiftsForTenantWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/shifts
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "tenantId" : "tenantId",
  "startTime" : "startTime",
  "id" : "id",
  "endTime" : "endTime"
}, {
  "name" : "name",
  "tenantId" : "tenantId",
  "startTime" : "startTime",
  "id" : "id",
  "endTime" : "endTime"
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Shift]> 
     */
    open class func getShiftsForTenantWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<[Shift]> {
        var path = "/ehealth/v2/tenants/{tenantId}/shifts"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Shift]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubtenants(tenantId: String, completion: @escaping ((_ data: [Tenant]?,_ error: Error?) -> Void)) {
        getSubtenantsWithRequestBuilder(tenantId: tenantId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/sub-tenants
     - examples: [{contentType=application/json, example=[ {
  "clientId" : "clientId",
  "rootTenant" : false,
  "apiKey" : "apiKey",
  "mobile" : "mobile",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "isRootTenant" : false,
  "createdOn" : 0,
  "parentId" : "parentId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "password" : "password",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "email" : "email"
}, {
  "clientId" : "clientId",
  "rootTenant" : false,
  "apiKey" : "apiKey",
  "mobile" : "mobile",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "isRootTenant" : false,
  "createdOn" : 0,
  "parentId" : "parentId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "password" : "password",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "email" : "email"
} ]}]
     
     - parameter tenantId: (path)  

     - returns: RequestBuilder<[Tenant]> 
     */
    open class func getSubtenantsWithRequestBuilder(tenantId: String) -> RequestBuilder<[Tenant]> {
        var path = "/ehealth/v2/tenants/{tenantId}/sub-tenants"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Tenant]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tagId: (path)  
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagById(tagId: String, tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        getTagByIdWithRequestBuilder(tagId: tagId, tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/tags/{tagId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "appliesTo" : [ "appliesTo", "appliesTo" ],
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter tagId: (path)  
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Tag> 
     */
    open class func getTagByIdWithRequestBuilder(tagId: String, tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<Tag> {
        var path = "/ehealth/v2/tenants/{tenantId}/tags/{tagId}"
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tagId}", with: tagIdPostEscape, options: .literal, range: nil)
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tag>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter offset: (query)  (optional, default to 0)
     - parameter appliesTo: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTags(tenantId: String, xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil, appliesTo: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTagsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, limit: limit, offset: offset, appliesTo: appliesTo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/tags
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter offset: (query)  (optional, default to 0)
     - parameter appliesTo: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getTagsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil, appliesTo: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/tags"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "appliesTo": appliesTo
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter taxId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaxById(tenantId: String, taxId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Tax?,_ error: Error?) -> Void)) {
        getTaxByIdWithRequestBuilder(tenantId: tenantId, taxId: taxId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/taxes/{taxId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 3,
  "id" : "id",
  "applicationId" : "applicationId",
  "taxAmount" : 2.027123023002322,
  "createdOn" : 9,
  "percent" : 4.145608029883936
}}]
     
     - parameter tenantId: (path)  
     - parameter taxId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Tax> 
     */
    open class func getTaxByIdWithRequestBuilder(tenantId: String, taxId: String, xAuthToken: String? = nil) -> RequestBuilder<Tax> {
        var path = "/ehealth/v2/tenants/{tenantId}/taxes/{taxId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let taxIdPreEscape = "\(taxId)"
        let taxIdPostEscape = taxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{taxId}", with: taxIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tax>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTenantArtifacts(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Artifact]?,_ error: Error?) -> Void)) {
        getTenantArtifactsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/artifacts
     - examples: [{contentType=application/json, example=[ {
  "accountType" : "PATIENT",
  "changes" : "changes",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "published" : false,
  "createdOn" : 0,
  "version" : "version",
  "platform" : "ANDROID",
  "url" : "url",
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "status" : "PENDING"
}, {
  "accountType" : "PATIENT",
  "changes" : "changes",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "published" : false,
  "createdOn" : 0,
  "version" : "version",
  "platform" : "ANDROID",
  "url" : "url",
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "status" : "PENDING"
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Artifact]> 
     */
    open class func getTenantArtifactsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<[Artifact]> {
        var path = "/ehealth/v2/tenants/{tenantId}/artifacts"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Artifact]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTenantConfig(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        getTenantConfigWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/tenantConfig
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func getTenantConfigWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<TenantConfig> {
        var path = "/ehealth/v2/tenants/{tenantId}/tenantConfig"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantName: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTenantConfig_0(tenantName: String, xAuthToken: String? = nil, body: TenantConfig? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        getTenantConfig_0WithRequestBuilder(tenantName: tenantName, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/{tenantName}/settings
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter tenantName: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func getTenantConfig_0WithRequestBuilder(tenantName: String, xAuthToken: String? = nil, body: TenantConfig? = nil) -> RequestBuilder<TenantConfig> {
        var path = "/ehealth/v2/tenants/{tenantName}/settings"
        let tenantNamePreEscape = "\(tenantName)"
        let tenantNamePostEscape = tenantNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantName}", with: tenantNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTenants(xAuthToken: String? = nil, completion: @escaping ((_ data: [Tenant]?,_ error: Error?) -> Void)) {
        getTenantsWithRequestBuilder(xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants
     - examples: [{contentType=application/json, example=[ {
  "clientId" : "clientId",
  "rootTenant" : false,
  "apiKey" : "apiKey",
  "mobile" : "mobile",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "isRootTenant" : false,
  "createdOn" : 0,
  "parentId" : "parentId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "password" : "password",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "email" : "email"
}, {
  "clientId" : "clientId",
  "rootTenant" : false,
  "apiKey" : "apiKey",
  "mobile" : "mobile",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "isRootTenant" : false,
  "createdOn" : 0,
  "parentId" : "parentId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "password" : "password",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "email" : "email"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Tenant]> 
     */
    open class func getTenantsWithRequestBuilder(xAuthToken: String? = nil) -> RequestBuilder<[Tenant]> {
        let path = "/ehealth/v2/tenants"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Tenant]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantEmail: (query)  (optional)
     - parameter fromDate: (query)  (optional)
     - parameter toDate: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalCountByTenant(tenantEmail: String? = nil, fromDate: String? = nil, toDate: String? = nil, type: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVitalCountByTenantWithRequestBuilder(tenantEmail: tenantEmail, fromDate: fromDate, toDate: toDate, type: type).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/stats
     
     - parameter tenantEmail: (query)  (optional)
     - parameter fromDate: (query)  (optional)
     - parameter toDate: (query)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getVitalCountByTenantWithRequestBuilder(tenantEmail: String? = nil, fromDate: String? = nil, toDate: String? = nil, type: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/tenants/stats"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantEmail": tenantEmail, 
            "fromDate": fromDate, 
            "toDate": toDate, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDeviceSettings(tenantId: String, xAuthToken: String? = nil, body: DeviceAlertSettings? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        postDeviceSettingsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/devices/{tenantId}
     - examples: [{contentType=application/json, example=true}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func postDeviceSettingsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: DeviceAlertSettings? = nil) -> RequestBuilder<Bool> {
        var path = "/ehealth/v2/tenants/devices/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter search: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func referralSettings(tenantId: String, search: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        referralSettingsWithRequestBuilder(tenantId: tenantId, search: search).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/referrals/settings
     
     - parameter tenantId: (path)  
     - parameter search: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func referralSettingsWithRequestBuilder(tenantId: String, search: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/referrals/settings"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": search
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveAppointmentConfig(tenantId: String, completion: @escaping ((_ data: AppointmentConfigDTO?,_ error: Error?) -> Void)) {
        retrieveAppointmentConfigWithRequestBuilder(tenantId: tenantId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/tenants/appointment/settings/{tenantId}
     - examples: [{contentType=application/json, example={
  "sendEmail" : false,
  "sendSMS" : false,
  "notifyGuardian" : false,
  "patientEnabled" : false,
  "enableGuardian" : false,
  "version" : "version"
}}]
     
     - parameter tenantId: (path)  

     - returns: RequestBuilder<AppointmentConfigDTO> 
     */
    open class func retrieveAppointmentConfigWithRequestBuilder(tenantId: String) -> RequestBuilder<AppointmentConfigDTO> {
        var path = "/ehealth/v2/tenants/appointment/settings/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AppointmentConfigDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveTenantBluePrints(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        retrieveTenantBluePrintsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/blueprints

     - returns: RequestBuilder<Void> 
     */
    open class func retrieveTenantBluePrintsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ehealth/v2/tenants/blueprints"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(tenantId: String, xAuthToken: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, query: query, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/tenants/{tenantId}/taxes/search
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func searchWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/tenants/{tenantId}/taxes/search"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSettings(xAuthToken: String? = nil, body: TenantConfig? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        setSettingsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/settings
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func setSettingsWithRequestBuilder(xAuthToken: String? = nil, body: TenantConfig? = nil) -> RequestBuilder<TenantConfig> {
        let path = "/ehealth/v2/tenants/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setTags(xAuthToken: String? = nil, body: Tag? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        setTagsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/tenants/{tenantId}/tags
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "appliesTo" : [ "appliesTo", "appliesTo" ],
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Tag> 
     */
    open class func setTagsWithRequestBuilder(xAuthToken: String? = nil, body: Tag? = nil) -> RequestBuilder<Tag> {
        let path = "/ehealth/v2/tenants/{tenantId}/tags"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tag>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/roles
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "privileges" : [ "PATIENT_UPDATE", "PATIENT_UPDATE" ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Role? = nil) -> RequestBuilder<Role> {
        let path = "/ehealth/v2/tenants/roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAppointmentConfig(tenantId: String, body: AppointmentConfigDTO? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        updateAppointmentConfigWithRequestBuilder(tenantId: tenantId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/appointment/settings/{tenantId}
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter tenantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func updateAppointmentConfigWithRequestBuilder(tenantId: String, body: AppointmentConfigDTO? = nil) -> RequestBuilder<TenantConfig> {
        var path = "/ehealth/v2/tenants/appointment/settings/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMedicineSettings(tenantId: String, xAuthToken: String? = nil, body: MedicineSettings? = nil, completion: @escaping ((_ data: TenantConfig?,_ error: Error?) -> Void)) {
        updateMedicineSettingsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/medicine/settings/{tenantId}
     - examples: [{contentType=application/json, example={
  "leadsEnabled" : false,
  "medicineSettings" : {
    "canUserAddMedicine" : false,
    "canCaretakerCreatePrescription" : false,
    "version" : "version",
    "enabled" : false
  },
  "billingConfig" : {
    "headerLogo" : "headerLogo",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "footer" : "footer",
    "npi" : "npi",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 9,
    "createdOn" : 7,
    "enabled" : false,
    "archived" : false,
    "unit" : "unit",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId"
  },
  "appointmentConfig" : {
    "sendEmail" : false,
    "sendSMS" : false,
    "notifyGuardian" : false,
    "patientEnabled" : false,
    "enableGuardian" : false,
    "version" : "version"
  },
  "externalSystemIntegrationConfiguration" : {
    "apiHooks" : [ {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    }, {
      "id" : "id",
      "url" : "url",
      "events" : [ "events", "events" ]
    } ]
  },
  "language" : "language",
  "createdOn" : 0,
  "archived" : false,
  "featureConfigs" : {
    "leadsEnabled" : false,
    "addPatientFromCaretaker" : false,
    "medicinesEnabled" : false,
    "videoCallEnabled" : false,
    "medicalProfileEnabled" : false,
    "chatEnabled" : false,
    "patientSummaryEnabled" : false,
    "medicalReportEnabled" : false,
    "patientReferralEnabled" : false,
    "healthScoreEnabled" : false,
    "patientsModule" : {
      "patientsListPerPage" : 2
    },
    "agenciesEnabled" : false,
    "careplanType" : "RPM",
    "devicesEnabled" : false,
    "vitalsEnabled" : false
  },
  "faviconURL" : "faviconURL",
  "templateConfig" : {
    "contentFeatureEnabled" : false,
    "dietFeatureEnabled" : false
  },
  "tenantName" : "tenantName",
  "androidCaretakerAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "iosCaretakerConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "countryCode" : "countryCode",
  "featureConfig" : {
    "features" : [ {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    }, {
      "portalEnabled" : false,
      "iosguardianAPPEnabled" : false,
      "androidCaretakerAPPEnabled" : false,
      "androidPateintAPPEnabled" : false,
      "type" : "VITAL",
      "ioscaretakerAPPEnabled" : false,
      "androidGuardianAPPEnabled" : false,
      "iospateintAPPEnabled" : false
    } ]
  },
  "dietConfig" : {
    "archived" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 5,
    "applicationId" : "applicationId",
    "createdOn" : 5,
    "dietFeatureEnabled" : false
  },
  "featureNomenclatures" : {
    "courses" : {
      "name" : "name"
    },
    "appointments" : {
      "name" : "name"
    },
    "devices" : {
      "name" : "name"
    },
    "patients" : {
      "name" : "name"
    },
    "groups" : {
      "name" : "name",
      "subGroups" : "subGroups"
    },
    "taxes" : {
      "name" : "name"
    },
    "agencies" : {
      "name" : "name"
    },
    "services" : {
      "name" : "name"
    },
    "guardians" : {
      "name" : "name"
    },
    "diets" : {
      "name" : "name"
    },
    "adhocTasks" : {
      "name" : "name"
    },
    "products" : {
      "name" : "name"
    },
    "tags" : {
      "name" : "name"
    },
    "caretakers" : {
      "name" : "name"
    },
    "leads" : {
      "followUps" : "followUps",
      "name" : "name"
    },
    "shifts" : {
      "name" : "name"
    },
    "engagements" : {
      "name" : "name"
    },
    "locations" : {
      "name" : "name"
    },
    "careplans" : {
      "templates" : "templates",
      "name" : "name"
    },
    "administrators" : {
      "name" : "name"
    },
    "vitals" : {
      "secondaryVitals" : "secondaryVitals",
      "name" : "name",
      "primaryVitals" : "primaryVitals",
      "parameters" : "parameters"
    },
    "forms" : {
      "name" : "name"
    }
  },
  "activityConfig" : {
    "activityEnabled" : false
  },
  "id" : "id",
  "supportedDeviceModels" : [ "supportedDeviceModels", "supportedDeviceModels" ],
  "reportConfigs" : [ {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  }, {
    "type" : "CAREPLAN_REPORT",
    "enabled" : false
  } ],
  "patientOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "patientRegistrationModes" : "REGISTRATION_AS_LEAD",
    "communicationMode" : "EMAIL"
  },
  "iosGuardianAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "iosPatientAppConfig" : {
    "teamName" : "teamName",
    "appVersion" : "appVersion",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "bundleId" : "bundleId",
    "description" : "description",
    "splashImageUrl" : "splashImageUrl",
    "buildNumber" : "buildNumber",
    "itcID" : "itcID",
    "appStoreEmailAccount" : "appStoreEmailAccount",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "teamId" : "teamId",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "healthScoreEnabled" : false
  },
  "engagementEnabled" : false,
  "menuConfig" : {
    "patientIconUrl" : "patientIconUrl",
    "caretakerIconUrl" : "caretakerIconUrl",
    "dashBoardIconUrl" : "dashBoardIconUrl"
  },
  "pccEnabled" : false,
  "adminOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "tenantSupport" : {
    "phoneNumber" : "phoneNumber",
    "email" : "email"
  },
  "logoURL" : "logoURL",
  "defaultMedicineSource" : "defaultMedicineSource",
  "androidPatientAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "termsURL" : "termsURL",
  "careplanEnabled" : false,
  "guardianOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "tenantId" : "tenantId",
  "caretakerOnboardSettings" : {
    "communicationSettings" : {
      "key" : "communicationSettings"
    },
    "communicationMode" : "EMAIL"
  },
  "referralSettings" : {
    "evaluationFormBluePrints" : [ "evaluationFormBluePrints", "evaluationFormBluePrints" ],
    "prelimFormBluePrints" : [ "prelimFormBluePrints", "prelimFormBluePrints" ]
  },
  "applicationId" : "applicationId",
  "healthScoreConfig" : {
    "healthScore" : "ROTHMAN_INDEX",
    "parameters" : {
      "key" : "parameters"
    },
    "enabled" : false
  },
  "androidGuardianAppConfig" : {
    "keystorePassword" : "keystorePassword",
    "iconImageUrl" : "iconImageUrl",
    "colorConfiguration" : {
      "backgroundColor" : "backgroundColor",
      "primaryColor" : "primaryColor",
      "secondaryDarkColor" : "secondaryDarkColor",
      "primaryDarkColor" : "primaryDarkColor",
      "textColor" : "textColor",
      "secondaryColor" : "secondaryColor"
    },
    "description" : "description",
    "versionName" : "versionName",
    "splashImageUrl" : "splashImageUrl",
    "version" : 1,
    "keystoreUrl" : "keystoreUrl",
    "firebaseConfig" : "firebaseConfig",
    "storeUrl" : "storeUrl",
    "firebaseSettingsFileUrl" : "firebaseSettingsFileUrl",
    "name" : "name",
    "packageName" : "packageName"
  },
  "deviceConfigs" : [ {
    "type" : "COOEY",
    "enabled" : false
  }, {
    "type" : "COOEY",
    "enabled" : false
  } ],
  "externalRepositoryConfigurarionList" : [ {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  }, {
    "isEnabled" : "isEnabled",
    "parameters" : "parameters",
    "externalRepositoryType" : "KANTIME"
  } ],
  "configColor" : {
    "backgroundColor" : "backgroundColor",
    "primaryColor" : "primaryColor",
    "secondaryDarkColor" : "secondaryDarkColor",
    "primaryDarkColor" : "primaryDarkColor",
    "textColor" : "textColor",
    "secondaryColor" : "secondaryColor"
  }
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TenantConfig> 
     */
    open class func updateMedicineSettingsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: MedicineSettings? = nil) -> RequestBuilder<TenantConfig> {
        var path = "/ehealth/v2/tenants/medicine/settings/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TenantConfig>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSettings(xAuthToken: String? = nil, body: TenantConfig? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateSettingsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/tenants/settings
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateSettingsWithRequestBuilder(xAuthToken: String? = nil, body: TenantConfig? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/tenants/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateShift(tenantId: String, xAuthToken: String? = nil, body: Shift? = nil, completion: @escaping ((_ data: Shift?,_ error: Error?) -> Void)) {
        updateShiftWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/{tenantId}/shifts
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "tenantId" : "tenantId",
  "startTime" : "startTime",
  "id" : "id",
  "endTime" : "endTime"
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Shift> 
     */
    open class func updateShiftWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: Shift? = nil) -> RequestBuilder<Shift> {
        var path = "/ehealth/v2/tenants/{tenantId}/shifts"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Shift>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTags(xAuthToken: String? = nil, body: Tag? = nil, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        updateTagsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/{tenantId}/tags
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "appliesTo" : [ "appliesTo", "appliesTo" ],
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Tag> 
     */
    open class func updateTagsWithRequestBuilder(xAuthToken: String? = nil, body: Tag? = nil) -> RequestBuilder<Tag> {
        let path = "/ehealth/v2/tenants/{tenantId}/tags"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tag>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTax(tenantId: String, xAuthToken: String? = nil, body: Tax? = nil, completion: @escaping ((_ data: Tax?,_ error: Error?) -> Void)) {
        updateTaxWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/tenants/{tenantId}/taxes
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 3,
  "id" : "id",
  "applicationId" : "applicationId",
  "taxAmount" : 2.027123023002322,
  "createdOn" : 9,
  "percent" : 4.145608029883936
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Tax> 
     */
    open class func updateTaxWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: Tax? = nil) -> RequestBuilder<Tax> {
        var path = "/ehealth/v2/tenants/{tenantId}/taxes"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Tax>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
