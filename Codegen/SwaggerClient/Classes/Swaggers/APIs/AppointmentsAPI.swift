//
// CooeyAPIClient
// AppointmentsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AppointmentsAPI {
    /**

     - parameter tenantId: (path)  
     - parameter guardianId: (path)  
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter status: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appointmentsByGuardian(tenantId: String, guardianId: String, offset: Int64? = nil, limit: Int? = nil, status: String? = nil, name: String? = nil, startTime: Int64? = nil, completion: @escaping ((_ data: PagedResultAppointment?,_ error: Error?) -> Void)) {
        appointmentsByGuardianWithRequestBuilder(tenantId: tenantId, guardianId: guardianId, offset: offset, limit: limit, status: status, name: name, startTime: startTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/tenants/{tenantId}/guardians/{guardianId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  }, {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  } ],
  "offset" : 6,
  "totalPages" : 7,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter guardianId: (path)  
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter status: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)

     - returns: RequestBuilder<PagedResultAppointment> 
     */
    open class func appointmentsByGuardianWithRequestBuilder(tenantId: String, guardianId: String, offset: Int64? = nil, limit: Int? = nil, status: String? = nil, name: String? = nil, startTime: Int64? = nil) -> RequestBuilder<PagedResultAppointment> {
        var path = "/ehealth/v2/appointments/tenants/{tenantId}/guardians/{guardianId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let guardianIdPreEscape = "\(guardianId)"
        let guardianIdPostEscape = guardianIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{guardianId}", with: guardianIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "status": status, 
            "name": name, 
            "startTime": startTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PagedResultAppointment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func approveAppointment(xAuthToken: String? = nil, body: ApprovalRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        approveAppointmentWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/appointments/status
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func approveAppointmentWithRequestBuilder(xAuthToken: String? = nil, body: ApprovalRequest? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/appointments/status"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter appointmentRequestId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func approveAppointmentRequest(appointmentRequestId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        approveAppointmentRequestWithRequestBuilder(appointmentRequestId: appointmentRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/appointments/requests/{appointmentRequestId}/approval
     
     - parameter appointmentRequestId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func approveAppointmentRequestWithRequestBuilder(appointmentRequestId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/appointments/requests/{appointmentRequestId}/approval"
        let appointmentRequestIdPreEscape = "\(appointmentRequestId)"
        let appointmentRequestIdPostEscape = appointmentRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentRequestId}", with: appointmentRequestIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appointmentRequestId: (path)  
     - parameter caretakerId: (path)  
     - parameter status: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func approveAppointmentRequest_0(appointmentRequestId: String, caretakerId: String, status: String? = nil, completion: @escaping ((_ data: AppointmentRequest?,_ error: Error?) -> Void)) {
        approveAppointmentRequest_0WithRequestBuilder(appointmentRequestId: appointmentRequestId, caretakerId: caretakerId, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/appointments/requests/{appointmentRequestId}/caretakers/{caretakerId}
     - examples: [{contentType=application/json, example={
  "serviceCategoryName" : "serviceCategoryName",
  "patientName" : "patientName",
  "requestedByAccountType" : "PATIENT",
  "patientId" : "patientId",
  "caretakerName" : "caretakerName",
  "caretakerFullName" : "caretakerFullName",
  "requestedById" : "requestedById",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "serviceName" : "serviceName",
  "createdOn" : 0,
  "archived" : false,
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "groupName" : "groupName",
  "caretakerId" : "caretakerId",
  "tenantId" : "tenantId",
  "startTime" : 1,
  "id" : "id",
  "endTime" : 5,
  "applicationId" : "applicationId",
  "status" : "PENDING"
}}]
     
     - parameter appointmentRequestId: (path)  
     - parameter caretakerId: (path)  
     - parameter status: (query)  (optional)

     - returns: RequestBuilder<AppointmentRequest> 
     */
    open class func approveAppointmentRequest_0WithRequestBuilder(appointmentRequestId: String, caretakerId: String, status: String? = nil) -> RequestBuilder<AppointmentRequest> {
        var path = "/ehealth/v2/appointments/requests/{appointmentRequestId}/caretakers/{caretakerId}"
        let appointmentRequestIdPreEscape = "\(appointmentRequestId)"
        let appointmentRequestIdPostEscape = appointmentRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentRequestId}", with: appointmentRequestIdPostEscape, options: .literal, range: nil)
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status
        ])

        let requestBuilder: RequestBuilder<AppointmentRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(appointmentId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: AppointmentResponse?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(appointmentId: appointmentId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/{appointmentId}
     - examples: [{contentType=application/json, example={
  "interventionList" : [ {
    "patientId" : "patientId",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "reviewResponseEnabled" : false,
    "caretakerId" : "caretakerId",
    "permissions" : "permissions",
    "schedules" : [ {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    }, {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    } ],
    "patientNotificationEnabled" : false,
    "id" : "id",
    "careplanId" : "careplanId",
    "guaridanNotificationEnabled" : false,
    "interventionBluprintId" : "interventionBluprintId",
    "caretakerNotificationEnabled" : false,
    "caretakerName" : "caretakerName",
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 1,
    "updatedOn" : 6,
    "parentId" : "parentId",
    "schedule" : {
      "numOfDays" : 1,
      "timings" : {
        "key" : "timings"
      },
      "beginTime" : 6,
      "endTime" : 7
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "applicationId" : "applicationId",
    "parameters" : "parameters"
  }, {
    "patientId" : "patientId",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "reviewResponseEnabled" : false,
    "caretakerId" : "caretakerId",
    "permissions" : "permissions",
    "schedules" : [ {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    }, {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    } ],
    "patientNotificationEnabled" : false,
    "id" : "id",
    "careplanId" : "careplanId",
    "guaridanNotificationEnabled" : false,
    "interventionBluprintId" : "interventionBluprintId",
    "caretakerNotificationEnabled" : false,
    "caretakerName" : "caretakerName",
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 1,
    "updatedOn" : 6,
    "parentId" : "parentId",
    "schedule" : {
      "numOfDays" : 1,
      "timings" : {
        "key" : "timings"
      },
      "beginTime" : 6,
      "endTime" : 7
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "applicationId" : "applicationId",
    "parameters" : "parameters"
  } ],
  "appointment" : {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  },
  "serviceNames" : [ "serviceNames", "serviceNames" ]
}}]
     
     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<AppointmentResponse> 
     */
    open class func callGetWithRequestBuilder(appointmentId: String, xAuthToken: String? = nil) -> RequestBuilder<AppointmentResponse> {
        var path = "/ehealth/v2/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppointmentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter onDate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkCaretakerAvailability(caretakerId: String, xAuthToken: String? = nil, onDate: Int64? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        checkCaretakerAvailabilityWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, onDate: onDate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/caretakers/{caretakerId}/available
     - examples: [{contentType=application/json, example=true}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter onDate: (query)  (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func checkCaretakerAvailabilityWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, onDate: Int64? = nil) -> RequestBuilder<Bool> {
        var path = "/ehealth/v2/appointments/caretakers/{caretakerId}/available"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "onDate": onDate?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: AppointmentPOSTRequest? = nil, completion: @escaping ((_ data: Appointment?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/appointments
     - examples: [{contentType=application/json, example={
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Appointment> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: AppointmentPOSTRequest? = nil) -> RequestBuilder<Appointment> {
        let path = "/ehealth/v2/appointments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Appointment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAppointmentRequest(xAuthToken: String? = nil, body: AppointmentRequest? = nil, completion: @escaping ((_ data: AppointmentRequest?,_ error: Error?) -> Void)) {
        createAppointmentRequestWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/appointments/requests
     - examples: [{contentType=application/json, example={
  "serviceCategoryName" : "serviceCategoryName",
  "patientName" : "patientName",
  "requestedByAccountType" : "PATIENT",
  "patientId" : "patientId",
  "caretakerName" : "caretakerName",
  "caretakerFullName" : "caretakerFullName",
  "requestedById" : "requestedById",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "serviceName" : "serviceName",
  "createdOn" : 0,
  "archived" : false,
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "groupName" : "groupName",
  "caretakerId" : "caretakerId",
  "tenantId" : "tenantId",
  "startTime" : 1,
  "id" : "id",
  "endTime" : 5,
  "applicationId" : "applicationId",
  "status" : "PENDING"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AppointmentRequest> 
     */
    open class func createAppointmentRequestWithRequestBuilder(xAuthToken: String? = nil, body: AppointmentRequest? = nil) -> RequestBuilder<AppointmentRequest> {
        let path = "/ehealth/v2/appointments/requests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppointmentRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAppointment(appointmentId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAppointmentWithRequestBuilder(appointmentId: appointmentId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/appointments/{appointmentId}
     
     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAppointmentWithRequestBuilder(appointmentId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter appointmentRequestId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAppointmentRequest(appointmentRequestId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAppointmentRequestWithRequestBuilder(appointmentRequestId: appointmentRequestId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/appointments/requests/{appointmentRequestId}
     
     - parameter appointmentRequestId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAppointmentRequestWithRequestBuilder(appointmentRequestId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/appointments/requests/{appointmentRequestId}"
        let appointmentRequestIdPreEscape = "\(appointmentRequestId)"
        let appointmentRequestIdPostEscape = appointmentRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentRequestId}", with: appointmentRequestIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter sort: (query)  (optional, default to DESC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllAppointments(userId: String, xAuthToken: String? = nil, status: String? = nil, offset: Int? = nil, limit: Int? = nil, name: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, sort: String? = nil, completion: @escaping ((_ data: PagedResultAppointment?,_ error: Error?) -> Void)) {
        getAllAppointmentsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, status: status, offset: offset, limit: limit, name: name, startTime: startTime, endTime: endTime, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/all/users/{userId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  }, {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  } ],
  "offset" : 6,
  "totalPages" : 7,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter sort: (query)  (optional, default to DESC)

     - returns: RequestBuilder<PagedResultAppointment> 
     */
    open class func getAllAppointmentsWithRequestBuilder(userId: String, xAuthToken: String? = nil, status: String? = nil, offset: Int? = nil, limit: Int? = nil, name: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, sort: String? = nil) -> RequestBuilder<PagedResultAppointment> {
        var path = "/ehealth/v2/appointments/all/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "name": name, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultAppointment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter appointmentRequestId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointmentRequest(appointmentRequestId: String, completion: @escaping ((_ data: AppointmentRequest?,_ error: Error?) -> Void)) {
        getAppointmentRequestWithRequestBuilder(appointmentRequestId: appointmentRequestId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/requests/{appointmentRequestId}
     - examples: [{contentType=application/json, example={
  "serviceCategoryName" : "serviceCategoryName",
  "patientName" : "patientName",
  "requestedByAccountType" : "PATIENT",
  "patientId" : "patientId",
  "caretakerName" : "caretakerName",
  "caretakerFullName" : "caretakerFullName",
  "requestedById" : "requestedById",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "serviceName" : "serviceName",
  "createdOn" : 0,
  "archived" : false,
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "groupName" : "groupName",
  "caretakerId" : "caretakerId",
  "tenantId" : "tenantId",
  "startTime" : 1,
  "id" : "id",
  "endTime" : 5,
  "applicationId" : "applicationId",
  "status" : "PENDING"
}}]
     
     - parameter appointmentRequestId: (path)  

     - returns: RequestBuilder<AppointmentRequest> 
     */
    open class func getAppointmentRequestWithRequestBuilder(appointmentRequestId: String) -> RequestBuilder<AppointmentRequest> {
        var path = "/ehealth/v2/appointments/requests/{appointmentRequestId}"
        let appointmentRequestIdPreEscape = "\(appointmentRequestId)"
        let appointmentRequestIdPostEscape = appointmentRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentRequestId}", with: appointmentRequestIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AppointmentRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)
     - parameter status: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointmentRequests(tenantId: String, offset: Int? = nil, limit: Int? = nil, status: String? = nil, name: String? = nil, completion: @escaping ((_ data: PagedResult?,_ error: Error?) -> Void)) {
        getAppointmentRequestsWithRequestBuilder(tenantId: tenantId, offset: offset, limit: limit, status: status, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/requests/tenants/{tenantId}
     - examples: [{contentType=application/json, example={
  "result" : [ "{}", "{}" ],
  "offset" : 6,
  "totalPages" : 1,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)
     - parameter status: (query)  (optional)
     - parameter name: (query)  (optional)

     - returns: RequestBuilder<PagedResult> 
     */
    open class func getAppointmentRequestsWithRequestBuilder(tenantId: String, offset: Int? = nil, limit: Int? = nil, status: String? = nil, name: String? = nil) -> RequestBuilder<PagedResult> {
        var path = "/ehealth/v2/appointments/requests/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "status": status, 
            "name": name
        ])

        let requestBuilder: RequestBuilder<PagedResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter groupId: (path)  
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)
     - parameter status: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointmentRequestsForGroup(groupId: String, offset: Int? = nil, limit: Int? = nil, status: String? = nil, completion: @escaping ((_ data: PagedResult?,_ error: Error?) -> Void)) {
        getAppointmentRequestsForGroupWithRequestBuilder(groupId: groupId, offset: offset, limit: limit, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/requests/groups/{groupId}
     - examples: [{contentType=application/json, example={
  "result" : [ "{}", "{}" ],
  "offset" : 6,
  "totalPages" : 1,
  "totalCount" : 0
}}]
     
     - parameter groupId: (path)  
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)
     - parameter status: (query)  (optional)

     - returns: RequestBuilder<PagedResult> 
     */
    open class func getAppointmentRequestsForGroupWithRequestBuilder(groupId: String, offset: Int? = nil, limit: Int? = nil, status: String? = nil) -> RequestBuilder<PagedResult> {
        var path = "/ehealth/v2/appointments/requests/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "status": status
        ])

        let requestBuilder: RequestBuilder<PagedResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter attendeeId: (query)  (optional)
     - parameter attenderId: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter sort: (query)  (optional, default to DESC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointments(xAuthToken: String? = nil, status: String? = nil, offset: Int? = nil, limit: Int? = nil, attendeeId: String? = nil, attenderId: String? = nil, name: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, sort: String? = nil, completion: @escaping ((_ data: PagedResultAppointment?,_ error: Error?) -> Void)) {
        getAppointmentsWithRequestBuilder(xAuthToken: xAuthToken, status: status, offset: offset, limit: limit, attendeeId: attendeeId, attenderId: attenderId, name: name, startTime: startTime, endTime: endTime, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  }, {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  } ],
  "offset" : 6,
  "totalPages" : 7,
  "totalCount" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter attendeeId: (query)  (optional)
     - parameter attenderId: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter sort: (query)  (optional, default to DESC)

     - returns: RequestBuilder<PagedResultAppointment> 
     */
    open class func getAppointmentsWithRequestBuilder(xAuthToken: String? = nil, status: String? = nil, offset: Int? = nil, limit: Int? = nil, attendeeId: String? = nil, attenderId: String? = nil, name: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, sort: String? = nil) -> RequestBuilder<PagedResultAppointment> {
        let path = "/ehealth/v2/appointments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "attendeeId": attendeeId, 
            "attenderId": attenderId, 
            "name": name, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultAppointment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter status: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointmentsForGroup(groupId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, status: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [Appointment]?,_ error: Error?) -> Void)) {
        getAppointmentsForGroupWithRequestBuilder(groupId: groupId, xAuthToken: xAuthToken, offset: offset, limit: limit, status: status, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/groups/{groupId}
     - examples: [{contentType=application/json, example=[ {
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
}, {
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter status: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[Appointment]> 
     */
    open class func getAppointmentsForGroupWithRequestBuilder(groupId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, status: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[Appointment]> {
        var path = "/ehealth/v2/appointments/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "status": status, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Appointment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter status: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAppointmentsForTenant(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, status: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [Appointment]?,_ error: Error?) -> Void)) {
        getAppointmentsForTenantWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, offset: offset, limit: limit, status: status, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/tenants/{tenantId}
     - examples: [{contentType=application/json, example=[ {
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
}, {
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 100)
     - parameter status: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[Appointment]> 
     */
    open class func getAppointmentsForTenantWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, status: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[Appointment]> {
        var path = "/ehealth/v2/appointments/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "status": status, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Appointment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApprovalList(appointmentId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getApprovalListWithRequestBuilder(appointmentId: appointmentId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/appointments/approval/{appointmentId}
     
     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getApprovalListWithRequestBuilder(appointmentId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/appointments/approval/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter status
     */
    public enum Status_getApprovedAppointments: String { 
        case pending = "PENDING"
        case rejected = "REJECTED"
        case approved = "APPROVED"
        case deleted = "DELETED"
        case finished = "FINISHED"
        case all = "ALL"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getApprovedAppointments: String { 
        case attender = "ATTENDER"
        case attendee = "ATTENDEE"
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional, default to ALL)
     - parameter type: (query)  (optional, default to ATTENDER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApprovedAppointments(userId: String, xAuthToken: String? = nil, status: Status_getApprovedAppointments? = nil, type: ModelType_getApprovedAppointments? = nil, completion: @escaping ((_ data: [Appointment]?,_ error: Error?) -> Void)) {
        getApprovedAppointmentsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, status: status, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/users/{userId}
     - examples: [{contentType=application/json, example=[ {
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
}, {
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional, default to ALL)
     - parameter type: (query)  (optional, default to ATTENDER)

     - returns: RequestBuilder<[Appointment]> 
     */
    open class func getApprovedAppointmentsWithRequestBuilder(userId: String, xAuthToken: String? = nil, status: Status_getApprovedAppointments? = nil, type: ModelType_getApprovedAppointments? = nil) -> RequestBuilder<[Appointment]> {
        var path = "/ehealth/v2/appointments/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status?.rawValue, 
            "type": type?.rawValue
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Appointment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter tenantId: (query)  (optional)
     - parameter onDate: (query)  (optional)
     - parameter zipCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailableCaretakersForAppointment(xAuthToken: String? = nil, tenantId: String? = nil, onDate: Int64? = nil, zipCode: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getAvailableCaretakersForAppointmentWithRequestBuilder(xAuthToken: xAuthToken, tenantId: tenantId, onDate: onDate, zipCode: zipCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/caretakers/available
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "fullName" : "fullName",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "fullName" : "fullName",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter tenantId: (query)  (optional)
     - parameter onDate: (query)  (optional)
     - parameter zipCode: (query)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getAvailableCaretakersForAppointmentWithRequestBuilder(xAuthToken: String? = nil, tenantId: String? = nil, onDate: Int64? = nil, zipCode: String? = nil) -> RequestBuilder<[User]> {
        let path = "/ehealth/v2/appointments/caretakers/available"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId, 
            "onDate": onDate?.encodeToJSON(), 
            "zipCode": zipCode
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter tenantId: (query)  (optional)
     - parameter onDate: (query)  (optional)
     - parameter serviceCategoryId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvailalbleCaretakerForAppointment(xAuthToken: String? = nil, tenantId: String? = nil, onDate: Int64? = nil, serviceCategoryId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAvailalbleCaretakerForAppointmentWithRequestBuilder(xAuthToken: xAuthToken, tenantId: tenantId, onDate: onDate, serviceCategoryId: serviceCategoryId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/appointments/caretakers/availability
     
     - parameter xAuthToken: (header)  (optional)
     - parameter tenantId: (query)  (optional)
     - parameter onDate: (query)  (optional)
     - parameter serviceCategoryId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAvailalbleCaretakerForAppointmentWithRequestBuilder(xAuthToken: String? = nil, tenantId: String? = nil, onDate: Int64? = nil, serviceCategoryId: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/appointments/caretakers/availability"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId, 
            "onDate": onDate?.encodeToJSON(), 
            "serviceCategoryId": serviceCategoryId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInterventionForAppointment(appointmentId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Intervention]?,_ error: Error?) -> Void)) {
        getInterventionForAppointmentWithRequestBuilder(appointmentId: appointmentId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/intervention/{appointmentId}
     - examples: [{contentType=application/json, example=[ {
  "patientId" : "patientId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "reviewResponseEnabled" : false,
  "caretakerId" : "caretakerId",
  "permissions" : "permissions",
  "schedules" : [ {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  }, {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  } ],
  "patientNotificationEnabled" : false,
  "id" : "id",
  "careplanId" : "careplanId",
  "guaridanNotificationEnabled" : false,
  "interventionBluprintId" : "interventionBluprintId",
  "caretakerNotificationEnabled" : false,
  "caretakerName" : "caretakerName",
  "externalId" : "externalId",
  "active" : false,
  "assignedOn" : 1,
  "updatedOn" : 6,
  "parentId" : "parentId",
  "schedule" : {
    "numOfDays" : 1,
    "timings" : {
      "key" : "timings"
    },
    "beginTime" : 6,
    "endTime" : 7
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "applicationId" : "applicationId",
  "parameters" : "parameters"
}, {
  "patientId" : "patientId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "reviewResponseEnabled" : false,
  "caretakerId" : "caretakerId",
  "permissions" : "permissions",
  "schedules" : [ {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  }, {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  } ],
  "patientNotificationEnabled" : false,
  "id" : "id",
  "careplanId" : "careplanId",
  "guaridanNotificationEnabled" : false,
  "interventionBluprintId" : "interventionBluprintId",
  "caretakerNotificationEnabled" : false,
  "caretakerName" : "caretakerName",
  "externalId" : "externalId",
  "active" : false,
  "assignedOn" : 1,
  "updatedOn" : 6,
  "parentId" : "parentId",
  "schedule" : {
    "numOfDays" : 1,
    "timings" : {
      "key" : "timings"
    },
    "beginTime" : 6,
    "endTime" : 7
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "applicationId" : "applicationId",
  "parameters" : "parameters"
} ]}]
     
     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Intervention]> 
     */
    open class func getInterventionForAppointmentWithRequestBuilder(appointmentId: String, xAuthToken: String? = nil) -> RequestBuilder<[Intervention]> {
        var path = "/ehealth/v2/appointments/intervention/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Intervention]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNextAppointment(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Appointment?,_ error: Error?) -> Void)) {
        getNextAppointmentWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/appointments/upcoming/users/{userId}
     - examples: [{contentType=application/json, example={
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Appointment> 
     */
    open class func getNextAppointmentWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<Appointment> {
        var path = "/ehealth/v2/appointments/upcoming/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Appointment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Appointment? = nil, completion: @escaping ((_ data: Appointment?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/appointments
     - examples: [{contentType=application/json, example={
  "ownerType" : "PATIENT",
  "reason" : "reason",
  "appointmentRequestId" : "appointmentRequestId",
  "description" : "description",
  "completionFormUrl" : "completionFormUrl",
  "title" : "title",
  "ownerId" : "ownerId",
  "type" : "HOME",
  "episodeId" : "episodeId",
  "createdOn" : 1,
  "serviceCategory" : "serviceCategory",
  "attendeeName" : "attendeeName",
  "archived" : false,
  "id" : "id",
  "attenderId" : "attenderId",
  "offerings" : [ {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  }, {
    "unitPrice" : 1,
    "taxApplied" : [ {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    }, {
      "archived" : false,
      "tenantId" : "tenantId",
      "name" : "name",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 3,
      "id" : "id",
      "applicationId" : "applicationId",
      "taxAmount" : 2.027123023002322,
      "createdOn" : 9,
      "percent" : 4.145608029883936
    } ],
    "code" : "code",
    "quantity" : 1.2315135367772556,
    "externalId" : "externalId",
    "active" : false,
    "description" : "description",
    "updatedOn" : 7,
    "discountApplied" : 7.386281948385884,
    "createdOn" : 2,
    "totalTax" : 6.84685269835264,
    "archived" : false,
    "totalAmount" : 1.0246457001441578,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "serviceable" : false,
    "applicationId" : "applicationId"
  } ],
  "attenderName" : "attenderName",
  "externalId" : "externalId",
  "active" : false,
  "noteId" : "noteId",
  "updatedOn" : 5,
  "chatSessionId" : "chatSessionId",
  "attendeeId" : "attendeeId",
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "createdBy" : "createdBy",
  "completedOn" : 5,
  "service" : "service",
  "tenantId" : "tenantId",
  "applicationId" : "applicationId",
  "overallStatus" : "PENDING",
  "completedBy" : "completedBy"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Appointment> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Appointment? = nil) -> RequestBuilder<Appointment> {
        let path = "/ehealth/v2/appointments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Appointment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAppointmentRequest(xAuthToken: String? = nil, body: AppointmentRequest? = nil, completion: @escaping ((_ data: AppointmentRequest?,_ error: Error?) -> Void)) {
        updateAppointmentRequestWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/appointments/requests
     - examples: [{contentType=application/json, example={
  "serviceCategoryName" : "serviceCategoryName",
  "patientName" : "patientName",
  "requestedByAccountType" : "PATIENT",
  "patientId" : "patientId",
  "caretakerName" : "caretakerName",
  "caretakerFullName" : "caretakerFullName",
  "requestedById" : "requestedById",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "serviceName" : "serviceName",
  "createdOn" : 0,
  "archived" : false,
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "groupName" : "groupName",
  "caretakerId" : "caretakerId",
  "tenantId" : "tenantId",
  "startTime" : 1,
  "id" : "id",
  "endTime" : 5,
  "applicationId" : "applicationId",
  "status" : "PENDING"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AppointmentRequest> 
     */
    open class func updateAppointmentRequestWithRequestBuilder(xAuthToken: String? = nil, body: AppointmentRequest? = nil) -> RequestBuilder<AppointmentRequest> {
        let path = "/ehealth/v2/appointments/requests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppointmentRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
