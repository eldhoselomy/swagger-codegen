//
// CooeyAPIClient
// PccCoreAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PccCoreAPI {
    /**

     - parameter facId: (path)  
     - parameter tenantId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFacility(facId: String, tenantId: String? = nil, completion: @escaping ((_ data: Facility?,_ error: Error?) -> Void)) {
        getFacilityWithRequestBuilder(facId: facId, tenantId: tenantId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/pcc/core/facs/{facId}
     - examples: [{contentType=application/json, example={
  "lineOfBusiness" : {
    "shortDesc" : "shortDesc",
    "longDesc" : "longDesc"
  },
  "facilityCode" : "facilityCode",
  "country" : "country",
  "city" : "city",
  "postalCode" : "postalCode",
  "reportFilters" : [ {
    "reportFilterId" : 5,
    "items" : [ {
      "reportFilterItemId" : 5
    }, {
      "reportFilterItemId" : 5
    } ]
  }, {
    "reportFilterId" : 5,
    "items" : [ {
      "reportFilterItemId" : 5
    }, {
      "reportFilterItemId" : 5
    } ]
  } ],
  "facId" : 6,
  "timeZone" : "timeZone",
  "active" : false,
  "healthType" : "healthType",
  "generalConfiguration" : {
    "assessment" : {
      "subjective" : "subjective",
      "objective" : "objective"
    }
  },
  "orgId" : 0,
  "headOffice" : false,
  "emailAddress" : "emailAddress",
  "phone" : "phone",
  "addressLine1" : "addressLine1",
  "clinicalConfiguration" : {
    "weightScaleTypes" : [ "weightScaleTypes", "weightScaleTypes" ],
    "units" : {
      "bloodPressure" : "bloodPressure",
      "bloodSugar" : "bloodSugar",
      "heartRate" : "heartRate",
      "oxygenSaturation" : "oxygenSaturation",
      "respirations" : "respirations",
      "temperature" : "temperature",
      "weight" : "weight",
      "height" : "height"
    }
  },
  "billingStyleCountry" : "billingStyleCountry",
  "addressLine2" : "addressLine2",
  "facilityName" : "facilityName",
  "state" : "state",
  "fax" : "fax",
  "bedCount" : 1
}}]
     
     - parameter facId: (path)  
     - parameter tenantId: (query)  (optional)

     - returns: RequestBuilder<Facility> 
     */
    open class func getFacilityWithRequestBuilder(facId: String, tenantId: String? = nil) -> RequestBuilder<Facility> {
        var path = "/ehealth/v2/pcc/core/facs/{facId}"
        let facIdPreEscape = "\(facId)"
        let facIdPostEscape = facIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facId}", with: facIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId
        ])

        let requestBuilder: RequestBuilder<Facility>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter patientId: (path)  
     - parameter tenantId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatient(patientId: String, tenantId: String? = nil, completion: @escaping ((_ data: Patient?,_ error: Error?) -> Void)) {
        getPatientWithRequestBuilder(patientId: patientId, tenantId: tenantId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/pcc/core/patients/{patientId}
     - examples: [{contentType=application/json, example={
  "languageDesc" : "languageDesc",
  "lastName" : "lastName",
  "gender" : "gender",
  "previousAddress" : {
    "country" : "country",
    "city" : "city",
    "postalCode" : "postalCode",
    "county" : "county",
    "addressLine1" : "addressLine1",
    "addressLine2" : "addressLine2",
    "state" : "state"
  },
  "patientId" : 1,
  "smokingStatusDesc" : "smokingStatusDesc",
  "ethnicityDesc" : "ethnicityDesc",
  "patientExternalId" : "patientExternalId",
  "facId" : 6,
  "outpatient" : false,
  "orgId" : 0,
  "dischargeDate" : "dischargeDate",
  "unitId" : 5,
  "floorDesc" : "floorDesc",
  "patientRaces" : [ {
    "raceDesc" : "raceDesc"
  }, {
    "raceDesc" : "raceDesc"
  } ],
  "email" : "email",
  "admissionDate" : "admissionDate",
  "smokingStatusCode" : "smokingStatusCode",
  "waitingList" : false,
  "citizenship" : "citizenship",
  "homePhone" : "homePhone",
  "bedId" : 5,
  "roomDesc" : "roomDesc",
  "languageCode" : "languageCode",
  "birthDate" : "birthDate",
  "patientContacts" : [ {
    "country" : "country",
    "lastName" : "lastName",
    "gender" : "gender",
    "contactId" : 2,
    "city" : "city",
    "postalCode" : "postalCode",
    "homePhone" : "homePhone",
    "county" : "county",
    "contactType" : [ "contactType", "contactType" ],
    "firstName" : "firstName",
    "namePrefix" : "namePrefix",
    "addressLine1" : "addressLine1",
    "state" : "state",
    "relationship" : "relationship",
    "cellPhone" : "cellPhone"
  }, {
    "country" : "country",
    "lastName" : "lastName",
    "gender" : "gender",
    "contactId" : 2,
    "city" : "city",
    "postalCode" : "postalCode",
    "homePhone" : "homePhone",
    "county" : "county",
    "contactType" : [ "contactType", "contactType" ],
    "firstName" : "firstName",
    "namePrefix" : "namePrefix",
    "addressLine1" : "addressLine1",
    "state" : "state",
    "relationship" : "relationship",
    "cellPhone" : "cellPhone"
  } ],
  "bedDesc" : "bedDesc",
  "religion" : "religion",
  "medicalRecordNumber" : "medicalRecordNumber",
  "firstName" : "firstName",
  "unitDesc" : "unitDesc",
  "hasPhoto" : false,
  "middleName" : "middleName",
  "patientStatus" : "patientStatus",
  "maritalStatus" : "maritalStatus"
}}]
     
     - parameter patientId: (path)  
     - parameter tenantId: (query)  (optional)

     - returns: RequestBuilder<Patient> 
     */
    open class func getPatientWithRequestBuilder(patientId: String, tenantId: String? = nil) -> RequestBuilder<Patient> {
        var path = "/ehealth/v2/pcc/core/patients/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId
        ])

        let requestBuilder: RequestBuilder<Patient>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter patientId: (path)  
     - parameter tenantId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientPhoto(patientId: String, tenantId: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getPatientPhotoWithRequestBuilder(patientId: patientId, tenantId: tenantId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/pcc/core/patients/{patientId}/photo
     - examples: [{contentType=application/json, example=""}]
     
     - parameter patientId: (path)  
     - parameter tenantId: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func getPatientPhotoWithRequestBuilder(patientId: String, tenantId: String? = nil) -> RequestBuilder<String> {
        var path = "/ehealth/v2/pcc/core/patients/{patientId}/photo"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId
        ])

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_getSyncStatus: String { 
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
    }

    /**

     - parameter tenantId: (path)  
     - parameter status: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncStatus(tenantId: String, status: Status_getSyncStatus? = nil, completion: @escaping ((_ data: SyncStatus?,_ error: Error?) -> Void)) {
        getSyncStatusWithRequestBuilder(tenantId: tenantId, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/pcc/core/syncstatus/{tenantId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "reasonOfFailure" : "reasonOfFailure",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "status" : "IN_PROGRESS"
}}]
     
     - parameter tenantId: (path)  
     - parameter status: (query)  (optional)

     - returns: RequestBuilder<SyncStatus> 
     */
    open class func getSyncStatusWithRequestBuilder(tenantId: String, status: Status_getSyncStatus? = nil) -> RequestBuilder<SyncStatus> {
        var path = "/ehealth/v2/pcc/core/syncstatus/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status?.rawValue
        ])

        let requestBuilder: RequestBuilder<SyncStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserInfo(tenantId: String? = nil, completion: @escaping ((_ data: UserInfo?,_ error: Error?) -> Void)) {
        getUserInfoWithRequestBuilder(tenantId: tenantId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/pcc/core/userinfo
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "cooeyId" : "cooeyId",
  "title" : "title",
  "createdOn" : 0,
  "userId" : 5,
  "orgId" : 1,
  "enabled" : false,
  "archived" : false,
  "privilegeScopes" : [ "privilegeScopes", "privilegeScopes" ],
  "defaultFacId" : 5,
  "tenantId" : "tenantId",
  "name" : "name",
  "applicationId" : "applicationId",
  "passwordExpired" : false,
  "username" : "username"
}}]
     
     - parameter tenantId: (query)  (optional)

     - returns: RequestBuilder<UserInfo> 
     */
    open class func getUserInfoWithRequestBuilder(tenantId: String? = nil) -> RequestBuilder<UserInfo> {
        let path = "/ehealth/v2/pcc/core/userinfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId
        ])

        let requestBuilder: RequestBuilder<UserInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
