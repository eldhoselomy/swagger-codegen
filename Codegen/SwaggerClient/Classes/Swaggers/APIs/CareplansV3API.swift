//
// CooeyAPIClient
// CareplansV3API.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CareplansV3API {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignCareplan(body: CareplanAssignmentRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        assignCareplanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v3/careplans
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func assignCareplanWithRequestBuilder(body: CareplanAssignmentRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v3/careplans"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter careplanId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveCareplanById(careplanId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        retrieveCareplanByIdWithRequestBuilder(careplanId: careplanId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v3/careplans/{careplanId}
     
     - parameter careplanId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func retrieveCareplanByIdWithRequestBuilder(careplanId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v3/careplans/{careplanId}"
        let careplanIdPreEscape = "\(careplanId)"
        let careplanIdPostEscape = careplanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{careplanId}", with: careplanIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter careplanId: (path)  
     - parameter interventionId: (path)  
     - parameter tenantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveInterventionById(careplanId: String, interventionId: String, tenantId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        retrieveInterventionByIdWithRequestBuilder(careplanId: careplanId, interventionId: interventionId, tenantId: tenantId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v3/careplans/{careplanId}/interventions/{interventionId}/tenants/{tenantId}
     
     - parameter careplanId: (path)  
     - parameter interventionId: (path)  
     - parameter tenantId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func retrieveInterventionByIdWithRequestBuilder(careplanId: String, interventionId: String, tenantId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v3/careplans/{careplanId}/interventions/{interventionId}/tenants/{tenantId}"
        let careplanIdPreEscape = "\(careplanId)"
        let careplanIdPostEscape = careplanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{careplanId}", with: careplanIdPostEscape, options: .literal, range: nil)
        let interventionIdPreEscape = "\(interventionId)"
        let interventionIdPostEscape = interventionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{interventionId}", with: interventionIdPostEscape, options: .literal, range: nil)
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func suspendAllPatientCareplans(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        suspendAllPatientCareplansWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v3/careplans/users/{userId}/status/suspension
     
     - parameter userId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func suspendAllPatientCareplansWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v3/careplans/users/{userId}/status/suspension"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter careplanId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCareplan(careplanId: String, body: CareplanUpdateRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateCareplanWithRequestBuilder(careplanId: careplanId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v3/careplans/{careplanId}
     
     - parameter careplanId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateCareplanWithRequestBuilder(careplanId: String, body: CareplanUpdateRequestDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v3/careplans/{careplanId}"
        let careplanIdPreEscape = "\(careplanId)"
        let careplanIdPostEscape = careplanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{careplanId}", with: careplanIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter careplanId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCareplanStatus(careplanId: String, body: CareplanStatusChange? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateCareplanStatusWithRequestBuilder(careplanId: careplanId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v3/careplans/{careplanId}/status
     
     - parameter careplanId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateCareplanStatusWithRequestBuilder(careplanId: String, body: CareplanStatusChange? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v3/careplans/{careplanId}/status"
        let careplanIdPreEscape = "\(careplanId)"
        let careplanIdPostEscape = careplanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{careplanId}", with: careplanIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
