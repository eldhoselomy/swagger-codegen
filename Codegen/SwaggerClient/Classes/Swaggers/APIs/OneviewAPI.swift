//
// CooeyAPIClient
// OneviewAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OneviewAPI {
    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter groupId: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOneViewList(tenantId: String, xAuthToken: String? = nil, limit: Int? = nil, groupId: String? = nil, offset: Int? = nil, completion: @escaping ((_ data: PagedResultPatientSummary?,_ error: Error?) -> Void)) {
        getOneViewListWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, limit: limit, groupId: groupId, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/patients/summary/tenants/{tenantId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "userHealthScore" : {
      "archived" : false,
      "patientId" : "patientId",
      "active" : false,
      "id" : "id",
      "updatedOn" : 1,
      "healthScore" : {
        "notices" : [ {
          "type" : "SUGGESTION",
          "message" : "message"
        }, {
          "type" : "SUGGESTION",
          "message" : "message"
        } ],
        "valueSynced" : false,
        "calculatedOn" : 1,
        "gradeScale" : {
          "high" : 5,
          "low" : 7,
          "veryHigh" : 5,
          "medium" : 2
        },
        "scoreCalculationHistory" : [ {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        }, {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        } ],
        "totalScore" : 0,
        "outOfScore" : 6
      },
      "createdOn" : 1
    },
    "patient" : {
      "country" : "country",
      "zipCode" : "zipCode",
      "occupation" : "occupation",
      "education" : "education",
      "groupId" : "groupId",
      "type" : "type",
      "shiftTimings" : "shiftTimings",
      "internalId" : "internalId",
      "bloodGroup" : "bloodGroup",
      "password" : "password",
      "id" : "id",
      "profilePhotoId" : "profilePhotoId",
      "governmentId" : "governmentId",
      "height" : {
        "unit" : "unit",
        "value" : 2.027123
      },
      "maratialstatus" : "maratialstatus",
      "emergencyContact" : "emergencyContact",
      "active" : false,
      "weight" : {
        "unit" : "unit",
        "value" : 3.6160767
      },
      "timeZone" : "timeZone",
      "passwordResetEnabled" : false,
      "updatedOn" : 6,
      "profilePhotoURL" : "profilePhotoURL",
      "firstName" : "firstName",
      "authenticationProvider" : "COOEY",
      "userSettings" : {
        "featureList" : {
          "key" : true
        },
        "vitalLimitNotificationEnabled" : false,
        "defaultNotificationMode" : "PUSH_NOTIFICATION",
        "vitalNotificationEnabled" : false,
        "eventNotificationEnabled" : false,
        "vitalLimits" : [ {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        }, {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        } ],
        "notificationEnabled" : false
      },
      "hipSize" : {
        "unit" : "unit",
        "value" : 4.145608
      },
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "status" : "status",
      "lastName" : "lastName",
      "userStatus" : 7,
      "gender" : "gender",
      "authToken" : "authToken",
      "careTaker" : "careTaker",
      "createdOn" : 0,
      "authId" : "authId",
      "encryptedPassword" : "encryptedPassword",
      "archived" : false,
      "icdCodes" : [ "icdCodes", "icdCodes" ],
      "countryCode" : "countryCode",
      "skill" : "skill",
      "alarmId" : "alarmId",
      "currency" : "currency",
      "insuranceInformation" : {
        "primaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsured" : false
      },
      "allergires" : [ {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      }, {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      } ],
      "hourlyPrice" : 1.2315135,
      "email" : "email",
      "shiftId" : "shiftId",
      "address" : {
        "zipCode" : "zipCode",
        "country" : "country",
        "lng" : "lng",
        "pin" : "pin",
        "city" : "city",
        "location" : "location",
        "state" : "state",
        "line2" : "line2",
        "line1" : "line1",
        "lat" : "lat"
      },
      "mobile" : "mobile",
      "externalId" : "externalId",
      "dateOfBirth" : 1,
      "room" : "room",
      "additionalInfoList" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ],
      "profileTags" : [ "profileTags", "profileTags" ],
      "waistSize" : {
        "unit" : "unit",
        "value" : 7.386282
      },
      "tenantId" : "tenantId",
      "pulse" : "pulse",
      "category" : "category",
      "publicId" : 2,
      "age" : 9,
      "username" : "username"
    },
    "careplans" : {
      "careplanName" : "careplanName",
      "careplanId" : "careplanId",
      "totalActionsCount" : 5,
      "totalActionsCompletedCount" : 5
    },
    "primaryVitals" : [ {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    }, {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    } ],
    "baseLineHealthScore" : 2,
    "episodes" : {
      "episodeType" : "RPM",
      "episodeStatus" : "COMPLETED",
      "episodeProgress" : {
        "total" : 7,
        "maxValue" : 2,
        "completed" : 9,
        "percent" : 3,
        "remaining" : "remaining"
      },
      "patientId" : "patientId",
      "episodeId" : "episodeId",
      "episodeCompletedProgress" : {
        "completed" : 4,
        "percent" : 1,
        "remaining" : 7
      }
    },
    "totalAlertCount" : 1
  }, {
    "userHealthScore" : {
      "archived" : false,
      "patientId" : "patientId",
      "active" : false,
      "id" : "id",
      "updatedOn" : 1,
      "healthScore" : {
        "notices" : [ {
          "type" : "SUGGESTION",
          "message" : "message"
        }, {
          "type" : "SUGGESTION",
          "message" : "message"
        } ],
        "valueSynced" : false,
        "calculatedOn" : 1,
        "gradeScale" : {
          "high" : 5,
          "low" : 7,
          "veryHigh" : 5,
          "medium" : 2
        },
        "scoreCalculationHistory" : [ {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        }, {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        } ],
        "totalScore" : 0,
        "outOfScore" : 6
      },
      "createdOn" : 1
    },
    "patient" : {
      "country" : "country",
      "zipCode" : "zipCode",
      "occupation" : "occupation",
      "education" : "education",
      "groupId" : "groupId",
      "type" : "type",
      "shiftTimings" : "shiftTimings",
      "internalId" : "internalId",
      "bloodGroup" : "bloodGroup",
      "password" : "password",
      "id" : "id",
      "profilePhotoId" : "profilePhotoId",
      "governmentId" : "governmentId",
      "height" : {
        "unit" : "unit",
        "value" : 2.027123
      },
      "maratialstatus" : "maratialstatus",
      "emergencyContact" : "emergencyContact",
      "active" : false,
      "weight" : {
        "unit" : "unit",
        "value" : 3.6160767
      },
      "timeZone" : "timeZone",
      "passwordResetEnabled" : false,
      "updatedOn" : 6,
      "profilePhotoURL" : "profilePhotoURL",
      "firstName" : "firstName",
      "authenticationProvider" : "COOEY",
      "userSettings" : {
        "featureList" : {
          "key" : true
        },
        "vitalLimitNotificationEnabled" : false,
        "defaultNotificationMode" : "PUSH_NOTIFICATION",
        "vitalNotificationEnabled" : false,
        "eventNotificationEnabled" : false,
        "vitalLimits" : [ {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        }, {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        } ],
        "notificationEnabled" : false
      },
      "hipSize" : {
        "unit" : "unit",
        "value" : 4.145608
      },
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "status" : "status",
      "lastName" : "lastName",
      "userStatus" : 7,
      "gender" : "gender",
      "authToken" : "authToken",
      "careTaker" : "careTaker",
      "createdOn" : 0,
      "authId" : "authId",
      "encryptedPassword" : "encryptedPassword",
      "archived" : false,
      "icdCodes" : [ "icdCodes", "icdCodes" ],
      "countryCode" : "countryCode",
      "skill" : "skill",
      "alarmId" : "alarmId",
      "currency" : "currency",
      "insuranceInformation" : {
        "primaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsured" : false
      },
      "allergires" : [ {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      }, {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      } ],
      "hourlyPrice" : 1.2315135,
      "email" : "email",
      "shiftId" : "shiftId",
      "address" : {
        "zipCode" : "zipCode",
        "country" : "country",
        "lng" : "lng",
        "pin" : "pin",
        "city" : "city",
        "location" : "location",
        "state" : "state",
        "line2" : "line2",
        "line1" : "line1",
        "lat" : "lat"
      },
      "mobile" : "mobile",
      "externalId" : "externalId",
      "dateOfBirth" : 1,
      "room" : "room",
      "additionalInfoList" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ],
      "profileTags" : [ "profileTags", "profileTags" ],
      "waistSize" : {
        "unit" : "unit",
        "value" : 7.386282
      },
      "tenantId" : "tenantId",
      "pulse" : "pulse",
      "category" : "category",
      "publicId" : 2,
      "age" : 9,
      "username" : "username"
    },
    "careplans" : {
      "careplanName" : "careplanName",
      "careplanId" : "careplanId",
      "totalActionsCount" : 5,
      "totalActionsCompletedCount" : 5
    },
    "primaryVitals" : [ {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    }, {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    } ],
    "baseLineHealthScore" : 2,
    "episodes" : {
      "episodeType" : "RPM",
      "episodeStatus" : "COMPLETED",
      "episodeProgress" : {
        "total" : 7,
        "maxValue" : 2,
        "completed" : 9,
        "percent" : 3,
        "remaining" : "remaining"
      },
      "patientId" : "patientId",
      "episodeId" : "episodeId",
      "episodeCompletedProgress" : {
        "completed" : 4,
        "percent" : 1,
        "remaining" : 7
      }
    },
    "totalAlertCount" : 1
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter groupId: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)

     - returns: RequestBuilder<PagedResultPatientSummary> 
     */
    open class func getOneViewListWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, limit: Int? = nil, groupId: String? = nil, offset: Int? = nil) -> RequestBuilder<PagedResultPatientSummary> {
        var path = "/ehealth/v2/users/patients/summary/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "groupId": groupId, 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultPatientSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter type: (query)  (optional, default to OPEN)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientAlerts(patientId: String, xAuthToken: String? = nil, offset: Int64? = nil, limit: Int? = nil, type: String? = nil, completion: @escaping ((_ data: PagedResultAlert?,_ error: Error?) -> Void)) {
        getPatientAlertsWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken, offset: offset, limit: limit, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/patients/{patientId}/alerts
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "closedBy" : "closedBy",
    "notes" : "notes",
    "patientId" : "patientId",
    "closedOn" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "message" : "message",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "caretakerId" : "caretakerId",
    "notifierId" : "notifierId",
    "tenantId" : "tenantId",
    "closed" : false,
    "id" : "id",
    "applicationId" : "applicationId",
    "causerId" : "causerId",
    "status" : "status"
  }, {
    "closedBy" : "closedBy",
    "notes" : "notes",
    "patientId" : "patientId",
    "closedOn" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "message" : "message",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "caretakerId" : "caretakerId",
    "notifierId" : "notifierId",
    "tenantId" : "tenantId",
    "closed" : false,
    "id" : "id",
    "applicationId" : "applicationId",
    "causerId" : "causerId",
    "status" : "status"
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter type: (query)  (optional, default to OPEN)

     - returns: RequestBuilder<PagedResultAlert> 
     */
    open class func getPatientAlertsWithRequestBuilder(patientId: String, xAuthToken: String? = nil, offset: Int64? = nil, limit: Int? = nil, type: String? = nil) -> RequestBuilder<PagedResultAlert> {
        var path = "/ehealth/v2/users/patients/{patientId}/alerts"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "type": type
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultAlert>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientDetails(patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPatientDetailsWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/patients/{patientId}/details
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getPatientDetailsWithRequestBuilder(patientId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/patients/{patientId}/details"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientNotes(patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPatientNotesWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/patients/{patientId}/notes
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getPatientNotesWithRequestBuilder(patientId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/patients/{patientId}/notes"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter vitalType: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalHistory(patientId: String, vitalType: String, xAuthToken: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVitalHistoryWithRequestBuilder(patientId: patientId, vitalType: vitalType, xAuthToken: xAuthToken, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/patients/{patientId}/vitals/{vitalType}
     
     - parameter patientId: (path)  
     - parameter vitalType: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getVitalHistoryWithRequestBuilder(patientId: String, vitalType: String, xAuthToken: String? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/patients/{patientId}/vitals/{vitalType}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let vitalTypePreEscape = "\(vitalType)"
        let vitalTypePostEscape = vitalTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vitalType}", with: vitalTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter primary: (query)  (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalsForPatient(patientId: String, xAuthToken: String? = nil, primary: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVitalsForPatientWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken, primary: primary).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/patients/{patientId}/vitals/allVitals
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter primary: (query)  (optional, default to true)

     - returns: RequestBuilder<Void> 
     */
    open class func getVitalsForPatientWithRequestBuilder(patientId: String, xAuthToken: String? = nil, primary: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/patients/{patientId}/vitals/allVitals"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "primary": primary
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchPatient(tenantId: String, xAuthToken: String? = nil, query: String? = nil, groupId: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: PagedResultPatientSummary?,_ error: Error?) -> Void)) {
        searchPatientWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, query: query, groupId: groupId, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/patients/summary/tenants/{tenantId}/search
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "userHealthScore" : {
      "archived" : false,
      "patientId" : "patientId",
      "active" : false,
      "id" : "id",
      "updatedOn" : 1,
      "healthScore" : {
        "notices" : [ {
          "type" : "SUGGESTION",
          "message" : "message"
        }, {
          "type" : "SUGGESTION",
          "message" : "message"
        } ],
        "valueSynced" : false,
        "calculatedOn" : 1,
        "gradeScale" : {
          "high" : 5,
          "low" : 7,
          "veryHigh" : 5,
          "medium" : 2
        },
        "scoreCalculationHistory" : [ {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        }, {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        } ],
        "totalScore" : 0,
        "outOfScore" : 6
      },
      "createdOn" : 1
    },
    "patient" : {
      "country" : "country",
      "zipCode" : "zipCode",
      "occupation" : "occupation",
      "education" : "education",
      "groupId" : "groupId",
      "type" : "type",
      "shiftTimings" : "shiftTimings",
      "internalId" : "internalId",
      "bloodGroup" : "bloodGroup",
      "password" : "password",
      "id" : "id",
      "profilePhotoId" : "profilePhotoId",
      "governmentId" : "governmentId",
      "height" : {
        "unit" : "unit",
        "value" : 2.027123
      },
      "maratialstatus" : "maratialstatus",
      "emergencyContact" : "emergencyContact",
      "active" : false,
      "weight" : {
        "unit" : "unit",
        "value" : 3.6160767
      },
      "timeZone" : "timeZone",
      "passwordResetEnabled" : false,
      "updatedOn" : 6,
      "profilePhotoURL" : "profilePhotoURL",
      "firstName" : "firstName",
      "authenticationProvider" : "COOEY",
      "userSettings" : {
        "featureList" : {
          "key" : true
        },
        "vitalLimitNotificationEnabled" : false,
        "defaultNotificationMode" : "PUSH_NOTIFICATION",
        "vitalNotificationEnabled" : false,
        "eventNotificationEnabled" : false,
        "vitalLimits" : [ {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        }, {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        } ],
        "notificationEnabled" : false
      },
      "hipSize" : {
        "unit" : "unit",
        "value" : 4.145608
      },
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "status" : "status",
      "lastName" : "lastName",
      "userStatus" : 7,
      "gender" : "gender",
      "authToken" : "authToken",
      "careTaker" : "careTaker",
      "createdOn" : 0,
      "authId" : "authId",
      "encryptedPassword" : "encryptedPassword",
      "archived" : false,
      "icdCodes" : [ "icdCodes", "icdCodes" ],
      "countryCode" : "countryCode",
      "skill" : "skill",
      "alarmId" : "alarmId",
      "currency" : "currency",
      "insuranceInformation" : {
        "primaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsured" : false
      },
      "allergires" : [ {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      }, {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      } ],
      "hourlyPrice" : 1.2315135,
      "email" : "email",
      "shiftId" : "shiftId",
      "address" : {
        "zipCode" : "zipCode",
        "country" : "country",
        "lng" : "lng",
        "pin" : "pin",
        "city" : "city",
        "location" : "location",
        "state" : "state",
        "line2" : "line2",
        "line1" : "line1",
        "lat" : "lat"
      },
      "mobile" : "mobile",
      "externalId" : "externalId",
      "dateOfBirth" : 1,
      "room" : "room",
      "additionalInfoList" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ],
      "profileTags" : [ "profileTags", "profileTags" ],
      "waistSize" : {
        "unit" : "unit",
        "value" : 7.386282
      },
      "tenantId" : "tenantId",
      "pulse" : "pulse",
      "category" : "category",
      "publicId" : 2,
      "age" : 9,
      "username" : "username"
    },
    "careplans" : {
      "careplanName" : "careplanName",
      "careplanId" : "careplanId",
      "totalActionsCount" : 5,
      "totalActionsCompletedCount" : 5
    },
    "primaryVitals" : [ {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    }, {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    } ],
    "baseLineHealthScore" : 2,
    "episodes" : {
      "episodeType" : "RPM",
      "episodeStatus" : "COMPLETED",
      "episodeProgress" : {
        "total" : 7,
        "maxValue" : 2,
        "completed" : 9,
        "percent" : 3,
        "remaining" : "remaining"
      },
      "patientId" : "patientId",
      "episodeId" : "episodeId",
      "episodeCompletedProgress" : {
        "completed" : 4,
        "percent" : 1,
        "remaining" : 7
      }
    },
    "totalAlertCount" : 1
  }, {
    "userHealthScore" : {
      "archived" : false,
      "patientId" : "patientId",
      "active" : false,
      "id" : "id",
      "updatedOn" : 1,
      "healthScore" : {
        "notices" : [ {
          "type" : "SUGGESTION",
          "message" : "message"
        }, {
          "type" : "SUGGESTION",
          "message" : "message"
        } ],
        "valueSynced" : false,
        "calculatedOn" : 1,
        "gradeScale" : {
          "high" : 5,
          "low" : 7,
          "veryHigh" : 5,
          "medium" : 2
        },
        "scoreCalculationHistory" : [ {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        }, {
          "score" : 9,
          "calculatedOn" : 3,
          "scoreParametersSections" : [ {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          }, {
            "sectionName" : "sectionName",
            "scoreParameters" : [ {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            }, {
              "measuredOn" : 2,
              "name" : "name",
              "type" : "type",
              "prompt" : "prompt",
              "value" : "value",
              "mandatory" : false
            } ]
          } ]
        } ],
        "totalScore" : 0,
        "outOfScore" : 6
      },
      "createdOn" : 1
    },
    "patient" : {
      "country" : "country",
      "zipCode" : "zipCode",
      "occupation" : "occupation",
      "education" : "education",
      "groupId" : "groupId",
      "type" : "type",
      "shiftTimings" : "shiftTimings",
      "internalId" : "internalId",
      "bloodGroup" : "bloodGroup",
      "password" : "password",
      "id" : "id",
      "profilePhotoId" : "profilePhotoId",
      "governmentId" : "governmentId",
      "height" : {
        "unit" : "unit",
        "value" : 2.027123
      },
      "maratialstatus" : "maratialstatus",
      "emergencyContact" : "emergencyContact",
      "active" : false,
      "weight" : {
        "unit" : "unit",
        "value" : 3.6160767
      },
      "timeZone" : "timeZone",
      "passwordResetEnabled" : false,
      "updatedOn" : 6,
      "profilePhotoURL" : "profilePhotoURL",
      "firstName" : "firstName",
      "authenticationProvider" : "COOEY",
      "userSettings" : {
        "featureList" : {
          "key" : true
        },
        "vitalLimitNotificationEnabled" : false,
        "defaultNotificationMode" : "PUSH_NOTIFICATION",
        "vitalNotificationEnabled" : false,
        "eventNotificationEnabled" : false,
        "vitalLimits" : [ {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        }, {
          "higherLimit" : 5.637377,
          "lowerLimit" : 5.962134,
          "limitType" : "limitType"
        } ],
        "notificationEnabled" : false
      },
      "hipSize" : {
        "unit" : "unit",
        "value" : 4.145608
      },
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "status" : "status",
      "lastName" : "lastName",
      "userStatus" : 7,
      "gender" : "gender",
      "authToken" : "authToken",
      "careTaker" : "careTaker",
      "createdOn" : 0,
      "authId" : "authId",
      "encryptedPassword" : "encryptedPassword",
      "archived" : false,
      "icdCodes" : [ "icdCodes", "icdCodes" ],
      "countryCode" : "countryCode",
      "skill" : "skill",
      "alarmId" : "alarmId",
      "currency" : "currency",
      "insuranceInformation" : {
        "primaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsuranceDetails" : {
          "authorizationNumber" : "authorizationNumber",
          "carrierName" : "carrierName",
          "insuranceId" : "insuranceId"
        },
        "secondaryInsured" : false
      },
      "allergires" : [ {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      }, {
        "symptoms" : [ "symptoms", "symptoms" ],
        "level" : "LOW",
        "name" : "name"
      } ],
      "hourlyPrice" : 1.2315135,
      "email" : "email",
      "shiftId" : "shiftId",
      "address" : {
        "zipCode" : "zipCode",
        "country" : "country",
        "lng" : "lng",
        "pin" : "pin",
        "city" : "city",
        "location" : "location",
        "state" : "state",
        "line2" : "line2",
        "line1" : "line1",
        "lat" : "lat"
      },
      "mobile" : "mobile",
      "externalId" : "externalId",
      "dateOfBirth" : 1,
      "room" : "room",
      "additionalInfoList" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ],
      "profileTags" : [ "profileTags", "profileTags" ],
      "waistSize" : {
        "unit" : "unit",
        "value" : 7.386282
      },
      "tenantId" : "tenantId",
      "pulse" : "pulse",
      "category" : "category",
      "publicId" : 2,
      "age" : 9,
      "username" : "username"
    },
    "careplans" : {
      "careplanName" : "careplanName",
      "careplanId" : "careplanId",
      "totalActionsCount" : 5,
      "totalActionsCompletedCount" : 5
    },
    "primaryVitals" : [ {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    }, {
      "vitalName" : "vitalName",
      "vital" : {
        "deviceType" : "deviceType",
        "externalId" : "externalId",
        "active" : false,
        "takenOn" : 1,
        "postAction" : "postAction",
        "noteId" : "noteId",
        "contextId" : "contextId",
        "updatedOn" : 7,
        "source" : "MANUAL",
        "deviceReading" : false,
        "createdOn" : 4,
        "userId" : "userId",
        "deviceId" : "deviceId",
        "platform" : "platform",
        "archived" : false,
        "takenBy" : "takenBy",
        "contextType" : "contextType",
        "tenantId" : "tenantId",
        "context" : "context",
        "id" : "id",
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "vitalType" : "vitalType"
      }
    } ],
    "baseLineHealthScore" : 2,
    "episodes" : {
      "episodeType" : "RPM",
      "episodeStatus" : "COMPLETED",
      "episodeProgress" : {
        "total" : 7,
        "maxValue" : 2,
        "completed" : 9,
        "percent" : 3,
        "remaining" : "remaining"
      },
      "patientId" : "patientId",
      "episodeId" : "episodeId",
      "episodeCompletedProgress" : {
        "completed" : 4,
        "percent" : 1,
        "remaining" : 7
      }
    },
    "totalAlertCount" : 1
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)

     - returns: RequestBuilder<PagedResultPatientSummary> 
     */
    open class func searchPatientWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, query: String? = nil, groupId: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PagedResultPatientSummary> {
        var path = "/ehealth/v2/users/patients/summary/tenants/{tenantId}/search"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "groupId": groupId, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultPatientSummary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
