//
// CooeyAPIClient
// DevicesAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DevicesAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter offset: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(xAuthToken: xAuthToken, limit: limit, offset: offset).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/devices
     
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter offset: (query)  (optional, default to 0)

     - returns: RequestBuilder<Void> 
     */
    open class func callGetWithRequestBuilder(xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/users/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSettings(xAuthToken: String? = nil, body: DeviceAlertSettings? = nil, completion: @escaping ((_ data: DeviceAlertSettings?,_ error: Error?) -> Void)) {
        createSettingsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/devices/settings
     - examples: [{contentType=application/json, example={
  "gpsAlertSettings" : {
    "sleep" : 5,
    "night" : 5,
    "day" : 1
  },
  "patientId" : "patientId",
  "deviceTemperatureLevelSettings" : {
    "high" : 7,
    "period" : 1,
    "low" : 1
  },
  "deviceActivityPeriodSettings" : {
    "sleep" : "sleep",
    "night" : "night",
    "day" : "day"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "archived" : false,
  "deviceSettingLevel" : "TENANT",
  "temperatureAlertSettings" : {
    "sleep" : 9,
    "night" : 7,
    "day" : 2
  },
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "serverConnectionFrequency" : {
    "sleep" : 4,
    "night" : 2,
    "day" : 3
  },
  "enableGPS" : false,
  "timestamp" : 1
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DeviceAlertSettings> 
     */
    open class func createSettingsWithRequestBuilder(xAuthToken: String? = nil, body: DeviceAlertSettings? = nil) -> RequestBuilder<DeviceAlertSettings> {
        let path = "/ehealth/v2/users/devices/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeviceAlertSettings>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter deviceId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getByDeviceId(deviceId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        getByDeviceIdWithRequestBuilder(deviceId: deviceId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/devices/{deviceId}
     - examples: [{contentType=application/json, example={
  "mobileNumber" : "mobileNumber",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter deviceId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func getByDeviceIdWithRequestBuilder(deviceId: String, xAuthToken: String? = nil) -> RequestBuilder<Device> {
        var path = "/ehealth/v2/users/devices/{deviceId}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getByPatientId(patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        getByPatientIdWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/devices/user/{patientId}
     - examples: [{contentType=application/json, example={
  "mobileNumber" : "mobileNumber",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func getByPatientIdWithRequestBuilder(patientId: String, xAuthToken: String? = nil) -> RequestBuilder<Device> {
        var path = "/ehealth/v2/users/devices/user/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceSpecifications(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [DeviceSpecification]?,_ error: Error?) -> Void)) {
        getDeviceSpecificationsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/devices/specifications/users/{userId}
     - examples: [{contentType=application/json, example=[ {
  "brandName" : "brandName",
  "capabilities" : [ "BLOOD_PRESSURE", "BLOOD_PRESSURE" ],
  "brandUrl" : "brandUrl",
  "toBePaired" : false,
  "imageUrl" : "imageUrl",
  "name" : "name",
  "description" : "description",
  "model" : "model"
}, {
  "brandName" : "brandName",
  "capabilities" : [ "BLOOD_PRESSURE", "BLOOD_PRESSURE" ],
  "brandUrl" : "brandUrl",
  "toBePaired" : false,
  "imageUrl" : "imageUrl",
  "name" : "name",
  "description" : "description",
  "model" : "model"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[DeviceSpecification]> 
     */
    open class func getDeviceSpecificationsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[DeviceSpecification]> {
        var path = "/ehealth/v2/users/devices/specifications/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[DeviceSpecification]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter patientId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSettings(xAuthToken: String? = nil, patientId: String? = nil, completion: @escaping ((_ data: DeviceAlertSettings?,_ error: Error?) -> Void)) {
        getSettingsWithRequestBuilder(xAuthToken: xAuthToken, patientId: patientId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/devices/settings
     - examples: [{contentType=application/json, example={
  "gpsAlertSettings" : {
    "sleep" : 5,
    "night" : 5,
    "day" : 1
  },
  "patientId" : "patientId",
  "deviceTemperatureLevelSettings" : {
    "high" : 7,
    "period" : 1,
    "low" : 1
  },
  "deviceActivityPeriodSettings" : {
    "sleep" : "sleep",
    "night" : "night",
    "day" : "day"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "archived" : false,
  "deviceSettingLevel" : "TENANT",
  "temperatureAlertSettings" : {
    "sleep" : 9,
    "night" : 7,
    "day" : 2
  },
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "serverConnectionFrequency" : {
    "sleep" : 4,
    "night" : 2,
    "day" : 3
  },
  "enableGPS" : false,
  "timestamp" : 1
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter patientId: (query)  (optional)

     - returns: RequestBuilder<DeviceAlertSettings> 
     */
    open class func getSettingsWithRequestBuilder(xAuthToken: String? = nil, patientId: String? = nil) -> RequestBuilder<DeviceAlertSettings> {
        let path = "/ehealth/v2/users/devices/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "patientId": patientId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeviceAlertSettings>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter deviceId: (path)  
     - parameter mobileNumber: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniqueDeviceId(deviceId: String, mobileNumber: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        getUniqueDeviceIdWithRequestBuilder(deviceId: deviceId, mobileNumber: mobileNumber, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/devices/unique/{deviceId}/{mobileNumber}
     - examples: [{contentType=application/json, example={
  "mobileNumber" : "mobileNumber",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter deviceId: (path)  
     - parameter mobileNumber: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func getUniqueDeviceIdWithRequestBuilder(deviceId: String, mobileNumber: String, xAuthToken: String? = nil) -> RequestBuilder<Device> {
        var path = "/ehealth/v2/users/devices/unique/{deviceId}/{mobileNumber}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let mobileNumberPreEscape = "\(mobileNumber)"
        let mobileNumberPostEscape = mobileNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mobileNumber}", with: mobileNumberPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func post(xAuthToken: String? = nil, body: Device? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        postWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/devices
     - examples: [{contentType=application/json, example={
  "mobileNumber" : "mobileNumber",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func postWithRequestBuilder(xAuthToken: String? = nil, body: Device? = nil) -> RequestBuilder<Device> {
        let path = "/ehealth/v2/users/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter offset: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(xAuthToken: String? = nil, query: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(xAuthToken: xAuthToken, query: query, limit: limit, offset: offset).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/devices/search
     
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter offset: (query)  (optional, default to 0)

     - returns: RequestBuilder<Void> 
     */
    open class func searchWithRequestBuilder(xAuthToken: String? = nil, query: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/users/devices/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Device? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/devices
     - examples: [{contentType=application/json, example={
  "mobileNumber" : "mobileNumber",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Device? = nil) -> RequestBuilder<Device> {
        let path = "/ehealth/v2/users/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSettings(xAuthToken: String? = nil, body: DeviceAlertSettings? = nil, completion: @escaping ((_ data: DeviceAlertSettings?,_ error: Error?) -> Void)) {
        updateSettingsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/devices/settings
     - examples: [{contentType=application/json, example={
  "gpsAlertSettings" : {
    "sleep" : 5,
    "night" : 5,
    "day" : 1
  },
  "patientId" : "patientId",
  "deviceTemperatureLevelSettings" : {
    "high" : 7,
    "period" : 1,
    "low" : 1
  },
  "deviceActivityPeriodSettings" : {
    "sleep" : "sleep",
    "night" : "night",
    "day" : "day"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "archived" : false,
  "deviceSettingLevel" : "TENANT",
  "temperatureAlertSettings" : {
    "sleep" : 9,
    "night" : 7,
    "day" : 2
  },
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "serverConnectionFrequency" : {
    "sleep" : 4,
    "night" : 2,
    "day" : 3
  },
  "enableGPS" : false,
  "timestamp" : 1
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DeviceAlertSettings> 
     */
    open class func updateSettingsWithRequestBuilder(xAuthToken: String? = nil, body: DeviceAlertSettings? = nil) -> RequestBuilder<DeviceAlertSettings> {
        let path = "/ehealth/v2/users/devices/settings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeviceAlertSettings>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
