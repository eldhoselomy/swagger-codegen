//
// CooeyAPIClient
// LeadsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LeadsAPI {
    /**

     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeLead(leadId: String, xAuthToken: String? = nil, body: LeadUpdateRequest? = nil, completion: @escaping ((_ data: LeadUpdateRequest?,_ error: Error?) -> Void)) {
        closeLeadWithRequestBuilder(leadId: leadId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/leads/{leadId}
     - examples: [{contentType=application/json, example={
  "referralReason" : "referralReason",
  "notes" : "notes",
  "leadSameAsPatient" : false,
  "query" : "query",
  "updatedOn" : 6,
  "source" : "source",
  "createdOn" : 0,
  "personInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "assignedTo" : "assignedTo",
  "archived" : false,
  "referredTo" : "referredTo",
  "createdBy" : "createdBy",
  "domain" : "domain",
  "referredBy" : "referredBy",
  "tenantId" : "tenantId",
  "id" : "id",
  "insuranceCarrier" : "insuranceCarrier",
  "patientInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "status" : "NEW"
}}]
     
     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<LeadUpdateRequest> 
     */
    open class func closeLeadWithRequestBuilder(leadId: String, xAuthToken: String? = nil, body: LeadUpdateRequest? = nil) -> RequestBuilder<LeadUpdateRequest> {
        var path = "/ehealth/v2/leads/{leadId}"
        let leadIdPreEscape = "\(leadId)"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LeadUpdateRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertLeadToPatient(leadId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        convertLeadToPatientWithRequestBuilder(leadId: leadId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/leads/{leadId}/convert-to-patient
     
     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func convertLeadToPatientWithRequestBuilder(leadId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/leads/{leadId}/convert-to-patient"
        let leadIdPreEscape = "\(leadId)"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFollowUp(xAuthToken: String? = nil, body: FollowUpRequest? = nil, completion: @escaping ((_ data: FollowUpResponse?,_ error: Error?) -> Void)) {
        createFollowUpWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/leads/follow-ups
     - examples: [{contentType=application/json, example={
  "scheduledOn" : 0,
  "leadName" : "leadName",
  "id" : "id",
  "createdOn" : 6,
  "tasks" : [ {
    "description" : "description",
    "completed" : false
  }, {
    "description" : "description",
    "completed" : false
  } ],
  "leadId" : "leadId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<FollowUpResponse> 
     */
    open class func createFollowUpWithRequestBuilder(xAuthToken: String? = nil, body: FollowUpRequest? = nil) -> RequestBuilder<FollowUpResponse> {
        let path = "/ehealth/v2/leads/follow-ups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FollowUpResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createLead(xAuthToken: String? = nil, body: LeadRequest? = nil, completion: @escaping ((_ data: Lead?,_ error: Error?) -> Void)) {
        createLeadWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/leads
     - examples: [{contentType=application/json, example={
  "referralReason" : "referralReason",
  "leadSameAsPatient" : false,
  "query" : "query",
  "updatedOn" : 6,
  "source" : "source",
  "createdOn" : 0,
  "personInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "assignedTo" : "assignedTo",
  "archived" : false,
  "referredTo" : "referredTo",
  "createdBy" : "createdBy",
  "domain" : "domain",
  "referredBy" : "referredBy",
  "tenantId" : "tenantId",
  "id" : "id",
  "insuranceCarrier" : "insuranceCarrier",
  "patientInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "status" : "NEW"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Lead> 
     */
    open class func createLeadWithRequestBuilder(xAuthToken: String? = nil, body: LeadRequest? = nil) -> RequestBuilder<Lead> {
        let path = "/ehealth/v2/leads"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Lead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNote(xAuthToken: String? = nil, body: NotesRequest? = nil, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        createNoteWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/leads/{leadId}/notes
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "updatedOn" : 6,
  "id" : "id",
  "createdOn" : 0,
  "content" : "content",
  "leadId" : "leadId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Note> 
     */
    open class func createNoteWithRequestBuilder(xAuthToken: String? = nil, body: NotesRequest? = nil) -> RequestBuilder<Note> {
        let path = "/ehealth/v2/leads/{leadId}/notes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Note>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLead(leadId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteLeadWithRequestBuilder(leadId: leadId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/leads/{leadId}
     
     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLeadWithRequestBuilder(leadId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/leads/{leadId}"
        let leadIdPreEscape = "\(leadId)"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter assignerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllFollowUpsForUser(assignerId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: FollowUpResponse?,_ error: Error?) -> Void)) {
        getAllFollowUpsForUserWithRequestBuilder(assignerId: assignerId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/users/{assignerId}/follow-ups
     - examples: [{contentType=application/json, example={
  "scheduledOn" : 0,
  "leadName" : "leadName",
  "id" : "id",
  "createdOn" : 6,
  "tasks" : [ {
    "description" : "description",
    "completed" : false
  }, {
    "description" : "description",
    "completed" : false
  } ],
  "leadId" : "leadId"
}}]
     
     - parameter assignerId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<FollowUpResponse> 
     */
    open class func getAllFollowUpsForUserWithRequestBuilder(assignerId: String, xAuthToken: String? = nil) -> RequestBuilder<FollowUpResponse> {
        var path = "/ehealth/v2/leads/users/{assignerId}/follow-ups"
        let assignerIdPreEscape = "\(assignerId)"
        let assignerIdPostEscape = assignerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignerId}", with: assignerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FollowUpResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLead(leadId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Lead?,_ error: Error?) -> Void)) {
        getLeadWithRequestBuilder(leadId: leadId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/{leadId}
     - examples: [{contentType=application/json, example={
  "referralReason" : "referralReason",
  "leadSameAsPatient" : false,
  "query" : "query",
  "updatedOn" : 6,
  "source" : "source",
  "createdOn" : 0,
  "personInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "assignedTo" : "assignedTo",
  "archived" : false,
  "referredTo" : "referredTo",
  "createdBy" : "createdBy",
  "domain" : "domain",
  "referredBy" : "referredBy",
  "tenantId" : "tenantId",
  "id" : "id",
  "insuranceCarrier" : "insuranceCarrier",
  "patientInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "status" : "NEW"
}}]
     
     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Lead> 
     */
    open class func getLeadWithRequestBuilder(leadId: String, xAuthToken: String? = nil) -> RequestBuilder<Lead> {
        var path = "/ehealth/v2/leads/{leadId}"
        let leadIdPreEscape = "\(leadId)"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Lead>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLeadFollowUpsByLeadId(leadId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: FollowUpResponse?,_ error: Error?) -> Void)) {
        getLeadFollowUpsByLeadIdWithRequestBuilder(leadId: leadId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/{leadId}/follow-ups
     - examples: [{contentType=application/json, example={
  "scheduledOn" : 0,
  "leadName" : "leadName",
  "id" : "id",
  "createdOn" : 6,
  "tasks" : [ {
    "description" : "description",
    "completed" : false
  }, {
    "description" : "description",
    "completed" : false
  } ],
  "leadId" : "leadId"
}}]
     
     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<FollowUpResponse> 
     */
    open class func getLeadFollowUpsByLeadIdWithRequestBuilder(leadId: String, xAuthToken: String? = nil) -> RequestBuilder<FollowUpResponse> {
        var path = "/ehealth/v2/leads/{leadId}/follow-ups"
        let leadIdPreEscape = "\(leadId)"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FollowUpResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLeads(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [LeadResponse]?,_ error: Error?) -> Void)) {
        getLeadsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/registration-requests/{tenantId}
     - examples: [{contentType=application/json, example=[ {
  "referralReason" : "referralReason",
  "leadSameAsPatient" : false,
  "query" : "query",
  "updatedOn" : 6,
  "source" : "source",
  "createdOn" : 0,
  "personInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "assignedTo" : "assignedTo",
  "archived" : false,
  "referredTo" : "referredTo",
  "createdBy" : "createdBy",
  "domain" : "domain",
  "referredBy" : "referredBy",
  "tenantId" : "tenantId",
  "insuranceCarrier" : "insuranceCarrier",
  "patientInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "leadId" : "leadId",
  "status" : "NEW"
}, {
  "referralReason" : "referralReason",
  "leadSameAsPatient" : false,
  "query" : "query",
  "updatedOn" : 6,
  "source" : "source",
  "createdOn" : 0,
  "personInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "assignedTo" : "assignedTo",
  "archived" : false,
  "referredTo" : "referredTo",
  "createdBy" : "createdBy",
  "domain" : "domain",
  "referredBy" : "referredBy",
  "tenantId" : "tenantId",
  "insuranceCarrier" : "insuranceCarrier",
  "patientInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "phoneNumber" : "phoneNumber",
    "middleName" : "middleName",
    "email" : "email"
  },
  "leadId" : "leadId",
  "status" : "NEW"
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[LeadResponse]> 
     */
    open class func getLeadsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<[LeadResponse]> {
        var path = "/ehealth/v2/leads/registration-requests/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[LeadResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional, default to 0)
     - parameter endTime: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLeads_0(userId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, status: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: PagedResultLeadResponse?,_ error: Error?) -> Void)) {
        getLeads_0WithRequestBuilder(userId: userId, xAuthToken: xAuthToken, startTime: startTime, endTime: endTime, status: status, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/users/{userId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "referralReason" : "referralReason",
    "leadSameAsPatient" : false,
    "query" : "query",
    "updatedOn" : 6,
    "source" : "source",
    "createdOn" : 0,
    "personInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "assignedTo" : "assignedTo",
    "archived" : false,
    "referredTo" : "referredTo",
    "createdBy" : "createdBy",
    "domain" : "domain",
    "referredBy" : "referredBy",
    "tenantId" : "tenantId",
    "insuranceCarrier" : "insuranceCarrier",
    "patientInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "leadId" : "leadId",
    "status" : "NEW"
  }, {
    "referralReason" : "referralReason",
    "leadSameAsPatient" : false,
    "query" : "query",
    "updatedOn" : 6,
    "source" : "source",
    "createdOn" : 0,
    "personInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "assignedTo" : "assignedTo",
    "archived" : false,
    "referredTo" : "referredTo",
    "createdBy" : "createdBy",
    "domain" : "domain",
    "referredBy" : "referredBy",
    "tenantId" : "tenantId",
    "insuranceCarrier" : "insuranceCarrier",
    "patientInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "leadId" : "leadId",
    "status" : "NEW"
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional, default to 0)
     - parameter endTime: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)

     - returns: RequestBuilder<PagedResultLeadResponse> 
     */
    open class func getLeads_0WithRequestBuilder(userId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, status: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PagedResultLeadResponse> {
        var path = "/ehealth/v2/leads/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "status": status, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultLeadResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional, default to 0)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotes(leadId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, completion: @escaping ((_ data: [NotesResponse]?,_ error: Error?) -> Void)) {
        getNotesWithRequestBuilder(leadId: leadId, xAuthToken: xAuthToken, startTime: startTime, endTime: endTime, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/{leadId}/notes
     - examples: [{contentType=application/json, example=[ {
  "archived" : false,
  "tenantId" : "tenantId",
  "updatedOn" : 6,
  "createdOn" : 0,
  "content" : "content",
  "leadId" : "leadId"
}, {
  "archived" : false,
  "tenantId" : "tenantId",
  "updatedOn" : 6,
  "createdOn" : 0,
  "content" : "content",
  "leadId" : "leadId"
} ]}]
     
     - parameter leadId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional, default to 0)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional, default to 10)

     - returns: RequestBuilder<[NotesResponse]> 
     */
    open class func getNotesWithRequestBuilder(leadId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil) -> RequestBuilder<[NotesResponse]> {
        var path = "/ehealth/v2/leads/{leadId}/notes"
        let leadIdPreEscape = "\(leadId)"
        let leadIdPostEscape = leadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leadId}", with: leadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[NotesResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional)
     - parameter startTime: (query)  (optional, default to 0)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchLeads(userId: String, xAuthToken: String? = nil, status: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, limit: Int? = nil, query: String? = nil, completion: @escaping ((_ data: PagedResultLeadResponse?,_ error: Error?) -> Void)) {
        searchLeadsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, status: status, startTime: startTime, endTime: endTime, offset: offset, limit: limit, query: query).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/leads/search/{userId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "referralReason" : "referralReason",
    "leadSameAsPatient" : false,
    "query" : "query",
    "updatedOn" : 6,
    "source" : "source",
    "createdOn" : 0,
    "personInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "assignedTo" : "assignedTo",
    "archived" : false,
    "referredTo" : "referredTo",
    "createdBy" : "createdBy",
    "domain" : "domain",
    "referredBy" : "referredBy",
    "tenantId" : "tenantId",
    "insuranceCarrier" : "insuranceCarrier",
    "patientInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "leadId" : "leadId",
    "status" : "NEW"
  }, {
    "referralReason" : "referralReason",
    "leadSameAsPatient" : false,
    "query" : "query",
    "updatedOn" : 6,
    "source" : "source",
    "createdOn" : 0,
    "personInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "assignedTo" : "assignedTo",
    "archived" : false,
    "referredTo" : "referredTo",
    "createdBy" : "createdBy",
    "domain" : "domain",
    "referredBy" : "referredBy",
    "tenantId" : "tenantId",
    "insuranceCarrier" : "insuranceCarrier",
    "patientInfo" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "phoneNumber" : "phoneNumber",
      "middleName" : "middleName",
      "email" : "email"
    },
    "leadId" : "leadId",
    "status" : "NEW"
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter status: (query)  (optional)
     - parameter startTime: (query)  (optional, default to 0)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter query: (query)  (optional)

     - returns: RequestBuilder<PagedResultLeadResponse> 
     */
    open class func searchLeadsWithRequestBuilder(userId: String, xAuthToken: String? = nil, status: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, limit: Int? = nil, query: String? = nil) -> RequestBuilder<PagedResultLeadResponse> {
        var path = "/ehealth/v2/leads/search/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "query": query
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultLeadResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
