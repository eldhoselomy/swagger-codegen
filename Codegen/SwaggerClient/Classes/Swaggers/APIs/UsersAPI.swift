//
// CooeyAPIClient
// UsersAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**

     - parameter userId: (path)  
     - parameter isEnabled: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateUser(userId: String, isEnabled: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        activateUserWithRequestBuilder(userId: userId, isEnabled: isEnabled, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /ehealth/v2/users/{userId}/active/{isEnabled}
     
     - parameter userId: (path)  
     - parameter isEnabled: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func activateUserWithRequestBuilder(userId: String, isEnabled: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/active/{isEnabled}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let isEnabledPreEscape = "\(isEnabled)"
        let isEnabledPostEscape = isEnabledPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{isEnabled}", with: isEnabledPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter ownerType
     */
    public enum OwnerType_assignDynamicForm: String { 
        case tenant = "TENANT"
        case admin = "ADMIN"
        case careTaker = "CARE_TAKER"
        case patient = "PATIENT"
        case guardian = "GUARDIAN"
        case global = "GLOBAL"
    }

    /**

     - parameter formId: (path)  
     - parameter tenantId: (path)  
     - parameter ownerType: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignDynamicForm(formId: String, tenantId: String, ownerType: OwnerType_assignDynamicForm, xAuthToken: String? = nil, completion: @escaping ((_ data: DynamicUserFormRelation?,_ error: Error?) -> Void)) {
        assignDynamicFormWithRequestBuilder(formId: formId, tenantId: tenantId, ownerType: ownerType, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/{ownerType}/{tenantId}/form/{formId}
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "archived" : false,
  "form" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "ownerId" : "ownerId",
  "createdOn" : 0
}}]
     
     - parameter formId: (path)  
     - parameter tenantId: (path)  
     - parameter ownerType: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<DynamicUserFormRelation> 
     */
    open class func assignDynamicFormWithRequestBuilder(formId: String, tenantId: String, ownerType: OwnerType_assignDynamicForm, xAuthToken: String? = nil) -> RequestBuilder<DynamicUserFormRelation> {
        var path = "/ehealth/v2/users/{ownerType}/{tenantId}/form/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let ownerTypePreEscape = "\(ownerType.rawValue)"
        let ownerTypePostEscape = ownerTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ownerType}", with: ownerTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DynamicUserFormRelation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter caretakerId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(xAuthToken: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil, caretakerId: String? = nil, groupId: String? = nil, completion: @escaping ((_ data: [UserResponse]?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(xAuthToken: xAuthToken, type: type, offset: offset, limit: limit, caretakerId: caretakerId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 5,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "careplanId" : "careplanId",
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 7.0614014,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "careplanEnabled" : false,
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 5,
  "age" : 2,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 5,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "careplanId" : "careplanId",
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 7.0614014,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "careplanEnabled" : false,
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 5,
  "age" : 2,
  "username" : "username"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter caretakerId: (query)  (optional)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<[UserResponse]> 
     */
    open class func callGetWithRequestBuilder(xAuthToken: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil, caretakerId: String? = nil, groupId: String? = nil) -> RequestBuilder<[UserResponse]> {
        let path = "/ehealth/v2/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "caretakerId": caretakerId, 
            "groupId": groupId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func callGet_0WithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<User> {
        var path = "/ehealth/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chngpwd(xAuthToken: String? = nil, body: ChangePasswordRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        chngpwdWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/users/changePassword
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func chngpwdWithRequestBuilder(xAuthToken: String? = nil, body: ChangePasswordRequest? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/users/changePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter acceptLanguage: (header)  (optional, default to en)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, clientId: String? = nil, acceptLanguage: String? = nil, body: CreateUserRequest? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, clientId: clientId, acceptLanguage: acceptLanguage, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter clientId: (query)  (optional)
     - parameter acceptLanguage: (header)  (optional, default to en)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, clientId: String? = nil, acceptLanguage: String? = nil, body: CreateUserRequest? = nil) -> RequestBuilder<User> {
        let path = "/ehealth/v2/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "clientId": clientId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCaretaker(userId: String, xAuthToken: String? = nil, body: Caretaker? = nil, completion: @escaping ((_ data: Caretaker?,_ error: Error?) -> Void)) {
        createCaretakerWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/{userId}/caretakers
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "shiftId" : "shiftId",
  "caretakerId" : "caretakerId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId",
  "status" : "status"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Caretaker> 
     */
    open class func createCaretakerWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: Caretaker? = nil) -> RequestBuilder<Caretaker> {
        var path = "/ehealth/v2/users/{userId}/caretakers"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Caretaker>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCaretaker_0(userId: String, xAuthToken: String? = nil, body: AdminCaretakerRelation? = nil, completion: @escaping ((_ data: AdminCaretakerRelation?,_ error: Error?) -> Void)) {
        createCaretaker_0WithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/{userId}/carewards
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "caretakerId" : "caretakerId",
  "tenantId" : "tenantId",
  "adminId" : "adminId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AdminCaretakerRelation> 
     */
    open class func createCaretaker_0WithRequestBuilder(userId: String, xAuthToken: String? = nil, body: AdminCaretakerRelation? = nil) -> RequestBuilder<AdminCaretakerRelation> {
        var path = "/ehealth/v2/users/{userId}/carewards"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AdminCaretakerRelation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createContact(userId: String, xAuthToken: String? = nil, body: [Contact]? = nil, completion: @escaping ((_ data: [Contact]?,_ error: Error?) -> Void)) {
        createContactWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/{userId}/contacts
     - examples: [{contentType=application/json, example=[ {
  "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "email" : "email"
}, {
  "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "email" : "email"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Contact]> 
     */
    open class func createContactWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: [Contact]? = nil) -> RequestBuilder<[Contact]> {
        var path = "/ehealth/v2/users/{userId}/contacts"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Contact]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGuardian(userId: String, xAuthToken: String? = nil, body: CreateGuardianRequest? = nil, completion: @escaping ((_ data: Guardian?,_ error: Error?) -> Void)) {
        createGuardianWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/{userId}/guardians
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "guardianId" : "guardianId",
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "contacts" : [ {
    "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "type" : "type",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "relationship" : "relationship",
    "email" : "email"
  }, {
    "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "type" : "type",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "relationship" : "relationship",
    "email" : "email"
  } ]
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Guardian> 
     */
    open class func createGuardianWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: CreateGuardianRequest? = nil) -> RequestBuilder<Guardian> {
        var path = "/ehealth/v2/users/{userId}/guardians"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Guardian>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPermissions(userId: String, xAuthToken: String? = nil, body: Permissions? = nil, completion: @escaping ((_ data: Permissions?,_ error: Error?) -> Void)) {
        createPermissionsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/{userId}/permissions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "roleId" : "roleId",
  "tenantId" : "tenantId",
  "roleName" : "roleName",
  "externalId" : "externalId",
  "active" : false,
  "permissionList" : [ {
    "canExecute" : false,
    "canRead" : false,
    "name" : "name",
    "canWrite" : false
  }, {
    "canExecute" : false,
    "canRead" : false,
    "name" : "name",
    "canWrite" : false
  } ],
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Permissions> 
     */
    open class func createPermissionsWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: Permissions? = nil) -> RequestBuilder<Permissions> {
        var path = "/ehealth/v2/users/{userId}/permissions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Permissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPrelimAssesent(xAuthToken: String? = nil, body: PrelimAssesment? = nil, completion: @escaping ((_ data: PrelimAssesment?,_ error: Error?) -> Void)) {
        createPrelimAssesentWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/prelim-assesment
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "assesmentForm" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "patientId" : "patientId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "carriedBy" : "carriedBy",
  "assesmentDate" : 1
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PrelimAssesment> 
     */
    open class func createPrelimAssesentWithRequestBuilder(xAuthToken: String? = nil, body: PrelimAssesment? = nil) -> RequestBuilder<PrelimAssesment> {
        let path = "/ehealth/v2/users/prelim-assesment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PrelimAssesment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSymptoms(xAuthToken: String? = nil, body: ObservationSymptoms? = nil, completion: @escaping ((_ data: ObservationSymptoms?,_ error: Error?) -> Void)) {
        createSymptomsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/symptoms
     - examples: [{contentType=application/json, example={
  "weightLoss" : false,
  "heartDisease" : false,
  "shortOfBreath" : false,
  "amputationGangrene" : false,
  "userId" : "userId",
  "lossOfSensationLimbs" : false,
  "increasedMicturiton" : false,
  "weakness" : false,
  "fatigue" : false,
  "abnormalSensation" : false,
  "anyBlurredVision" : false,
  "excessiveThirst" : false,
  "poorWoundHhealing" : false,
  "id" : "id"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ObservationSymptoms> 
     */
    open class func createSymptomsWithRequestBuilder(xAuthToken: String? = nil, body: ObservationSymptoms? = nil) -> RequestBuilder<ObservationSymptoms> {
        let path = "/ehealth/v2/users/symptoms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ObservationSymptoms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTimeTrace(xAuthToken: String? = nil, body: TimeTrace? = nil, completion: @escaping ((_ data: TimeTrace?,_ error: Error?) -> Void)) {
        createTimeTraceWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/time-trace
     - examples: [{contentType=application/json, example={
  "patientId" : "patientId",
  "paymentMode" : "CREDIT_CARD",
  "swipeIn" : 5,
  "swipeOut" : 5,
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "actionItemIds" : [ "actionItemIds", "actionItemIds" ],
  "archived" : false,
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "paymentDate" : 1,
  "paymentStatus" : "PAID"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TimeTrace> 
     */
    open class func createTimeTraceWithRequestBuilder(xAuthToken: String? = nil, body: TimeTrace? = nil) -> RequestBuilder<TimeTrace> {
        let path = "/ehealth/v2/users/time-trace"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TimeTrace>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUseShift(userId: String, xAuthToken: String? = nil, body: UserShift? = nil, completion: @escaping ((_ data: UserShift?,_ error: Error?) -> Void)) {
        createUseShiftWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/userShift/{userId}
     - examples: [{contentType=application/json, example={
  "updatedBy" : "updatedBy",
  "shift" : {
    "name" : "name",
    "tenantId" : "tenantId",
    "startTime" : "startTime",
    "id" : "id",
    "endTime" : "endTime"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "createdBy" : "createdBy",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserShift> 
     */
    open class func createUseShiftWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: UserShift? = nil) -> RequestBuilder<UserShift> {
        var path = "/ehealth/v2/users/userShift/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserShift>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(xAuthToken: String? = nil, body: UserCertificatesRequest? = nil, completion: @escaping ((_ data: UserCertificate?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/users/certificates
     - examples: [{contentType=application/json, example={
  "validTill" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "certificateURL" : "certificateURL",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "userType" : "TENANT",
  "state" : "ACTIVE",
  "applicationId" : "applicationId",
  "effectiveFrom" : 5,
  "certificateType" : "certificateType"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserCertificate> 
     */
    open class func create_0WithRequestBuilder(xAuthToken: String? = nil, body: UserCertificatesRequest? = nil) -> RequestBuilder<UserCertificate> {
        let path = "/ehealth/v2/users/certificates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserCertificate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter certificateId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(certificateId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(certificateId: certificateId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/users/certificates/{certificateId}
     
     - parameter certificateId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(certificateId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/certificates/{certificateId}"
        let certificateIdPreEscape = "\(certificateId)"
        let certificateIdPostEscape = certificateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{certificateId}", with: certificateIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter userShiftId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUseShift(userId: String, userShiftId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUseShiftWithRequestBuilder(userId: userId, userShiftId: userShiftId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/users/userShift/{userId}/{userShiftId}
     
     - parameter userId: (path)  
     - parameter userShiftId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUseShiftWithRequestBuilder(userId: String, userShiftId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/userShift/{userId}/{userShiftId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let userShiftIdPreEscape = "\(userShiftId)"
        let userShiftIdPostEscape = userShiftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userShiftId}", with: userShiftIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActiveUserList(caretakerId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [[String]]?,_ error: Error?) -> Void)) {
        getActiveUserListWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/active/{caretakerId}
     - examples: [{contentType=application/json, example=[ [ "{}", "{}" ], [ "{}", "{}" ] ]}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[[String]]> 
     */
    open class func getActiveUserListWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil) -> RequestBuilder<[[String]]> {
        var path = "/ehealth/v2/users/active/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[[String]]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAll(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [UserCertificatesResponse]?,_ error: Error?) -> Void)) {
        getAllWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/certificates
     - examples: [{contentType=application/json, example=[ {
  "validTill" : 0,
  "id" : "id",
  "userType" : "TENANT",
  "certificateURL" : "certificateURL",
  "state" : "ACTIVE",
  "userId" : "userId",
  "effectiveFrom" : 6,
  "certificateType" : "certificateType"
}, {
  "validTill" : 0,
  "id" : "id",
  "userType" : "TENANT",
  "certificateURL" : "certificateURL",
  "state" : "ACTIVE",
  "userId" : "userId",
  "effectiveFrom" : 6,
  "certificateType" : "certificateType"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[UserCertificatesResponse]> 
     */
    open class func getAllWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[UserCertificatesResponse]> {
        var path = "/ehealth/v2/users/{userId}/certificates"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserCertificatesResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllInactivateUserList(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAllInactivateUserListWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/tenant/{tenantId}/inactive-users
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAllInactivateUserListWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/tenant/{tenantId}/inactive-users"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCareWards(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getCareWardsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/carewards
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getCareWardsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/users/{userId}/carewards"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCaretakers(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getCaretakersWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/caretakers
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getCaretakersWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/users/{userId}/caretakers"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContacts(userId: String, xAuthToken: String? = nil, type: String? = nil, completion: @escaping ((_ data: [Contact]?,_ error: Error?) -> Void)) {
        getContactsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/contacts
     - examples: [{contentType=application/json, example=[ {
  "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "email" : "email"
}, {
  "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "email" : "email"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<[Contact]> 
     */
    open class func getContactsWithRequestBuilder(userId: String, xAuthToken: String? = nil, type: String? = nil) -> RequestBuilder<[Contact]> {
        var path = "/ehealth/v2/users/{userId}/contacts"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Contact]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContacts_0(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [CreateGuardianRequest]?,_ error: Error?) -> Void)) {
        getContacts_0WithRequestBuilder(userId: userId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/guardians
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "guardianOf" : "guardianOf",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 5,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "relationship" : "relationship",
  "hourlyPrice" : 7.0614014,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 5,
  "age" : 2,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "guardianOf" : "guardianOf",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 5,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "relationship" : "relationship",
  "hourlyPrice" : 7.0614014,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 5,
  "age" : 2,
  "username" : "username"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[CreateGuardianRequest]> 
     */
    open class func getContacts_0WithRequestBuilder(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[CreateGuardianRequest]> {
        var path = "/ehealth/v2/users/{userId}/guardians"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[CreateGuardianRequest]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDependents(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [CreateGuardianRequest]?,_ error: Error?) -> Void)) {
        getDependentsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/dependents
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "guardianOf" : "guardianOf",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 5,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "relationship" : "relationship",
  "hourlyPrice" : 7.0614014,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 5,
  "age" : 2,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "guardianOf" : "guardianOf",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 5,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "relationship" : "relationship",
  "hourlyPrice" : 7.0614014,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 5,
  "age" : 2,
  "username" : "username"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[CreateGuardianRequest]> 
     */
    open class func getDependentsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[CreateGuardianRequest]> {
        var path = "/ehealth/v2/users/{userId}/dependents"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[CreateGuardianRequest]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter ownerType
     */
    public enum OwnerType_getDynamicForm: String { 
        case tenant = "TENANT"
        case admin = "ADMIN"
        case careTaker = "CARE_TAKER"
        case patient = "PATIENT"
        case guardian = "GUARDIAN"
        case global = "GLOBAL"
    }

    /**

     - parameter tenantId: (path)  
     - parameter ownerType: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDynamicForm(tenantId: String, ownerType: OwnerType_getDynamicForm, xAuthToken: String? = nil, completion: @escaping ((_ data: DynamicUserFormRelation?,_ error: Error?) -> Void)) {
        getDynamicFormWithRequestBuilder(tenantId: tenantId, ownerType: ownerType, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{ownerType}/{tenantId}/form
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "archived" : false,
  "form" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "ownerId" : "ownerId",
  "createdOn" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter ownerType: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<DynamicUserFormRelation> 
     */
    open class func getDynamicFormWithRequestBuilder(tenantId: String, ownerType: OwnerType_getDynamicForm, xAuthToken: String? = nil) -> RequestBuilder<DynamicUserFormRelation> {
        var path = "/ehealth/v2/users/{ownerType}/{tenantId}/form"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let ownerTypePreEscape = "\(ownerType.rawValue)"
        let ownerTypePostEscape = ownerTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ownerType}", with: ownerTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DynamicUserFormRelation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter guardianId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGuardians(guardianId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getGuardiansWithRequestBuilder(guardianId: guardianId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/guardian/{guardianId}/patients
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter guardianId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getGuardiansWithRequestBuilder(guardianId: String, xAuthToken: String? = nil) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/users/guardian/{guardianId}/patients"
        let guardianIdPreEscape = "\(guardianId)"
        let guardianIdPostEscape = guardianIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{guardianId}", with: guardianIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientSummary(patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: PatientSummaryResponse?,_ error: Error?) -> Void)) {
        getPatientSummaryWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/patients/{patientId}/summary
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "careplanSummary" : {
    "careplan" : {
      "patientId" : "patientId",
      "endDate" : "2000-01-23",
      "description" : "description",
      "levelOfAssistance" : "levelOfAssistance",
      "diagnosisForm" : {
        "ownerType" : "TENANT",
        "formHeader" : {
          "headerLogo" : "headerLogo",
          "headerTitle" : "headerTitle"
        },
        "externalId" : "externalId",
        "active" : false,
        "assignedOn" : 2,
        "updatedOn" : 5,
        "completed" : false,
        "ownerId" : "ownerId",
        "type" : "type",
        "createdOn" : 1,
        "assigneeId" : "assigneeId",
        "tags" : [ "tags", "tags" ],
        "archived" : false,
        "percentageComplete" : 5.637376656633329,
        "completedOn" : 7,
        "tenantId" : "tenantId",
        "name" : "name",
        "id" : "id",
        "applicationId" : "applicationId",
        "sectionList" : [ {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        }, {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        } ],
        "formFooter" : {
          "vendorSignatureTile" : "vendorSignatureTile",
          "consumerSignatureTitle" : "consumerSignatureTitle"
        },
        "assignerId" : "assignerId"
      },
      "historyForm" : {
        "ownerType" : "TENANT",
        "formHeader" : {
          "headerLogo" : "headerLogo",
          "headerTitle" : "headerTitle"
        },
        "externalId" : "externalId",
        "active" : false,
        "assignedOn" : 2,
        "updatedOn" : 5,
        "completed" : false,
        "ownerId" : "ownerId",
        "type" : "type",
        "createdOn" : 1,
        "assigneeId" : "assigneeId",
        "tags" : [ "tags", "tags" ],
        "archived" : false,
        "percentageComplete" : 5.637376656633329,
        "completedOn" : 7,
        "tenantId" : "tenantId",
        "name" : "name",
        "id" : "id",
        "applicationId" : "applicationId",
        "sectionList" : [ {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        }, {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        } ],
        "formFooter" : {
          "vendorSignatureTile" : "vendorSignatureTile",
          "consumerSignatureTitle" : "consumerSignatureTitle"
        },
        "assignerId" : "assignerId"
      },
      "episodeId" : "episodeId",
      "type" : "REMOTE_PATIENT_MONITORING",
      "createdOn" : 0,
      "enabled" : false,
      "evaluation" : "evaluation",
      "archived" : false,
      "assessment" : {
        "signature" : "signature"
      },
      "numOfDays" : 6,
      "careplanBluprintId" : "careplanBluprintId",
      "id" : "id",
      "beginTime" : 3,
      "evaluationForm" : {
        "ownerType" : "TENANT",
        "formHeader" : {
          "headerLogo" : "headerLogo",
          "headerTitle" : "headerTitle"
        },
        "externalId" : "externalId",
        "active" : false,
        "assignedOn" : 2,
        "updatedOn" : 5,
        "completed" : false,
        "ownerId" : "ownerId",
        "type" : "type",
        "createdOn" : 1,
        "assigneeId" : "assigneeId",
        "tags" : [ "tags", "tags" ],
        "archived" : false,
        "percentageComplete" : 5.637376656633329,
        "completedOn" : 7,
        "tenantId" : "tenantId",
        "name" : "name",
        "id" : "id",
        "applicationId" : "applicationId",
        "sectionList" : [ {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        }, {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        } ],
        "formFooter" : {
          "vendorSignatureTile" : "vendorSignatureTile",
          "consumerSignatureTitle" : "consumerSignatureTitle"
        },
        "assignerId" : "assignerId"
      },
      "trackable" : false,
      "assignerName" : "assignerName",
      "goal" : "goal",
      "userMedicines" : [ {
        "reminders" : [ {
          "activeDays" : [ true, true ],
          "timeOfDay" : "timeOfDay"
        }, {
          "activeDays" : [ true, true ],
          "timeOfDay" : "timeOfDay"
        } ],
        "sourceId" : "sourceId",
        "notes" : "notes",
        "color" : "color",
        "reasonToDiscontinue" : "reasonToDiscontinue",
        "scheduled" : false,
        "dosages" : [ {
          "schedule" : {
            "endDate" : 9,
            "occuranceStartTime" : "occuranceStartTime",
            "occuranceEndTime" : "occuranceEndTime",
            "externalId" : "externalId",
            "active" : false,
            "repeatedEvent" : false,
            "updatedOn" : 5,
            "createdOn" : 4,
            "scheduleFor" : "CAREPLAN",
            "archived" : false,
            "allDayEvent" : false,
            "attendeesList" : [ "attendeesList", "attendeesList" ],
            "repeat" : {
              "summary" : "summary",
              "occuranceType" : "NO_OF_DAYS",
              "occurances" : "occurances",
              "type" : "DAILY",
              "repeatOn" : {
                "sunday" : false,
                "saturday" : false,
                "tuesday" : false,
                "wednesday" : false,
                "thursday" : false,
                "friday" : false,
                "monday" : false
              },
              "startDate" : 8,
              "frequency" : 6
            },
            "tenantId" : "tenantId",
            "name" : "name",
            "id" : "id",
            "applicationId" : "applicationId",
            "startDate" : 9,
            "assignerId" : "assignerId"
          },
          "unit" : "unit",
          "quantity" : "quantity",
          "type" : "TABLET"
        }, {
          "schedule" : {
            "endDate" : 9,
            "occuranceStartTime" : "occuranceStartTime",
            "occuranceEndTime" : "occuranceEndTime",
            "externalId" : "externalId",
            "active" : false,
            "repeatedEvent" : false,
            "updatedOn" : 5,
            "createdOn" : 4,
            "scheduleFor" : "CAREPLAN",
            "archived" : false,
            "allDayEvent" : false,
            "attendeesList" : [ "attendeesList", "attendeesList" ],
            "repeat" : {
              "summary" : "summary",
              "occuranceType" : "NO_OF_DAYS",
              "occurances" : "occurances",
              "type" : "DAILY",
              "repeatOn" : {
                "sunday" : false,
                "saturday" : false,
                "tuesday" : false,
                "wednesday" : false,
                "thursday" : false,
                "friday" : false,
                "monday" : false
              },
              "startDate" : 8,
              "frequency" : 6
            },
            "tenantId" : "tenantId",
            "name" : "name",
            "id" : "id",
            "applicationId" : "applicationId",
            "startDate" : 9,
            "assignerId" : "assignerId"
          },
          "unit" : "unit",
          "quantity" : "quantity",
          "type" : "TABLET"
        } ],
        "description" : "description",
        "source" : "CAREPLAN",
        "createdOn" : 4,
        "archived" : false,
        "permissions" : "permissions",
        "id" : "id",
        "careplanId" : "careplanId",
        "shape" : "shape",
        "discontinuedOn" : 1,
        "medicineId" : "medicineId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 7,
        "discontinuedBy" : "discontinuedBy",
        "userId" : "userId",
        "prn" : false,
        "addedOn" : 1,
        "instruction" : "instruction",
        "tenantId" : "tenantId",
        "name" : "name",
        "toBeTakenTill" : 1,
        "applicationId" : "applicationId",
        "interventionId" : "interventionId",
        "assignerId" : "assignerId",
        "status" : "ACTIVE"
      }, {
        "reminders" : [ {
          "activeDays" : [ true, true ],
          "timeOfDay" : "timeOfDay"
        }, {
          "activeDays" : [ true, true ],
          "timeOfDay" : "timeOfDay"
        } ],
        "sourceId" : "sourceId",
        "notes" : "notes",
        "color" : "color",
        "reasonToDiscontinue" : "reasonToDiscontinue",
        "scheduled" : false,
        "dosages" : [ {
          "schedule" : {
            "endDate" : 9,
            "occuranceStartTime" : "occuranceStartTime",
            "occuranceEndTime" : "occuranceEndTime",
            "externalId" : "externalId",
            "active" : false,
            "repeatedEvent" : false,
            "updatedOn" : 5,
            "createdOn" : 4,
            "scheduleFor" : "CAREPLAN",
            "archived" : false,
            "allDayEvent" : false,
            "attendeesList" : [ "attendeesList", "attendeesList" ],
            "repeat" : {
              "summary" : "summary",
              "occuranceType" : "NO_OF_DAYS",
              "occurances" : "occurances",
              "type" : "DAILY",
              "repeatOn" : {
                "sunday" : false,
                "saturday" : false,
                "tuesday" : false,
                "wednesday" : false,
                "thursday" : false,
                "friday" : false,
                "monday" : false
              },
              "startDate" : 8,
              "frequency" : 6
            },
            "tenantId" : "tenantId",
            "name" : "name",
            "id" : "id",
            "applicationId" : "applicationId",
            "startDate" : 9,
            "assignerId" : "assignerId"
          },
          "unit" : "unit",
          "quantity" : "quantity",
          "type" : "TABLET"
        }, {
          "schedule" : {
            "endDate" : 9,
            "occuranceStartTime" : "occuranceStartTime",
            "occuranceEndTime" : "occuranceEndTime",
            "externalId" : "externalId",
            "active" : false,
            "repeatedEvent" : false,
            "updatedOn" : 5,
            "createdOn" : 4,
            "scheduleFor" : "CAREPLAN",
            "archived" : false,
            "allDayEvent" : false,
            "attendeesList" : [ "attendeesList", "attendeesList" ],
            "repeat" : {
              "summary" : "summary",
              "occuranceType" : "NO_OF_DAYS",
              "occurances" : "occurances",
              "type" : "DAILY",
              "repeatOn" : {
                "sunday" : false,
                "saturday" : false,
                "tuesday" : false,
                "wednesday" : false,
                "thursday" : false,
                "friday" : false,
                "monday" : false
              },
              "startDate" : 8,
              "frequency" : 6
            },
            "tenantId" : "tenantId",
            "name" : "name",
            "id" : "id",
            "applicationId" : "applicationId",
            "startDate" : 9,
            "assignerId" : "assignerId"
          },
          "unit" : "unit",
          "quantity" : "quantity",
          "type" : "TABLET"
        } ],
        "description" : "description",
        "source" : "CAREPLAN",
        "createdOn" : 4,
        "archived" : false,
        "permissions" : "permissions",
        "id" : "id",
        "careplanId" : "careplanId",
        "shape" : "shape",
        "discontinuedOn" : 1,
        "medicineId" : "medicineId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 7,
        "discontinuedBy" : "discontinuedBy",
        "userId" : "userId",
        "prn" : false,
        "addedOn" : 1,
        "instruction" : "instruction",
        "tenantId" : "tenantId",
        "name" : "name",
        "toBeTakenTill" : 1,
        "applicationId" : "applicationId",
        "interventionId" : "interventionId",
        "assignerId" : "assignerId",
        "status" : "ACTIVE"
      } ],
      "externalId" : "externalId",
      "active" : false,
      "diagnosis" : {
        "healthCondition" : "healthCondition",
        "symoptoms" : "symoptoms"
      },
      "assignedOn" : 9,
      "noteId" : "noteId",
      "updatedOn" : 6,
      "history" : "history",
      "tags" : [ "tags", "tags" ],
      "assessmentForm" : {
        "ownerType" : "TENANT",
        "formHeader" : {
          "headerLogo" : "headerLogo",
          "headerTitle" : "headerTitle"
        },
        "externalId" : "externalId",
        "active" : false,
        "assignedOn" : 2,
        "updatedOn" : 5,
        "completed" : false,
        "ownerId" : "ownerId",
        "type" : "type",
        "createdOn" : 1,
        "assigneeId" : "assigneeId",
        "tags" : [ "tags", "tags" ],
        "archived" : false,
        "percentageComplete" : 5.637376656633329,
        "completedOn" : 7,
        "tenantId" : "tenantId",
        "name" : "name",
        "id" : "id",
        "applicationId" : "applicationId",
        "sectionList" : [ {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        }, {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        } ],
        "formFooter" : {
          "vendorSignatureTile" : "vendorSignatureTile",
          "consumerSignatureTitle" : "consumerSignatureTitle"
        },
        "assignerId" : "assignerId"
      },
      "goalForm" : {
        "ownerType" : "TENANT",
        "formHeader" : {
          "headerLogo" : "headerLogo",
          "headerTitle" : "headerTitle"
        },
        "externalId" : "externalId",
        "active" : false,
        "assignedOn" : 2,
        "updatedOn" : 5,
        "completed" : false,
        "ownerId" : "ownerId",
        "type" : "type",
        "createdOn" : 1,
        "assigneeId" : "assigneeId",
        "tags" : [ "tags", "tags" ],
        "archived" : false,
        "percentageComplete" : 5.637376656633329,
        "completedOn" : 7,
        "tenantId" : "tenantId",
        "name" : "name",
        "id" : "id",
        "applicationId" : "applicationId",
        "sectionList" : [ {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        }, {
          "formId" : "formId",
          "fieldInputs" : {
            "fieldComponent" : [ {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            }, {
              "template" : "{}",
              "archived" : false,
              "contextGraphEnabled" : false,
              "tenantId" : "tenantId",
              "externalId" : "externalId",
              "active" : false,
              "updatedOn" : 1,
              "applicationId" : "applicationId",
              "title" : "title",
              "type" : "type",
              "createdOn" : 7,
              "mandatory" : false
            } ]
          },
          "sectionMode" : "CASCADING",
          "sectionDescription" : "sectionDescription",
          "sectionHeading" : "sectionHeading"
        } ],
        "formFooter" : {
          "vendorSignatureTile" : "vendorSignatureTile",
          "consumerSignatureTitle" : "consumerSignatureTitle"
        },
        "assignerId" : "assignerId"
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "endTime" : 2,
      "applicationId" : "applicationId",
      "startDate" : "2000-01-23",
      "assignerId" : "assignerId",
      "careplanStatus" : "COMPLETED"
    },
    "actionItemsSummary" : [ {
      "completedActionItems" : 6,
      "itemType" : "itemType",
      "rateIndicator" : 0.8008281904610115,
      "message" : "message",
      "incompleteActionItems" : 1
    }, {
      "completedActionItems" : 6,
      "itemType" : "itemType",
      "rateIndicator" : 0.8008281904610115,
      "message" : "message",
      "incompleteActionItems" : 1
    } ]
  },
  "latestVitals" : [ {
    "deviceType" : "deviceType",
    "externalId" : "externalId",
    "active" : false,
    "takenOn" : 1,
    "postAction" : "postAction",
    "noteId" : "noteId",
    "contextId" : "contextId",
    "updatedOn" : 7,
    "source" : "MANUAL",
    "deviceReading" : false,
    "createdOn" : 4,
    "userId" : "userId",
    "deviceId" : "deviceId",
    "platform" : "platform",
    "archived" : false,
    "takenBy" : "takenBy",
    "contextType" : "contextType",
    "tenantId" : "tenantId",
    "context" : "context",
    "id" : "id",
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "vitalType" : "vitalType"
  }, {
    "deviceType" : "deviceType",
    "externalId" : "externalId",
    "active" : false,
    "takenOn" : 1,
    "postAction" : "postAction",
    "noteId" : "noteId",
    "contextId" : "contextId",
    "updatedOn" : 7,
    "source" : "MANUAL",
    "deviceReading" : false,
    "createdOn" : 4,
    "userId" : "userId",
    "deviceId" : "deviceId",
    "platform" : "platform",
    "archived" : false,
    "takenBy" : "takenBy",
    "contextType" : "contextType",
    "tenantId" : "tenantId",
    "context" : "context",
    "id" : "id",
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "vitalType" : "vitalType"
  } ],
  "upcomingAppointment" : {
    "ownerType" : "PATIENT",
    "reason" : "reason",
    "appointmentRequestId" : "appointmentRequestId",
    "description" : "description",
    "completionFormUrl" : "completionFormUrl",
    "title" : "title",
    "ownerId" : "ownerId",
    "type" : "HOME",
    "episodeId" : "episodeId",
    "createdOn" : 1,
    "serviceCategory" : "serviceCategory",
    "attendeeName" : "attendeeName",
    "archived" : false,
    "id" : "id",
    "attenderId" : "attenderId",
    "offerings" : [ {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    }, {
      "unitPrice" : 1,
      "taxApplied" : [ {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      }, {
        "archived" : false,
        "tenantId" : "tenantId",
        "name" : "name",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 3,
        "id" : "id",
        "applicationId" : "applicationId",
        "taxAmount" : 2.027123023002322,
        "createdOn" : 9,
        "percent" : 4.145608029883936
      } ],
      "code" : "code",
      "quantity" : 1.2315135367772556,
      "externalId" : "externalId",
      "active" : false,
      "description" : "description",
      "updatedOn" : 7,
      "discountApplied" : 7.386281948385884,
      "createdOn" : 2,
      "totalTax" : 6.84685269835264,
      "archived" : false,
      "totalAmount" : 1.0246457001441578,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "serviceable" : false,
      "applicationId" : "applicationId"
    } ],
    "attenderName" : "attenderName",
    "externalId" : "externalId",
    "active" : false,
    "noteId" : "noteId",
    "updatedOn" : 5,
    "chatSessionId" : "chatSessionId",
    "attendeeId" : "attendeeId",
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "serviceIds" : [ "serviceIds", "serviceIds" ],
    "createdBy" : "createdBy",
    "completedOn" : 5,
    "service" : "service",
    "tenantId" : "tenantId",
    "applicationId" : "applicationId",
    "overallStatus" : "PENDING",
    "completedBy" : "completedBy"
  },
  "healthScore" : {
    "notices" : [ {
      "type" : "SUGGESTION",
      "message" : "message"
    }, {
      "type" : "SUGGESTION",
      "message" : "message"
    } ],
    "valueSynced" : false,
    "calculatedOn" : 1,
    "gradeScale" : {
      "high" : 5,
      "low" : 7,
      "veryHigh" : 5,
      "medium" : 2
    },
    "scoreCalculationHistory" : [ {
      "score" : 9,
      "calculatedOn" : 3,
      "scoreParametersSections" : [ {
        "sectionName" : "sectionName",
        "scoreParameters" : [ {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        }, {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        } ]
      }, {
        "sectionName" : "sectionName",
        "scoreParameters" : [ {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        }, {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        } ]
      } ]
    }, {
      "score" : 9,
      "calculatedOn" : 3,
      "scoreParametersSections" : [ {
        "sectionName" : "sectionName",
        "scoreParameters" : [ {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        }, {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        } ]
      }, {
        "sectionName" : "sectionName",
        "scoreParameters" : [ {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        }, {
          "measuredOn" : 2,
          "name" : "name",
          "type" : "type",
          "prompt" : "prompt",
          "value" : "value",
          "mandatory" : false
        } ]
      } ]
    } ],
    "totalScore" : 0,
    "outOfScore" : 6
  },
  "userDetails" : {
    "country" : "country",
    "zipCode" : "zipCode",
    "occupation" : "occupation",
    "education" : "education",
    "groupId" : "groupId",
    "type" : "type",
    "shiftTimings" : "shiftTimings",
    "internalId" : "internalId",
    "bloodGroup" : "bloodGroup",
    "password" : "password",
    "id" : "id",
    "profilePhotoId" : "profilePhotoId",
    "governmentId" : "governmentId",
    "height" : {
      "unit" : "unit",
      "value" : 2.027123
    },
    "maratialstatus" : "maratialstatus",
    "emergencyContact" : "emergencyContact",
    "active" : false,
    "weight" : {
      "unit" : "unit",
      "value" : 3.6160767
    },
    "timeZone" : "timeZone",
    "passwordResetEnabled" : false,
    "updatedOn" : 6,
    "profilePhotoURL" : "profilePhotoURL",
    "firstName" : "firstName",
    "authenticationProvider" : "COOEY",
    "userSettings" : {
      "featureList" : {
        "key" : true
      },
      "vitalLimitNotificationEnabled" : false,
      "defaultNotificationMode" : "PUSH_NOTIFICATION",
      "vitalNotificationEnabled" : false,
      "eventNotificationEnabled" : false,
      "vitalLimits" : [ {
        "higherLimit" : 5.637377,
        "lowerLimit" : 5.962134,
        "limitType" : "limitType"
      }, {
        "higherLimit" : 5.637377,
        "lowerLimit" : 5.962134,
        "limitType" : "limitType"
      } ],
      "notificationEnabled" : false
    },
    "hipSize" : {
      "unit" : "unit",
      "value" : 4.145608
    },
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "status" : "status",
    "lastName" : "lastName",
    "userStatus" : 7,
    "gender" : "gender",
    "authToken" : "authToken",
    "careTaker" : "careTaker",
    "createdOn" : 0,
    "authId" : "authId",
    "encryptedPassword" : "encryptedPassword",
    "archived" : false,
    "icdCodes" : [ "icdCodes", "icdCodes" ],
    "countryCode" : "countryCode",
    "skill" : "skill",
    "alarmId" : "alarmId",
    "currency" : "currency",
    "insuranceInformation" : {
      "primaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsured" : false
    },
    "allergires" : [ {
      "symptoms" : [ "symptoms", "symptoms" ],
      "level" : "LOW",
      "name" : "name"
    }, {
      "symptoms" : [ "symptoms", "symptoms" ],
      "level" : "LOW",
      "name" : "name"
    } ],
    "hourlyPrice" : 1.2315135,
    "email" : "email",
    "shiftId" : "shiftId",
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "mobile" : "mobile",
    "externalId" : "externalId",
    "dateOfBirth" : 1,
    "room" : "room",
    "additionalInfoList" : [ {
      "template" : "{}",
      "archived" : false,
      "contextGraphEnabled" : false,
      "tenantId" : "tenantId",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 1,
      "applicationId" : "applicationId",
      "title" : "title",
      "type" : "type",
      "createdOn" : 7,
      "mandatory" : false
    }, {
      "template" : "{}",
      "archived" : false,
      "contextGraphEnabled" : false,
      "tenantId" : "tenantId",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 1,
      "applicationId" : "applicationId",
      "title" : "title",
      "type" : "type",
      "createdOn" : 7,
      "mandatory" : false
    } ],
    "profileTags" : [ "profileTags", "profileTags" ],
    "waistSize" : {
      "unit" : "unit",
      "value" : 7.386282
    },
    "tenantId" : "tenantId",
    "pulse" : "pulse",
    "category" : "category",
    "publicId" : 2,
    "age" : 9,
    "username" : "username"
  },
  "prelimAssesment" : {
    "archived" : false,
    "assesmentForm" : {
      "ownerType" : "TENANT",
      "formHeader" : {
        "headerLogo" : "headerLogo",
        "headerTitle" : "headerTitle"
      },
      "externalId" : "externalId",
      "active" : false,
      "assignedOn" : 2,
      "updatedOn" : 5,
      "completed" : false,
      "ownerId" : "ownerId",
      "type" : "type",
      "createdOn" : 1,
      "assigneeId" : "assigneeId",
      "tags" : [ "tags", "tags" ],
      "archived" : false,
      "percentageComplete" : 5.637376656633329,
      "completedOn" : 7,
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "sectionList" : [ {
        "formId" : "formId",
        "fieldInputs" : {
          "fieldComponent" : [ {
            "template" : "{}",
            "archived" : false,
            "contextGraphEnabled" : false,
            "tenantId" : "tenantId",
            "externalId" : "externalId",
            "active" : false,
            "updatedOn" : 1,
            "applicationId" : "applicationId",
            "title" : "title",
            "type" : "type",
            "createdOn" : 7,
            "mandatory" : false
          }, {
            "template" : "{}",
            "archived" : false,
            "contextGraphEnabled" : false,
            "tenantId" : "tenantId",
            "externalId" : "externalId",
            "active" : false,
            "updatedOn" : 1,
            "applicationId" : "applicationId",
            "title" : "title",
            "type" : "type",
            "createdOn" : 7,
            "mandatory" : false
          } ]
        },
        "sectionMode" : "CASCADING",
        "sectionDescription" : "sectionDescription",
        "sectionHeading" : "sectionHeading"
      }, {
        "formId" : "formId",
        "fieldInputs" : {
          "fieldComponent" : [ {
            "template" : "{}",
            "archived" : false,
            "contextGraphEnabled" : false,
            "tenantId" : "tenantId",
            "externalId" : "externalId",
            "active" : false,
            "updatedOn" : 1,
            "applicationId" : "applicationId",
            "title" : "title",
            "type" : "type",
            "createdOn" : 7,
            "mandatory" : false
          }, {
            "template" : "{}",
            "archived" : false,
            "contextGraphEnabled" : false,
            "tenantId" : "tenantId",
            "externalId" : "externalId",
            "active" : false,
            "updatedOn" : 1,
            "applicationId" : "applicationId",
            "title" : "title",
            "type" : "type",
            "createdOn" : 7,
            "mandatory" : false
          } ]
        },
        "sectionMode" : "CASCADING",
        "sectionDescription" : "sectionDescription",
        "sectionHeading" : "sectionHeading"
      } ],
      "formFooter" : {
        "vendorSignatureTile" : "vendorSignatureTile",
        "consumerSignatureTitle" : "consumerSignatureTitle"
      },
      "assignerId" : "assignerId"
    },
    "patientId" : "patientId",
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "id" : "id",
    "applicationId" : "applicationId",
    "createdOn" : 0,
    "carriedBy" : "carriedBy",
    "assesmentDate" : 1
  }
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<PatientSummaryResponse> 
     */
    open class func getPatientSummaryWithRequestBuilder(patientId: String, xAuthToken: String? = nil) -> RequestBuilder<PatientSummaryResponse> {
        var path = "/ehealth/v2/users/patients/{patientId}/summary"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PatientSummaryResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientsWithoutCaretakers(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getPatientsWithoutCaretakersWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/patients-without-caretakers/{tenantId}
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getPatientsWithoutCaretakersWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/users/patients-without-caretakers/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPermissions(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Permissions?,_ error: Error?) -> Void)) {
        getPermissionsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/permissions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "roleId" : "roleId",
  "tenantId" : "tenantId",
  "roleName" : "roleName",
  "externalId" : "externalId",
  "active" : false,
  "permissionList" : [ {
    "canExecute" : false,
    "canRead" : false,
    "name" : "name",
    "canWrite" : false
  }, {
    "canExecute" : false,
    "canRead" : false,
    "name" : "name",
    "canWrite" : false
  } ],
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Permissions> 
     */
    open class func getPermissionsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<Permissions> {
        var path = "/ehealth/v2/users/{userId}/permissions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Permissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPrelimAssesmentById(id: String, xAuthToken: String? = nil, completion: @escaping ((_ data: PrelimAssesment?,_ error: Error?) -> Void)) {
        getPrelimAssesmentByIdWithRequestBuilder(id: id, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/prelim-assesment/{Id}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "assesmentForm" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "patientId" : "patientId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "carriedBy" : "carriedBy",
  "assesmentDate" : 1
}}]
     
     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<PrelimAssesment> 
     */
    open class func getPrelimAssesmentByIdWithRequestBuilder(id: String, xAuthToken: String? = nil) -> RequestBuilder<PrelimAssesment> {
        var path = "/ehealth/v2/users/prelim-assesment/{Id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PrelimAssesment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPrelimAssesmentForUser(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [PrelimAssesmentResponse]?,_ error: Error?) -> Void)) {
        getPrelimAssesmentForUserWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/prelim-assesment/user/{userId}
     - examples: [{contentType=application/json, example=[ {
  "assignerName" : "assignerName",
  "assesmentForm" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "patientId" : "patientId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "carriedBy" : "carriedBy",
  "assesmentDate" : 1,
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
}, {
  "assignerName" : "assignerName",
  "assesmentForm" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "patientId" : "patientId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "carriedBy" : "carriedBy",
  "assesmentDate" : 1,
  "archived" : false,
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[PrelimAssesmentResponse]> 
     */
    open class func getPrelimAssesmentForUserWithRequestBuilder(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[PrelimAssesmentResponse]> {
        var path = "/ehealth/v2/users/prelim-assesment/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[PrelimAssesmentResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSymptoms(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: ObservationSymptoms?,_ error: Error?) -> Void)) {
        getSymptomsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/symptoms/{userId}
     - examples: [{contentType=application/json, example={
  "weightLoss" : false,
  "heartDisease" : false,
  "shortOfBreath" : false,
  "amputationGangrene" : false,
  "userId" : "userId",
  "lossOfSensationLimbs" : false,
  "increasedMicturiton" : false,
  "weakness" : false,
  "fatigue" : false,
  "abnormalSensation" : false,
  "anyBlurredVision" : false,
  "excessiveThirst" : false,
  "poorWoundHhealing" : false,
  "id" : "id"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<ObservationSymptoms> 
     */
    open class func getSymptomsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<ObservationSymptoms> {
        var path = "/ehealth/v2/users/symptoms/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ObservationSymptoms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userType: (path)  
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTimeTraceForCaretaker(userType: String, userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTimeTraceForCaretakerWithRequestBuilder(userType: userType, userId: userId, xAuthToken: xAuthToken, start: start, end: end, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/time-trace/user/{userId}/{userType}
     
     - parameter userType: (path)  
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 0)

     - returns: RequestBuilder<Void> 
     */
    open class func getTimeTraceForCaretakerWithRequestBuilder(userType: String, userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/time-trace/user/{userId}/{userType}"
        let userTypePreEscape = "\(userType)"
        let userTypePostEscape = userTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userType}", with: userTypePostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter emailId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUniqueEmail(emailId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        getUniqueEmailWithRequestBuilder(emailId: emailId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/unique/{emailId}
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}}]
     
     - parameter emailId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func getUniqueEmailWithRequestBuilder(emailId: String, xAuthToken: String? = nil) -> RequestBuilder<User> {
        var path = "/ehealth/v2/users/unique/{emailId}"
        let emailIdPreEscape = "\(emailId)"
        let emailIdPostEscape = emailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emailId}", with: emailIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUseShift(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [UserShift]?,_ error: Error?) -> Void)) {
        getUseShiftWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/userShift/{userId}
     - examples: [{contentType=application/json, example=[ {
  "updatedBy" : "updatedBy",
  "shift" : {
    "name" : "name",
    "tenantId" : "tenantId",
    "startTime" : "startTime",
    "id" : "id",
    "endTime" : "endTime"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "createdBy" : "createdBy",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId"
}, {
  "updatedBy" : "updatedBy",
  "shift" : {
    "name" : "name",
    "tenantId" : "tenantId",
    "startTime" : "startTime",
    "id" : "id",
    "endTime" : "endTime"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "createdBy" : "createdBy",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[UserShift]> 
     */
    open class func getUseShiftWithRequestBuilder(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[UserShift]> {
        var path = "/ehealth/v2/users/userShift/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserShift]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter userShiftId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUseShiftById(userId: String, userShiftId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: UserShift?,_ error: Error?) -> Void)) {
        getUseShiftByIdWithRequestBuilder(userId: userId, userShiftId: userShiftId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/userShift/{userId}/{userShiftId}
     - examples: [{contentType=application/json, example={
  "updatedBy" : "updatedBy",
  "shift" : {
    "name" : "name",
    "tenantId" : "tenantId",
    "startTime" : "startTime",
    "id" : "id",
    "endTime" : "endTime"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "createdBy" : "createdBy",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter userId: (path)  
     - parameter userShiftId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<UserShift> 
     */
    open class func getUseShiftByIdWithRequestBuilder(userId: String, userShiftId: String, xAuthToken: String? = nil) -> RequestBuilder<UserShift> {
        var path = "/ehealth/v2/users/userShift/{userId}/{userShiftId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let userShiftIdPreEscape = "\(userShiftId)"
        let userShiftIdPostEscape = userShiftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userShiftId}", with: userShiftIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserShift>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter contentType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserContent(userId: String, xAuthToken: String? = nil, contentType: String? = nil, completion: @escaping ((_ data: [ContentResponse]?,_ error: Error?) -> Void)) {
        getUserContentWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, contentType: contentType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/contents
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "id" : "id",
  "type" : "BLOG",
  "url" : "url",
  "tags" : [ "tags", "tags" ]
}, {
  "name" : "name",
  "id" : "id",
  "type" : "BLOG",
  "url" : "url",
  "tags" : [ "tags", "tags" ]
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter contentType: (query)  (optional)

     - returns: RequestBuilder<[ContentResponse]> 
     */
    open class func getUserContentWithRequestBuilder(userId: String, xAuthToken: String? = nil, contentType: String? = nil) -> RequestBuilder<[ContentResponse]> {
        var path = "/ehealth/v2/users/{userId}/contents"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentType": contentType
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ContentResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProfileImage(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getUserProfileImageWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/profile/image
     
     - parameter userId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getUserProfileImageWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/profile/image"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWards(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getWardsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/wards
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getWardsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/users/{userId}/wards"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUser(userId: String, xAuthToken: String? = nil, body: PatchRequest? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        patchUserWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /ehealth/v2/users/{userId}
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func patchUserWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: PatchRequest? = nil) -> RequestBuilder<User> {
        var path = "/ehealth/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeCareTaker(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeCareTakerWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/users/{userId}/removeCareTaker
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func removeCareTakerWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/removeCareTaker"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter contactId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeContacts(userId: String, contactId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        removeContactsWithRequestBuilder(userId: userId, contactId: contactId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /ehealth/v2/users/{userId}/contacts/{contactId}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path)  
     - parameter contactId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func removeContactsWithRequestBuilder(userId: String, contactId: String, xAuthToken: String? = nil) -> RequestBuilder<String> {
        var path = "/ehealth/v2/users/{userId}/contacts/{contactId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter authkey: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter caretakerId: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(xAuthToken: String? = nil, query: String? = nil, authkey: String? = nil, type: String? = nil, caretakerId: String? = nil, offset: Int? = nil, limit: Int? = nil, groupId: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(xAuthToken: xAuthToken, query: query, authkey: authkey, type: type, caretakerId: caretakerId, offset: offset, limit: limit, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/search
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter authkey: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter caretakerId: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func searchWithRequestBuilder(xAuthToken: String? = nil, query: String? = nil, authkey: String? = nil, type: String? = nil, caretakerId: String? = nil, offset: Int? = nil, limit: Int? = nil, groupId: String? = nil) -> RequestBuilder<[User]> {
        let path = "/ehealth/v2/users/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "authkey": authkey, 
            "type": type, 
            "caretakerId": caretakerId, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "groupId": groupId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter emaiId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendPassword(emaiId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        sendPasswordWithRequestBuilder(emaiId: emaiId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/users/{emaiId}/recovery
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}}]
     
     - parameter emaiId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func sendPasswordWithRequestBuilder(emaiId: String, xAuthToken: String? = nil) -> RequestBuilder<User> {
        var path = "/ehealth/v2/users/{emaiId}/recovery"
        let emaiIdPreEscape = "\(emaiId)"
        let emaiIdPostEscape = emaiIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{emaiId}", with: emaiIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unAssignCaretaker(userId: String, caretakerId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unAssignCaretakerWithRequestBuilder(userId: userId, caretakerId: caretakerId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/users/{userId}/caretakers/{caretakerId}
     
     - parameter userId: (path)  
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func unAssignCaretakerWithRequestBuilder(userId: String, caretakerId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/caretakers/{caretakerId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unAssignCarewards(userId: String, caretakerId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unAssignCarewardsWithRequestBuilder(userId: userId, caretakerId: caretakerId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/users/{userId}/carewards/{caretakerId}
     
     - parameter userId: (path)  
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func unAssignCarewardsWithRequestBuilder(userId: String, caretakerId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/carewards/{caretakerId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: UpdateUserRequest? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: UpdateUserRequest? = nil) -> RequestBuilder<User> {
        let path = "/ehealth/v2/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateContacts(userId: String, xAuthToken: String? = nil, body: [Contact]? = nil, completion: @escaping ((_ data: [Contact]?,_ error: Error?) -> Void)) {
        updateContactsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/{userId}/contacts
     - examples: [{contentType=application/json, example=[ {
  "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "email" : "email"
}, {
  "mobileNumbers" : [ "mobileNumbers", "mobileNumbers" ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "relationship" : "relationship",
  "email" : "email"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Contact]> 
     */
    open class func updateContactsWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: [Contact]? = nil) -> RequestBuilder<[Contact]> {
        var path = "/ehealth/v2/users/{userId}/contacts"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Contact]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDynamicForm(xAuthToken: String? = nil, body: DynamicUserFormRelation? = nil, completion: @escaping ((_ data: DynamicUserFormRelation?,_ error: Error?) -> Void)) {
        updateDynamicFormWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/dynamicform
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "archived" : false,
  "form" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "ownerId" : "ownerId",
  "createdOn" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DynamicUserFormRelation> 
     */
    open class func updateDynamicFormWithRequestBuilder(xAuthToken: String? = nil, body: DynamicUserFormRelation? = nil) -> RequestBuilder<DynamicUserFormRelation> {
        let path = "/ehealth/v2/users/dynamicform"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DynamicUserFormRelation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePermissions(userId: String, xAuthToken: String? = nil, body: Permissions? = nil, completion: @escaping ((_ data: Permissions?,_ error: Error?) -> Void)) {
        updatePermissionsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/{userId}/permissions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "roleId" : "roleId",
  "tenantId" : "tenantId",
  "roleName" : "roleName",
  "externalId" : "externalId",
  "active" : false,
  "permissionList" : [ {
    "canExecute" : false,
    "canRead" : false,
    "name" : "name",
    "canWrite" : false
  }, {
    "canExecute" : false,
    "canRead" : false,
    "name" : "name",
    "canWrite" : false
  } ],
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Permissions> 
     */
    open class func updatePermissionsWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: Permissions? = nil) -> RequestBuilder<Permissions> {
        var path = "/ehealth/v2/users/{userId}/permissions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Permissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePrelimAssesent(xAuthToken: String? = nil, body: PrelimAssesment? = nil, completion: @escaping ((_ data: PrelimAssesment?,_ error: Error?) -> Void)) {
        updatePrelimAssesentWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/prelim-assesment
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "assesmentForm" : {
    "ownerType" : "TENANT",
    "formHeader" : {
      "headerLogo" : "headerLogo",
      "headerTitle" : "headerTitle"
    },
    "externalId" : "externalId",
    "active" : false,
    "assignedOn" : 2,
    "updatedOn" : 5,
    "completed" : false,
    "ownerId" : "ownerId",
    "type" : "type",
    "createdOn" : 1,
    "assigneeId" : "assigneeId",
    "tags" : [ "tags", "tags" ],
    "archived" : false,
    "percentageComplete" : 5.637376656633329,
    "completedOn" : 7,
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "sectionList" : [ {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    }, {
      "formId" : "formId",
      "fieldInputs" : {
        "fieldComponent" : [ {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        }, {
          "template" : "{}",
          "archived" : false,
          "contextGraphEnabled" : false,
          "tenantId" : "tenantId",
          "externalId" : "externalId",
          "active" : false,
          "updatedOn" : 1,
          "applicationId" : "applicationId",
          "title" : "title",
          "type" : "type",
          "createdOn" : 7,
          "mandatory" : false
        } ]
      },
      "sectionMode" : "CASCADING",
      "sectionDescription" : "sectionDescription",
      "sectionHeading" : "sectionHeading"
    } ],
    "formFooter" : {
      "vendorSignatureTile" : "vendorSignatureTile",
      "consumerSignatureTitle" : "consumerSignatureTitle"
    },
    "assignerId" : "assignerId"
  },
  "patientId" : "patientId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "carriedBy" : "carriedBy",
  "assesmentDate" : 1
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PrelimAssesment> 
     */
    open class func updatePrelimAssesentWithRequestBuilder(xAuthToken: String? = nil, body: PrelimAssesment? = nil) -> RequestBuilder<PrelimAssesment> {
        let path = "/ehealth/v2/users/prelim-assesment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PrelimAssesment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSymptoms(body: ObservationSymptoms? = nil, completion: @escaping ((_ data: ObservationSymptoms?,_ error: Error?) -> Void)) {
        updateSymptomsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/symptoms
     - examples: [{contentType=application/json, example={
  "weightLoss" : false,
  "heartDisease" : false,
  "shortOfBreath" : false,
  "amputationGangrene" : false,
  "userId" : "userId",
  "lossOfSensationLimbs" : false,
  "increasedMicturiton" : false,
  "weakness" : false,
  "fatigue" : false,
  "abnormalSensation" : false,
  "anyBlurredVision" : false,
  "excessiveThirst" : false,
  "poorWoundHhealing" : false,
  "id" : "id"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ObservationSymptoms> 
     */
    open class func updateSymptomsWithRequestBuilder(body: ObservationSymptoms? = nil) -> RequestBuilder<ObservationSymptoms> {
        let path = "/ehealth/v2/users/symptoms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ObservationSymptoms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTimeTrace(xAuthToken: String? = nil, body: TimeTrace? = nil, completion: @escaping ((_ data: TimeTrace?,_ error: Error?) -> Void)) {
        updateTimeTraceWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/time-trace
     - examples: [{contentType=application/json, example={
  "patientId" : "patientId",
  "paymentMode" : "CREDIT_CARD",
  "swipeIn" : 5,
  "swipeOut" : 5,
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "actionItemIds" : [ "actionItemIds", "actionItemIds" ],
  "archived" : false,
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId",
  "paymentDate" : 1,
  "paymentStatus" : "PAID"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TimeTrace> 
     */
    open class func updateTimeTraceWithRequestBuilder(xAuthToken: String? = nil, body: TimeTrace? = nil) -> RequestBuilder<TimeTrace> {
        let path = "/ehealth/v2/users/time-trace"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TimeTrace>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUseShift(userId: String, xAuthToken: String? = nil, body: UserShift? = nil, completion: @escaping ((_ data: UserShift?,_ error: Error?) -> Void)) {
        updateUseShiftWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/users/userShift/{userId}
     - examples: [{contentType=application/json, example={
  "updatedBy" : "updatedBy",
  "shift" : {
    "name" : "name",
    "tenantId" : "tenantId",
    "startTime" : "startTime",
    "id" : "id",
    "endTime" : "endTime"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "createdBy" : "createdBy",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserShift> 
     */
    open class func updateUseShiftWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: UserShift? = nil) -> RequestBuilder<UserShift> {
        var path = "/ehealth/v2/users/userShift/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserShift>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadProfilePhoto(userId: String, xAuthToken: String? = nil, body: User? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadProfilePhotoWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/users/{userId}/profilePic
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func uploadProfilePhotoWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: User? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/profilePic"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userType(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userTypeWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/users/{userId}/type
     
     - parameter userId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func userTypeWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/users/{userId}/type"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
