//
// CooeyAPIClient
// SessionsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SessionsAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(xAuthToken: String? = nil, completion: @escaping ((_ data: Session?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/sessions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "accountType" : "PATIENT",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Session> 
     */
    open class func callGetWithRequestBuilder(xAuthToken: String? = nil) -> RequestBuilder<Session> {
        let path = "/ehealth/v2/sessions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Session>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: CreateSessionRequest? = nil, completion: @escaping ((_ data: Session?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/sessions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "accountType" : "PATIENT",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Session> 
     */
    open class func createWithRequestBuilder(body: CreateSessionRequest? = nil) -> RequestBuilder<Session> {
        let path = "/ehealth/v2/sessions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Session>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter externalId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createForExternalId(externalId: String, completion: @escaping ((_ data: Session?,_ error: Error?) -> Void)) {
        createForExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/sessions/{externalId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "accountType" : "PATIENT",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter externalId: (path)  

     - returns: RequestBuilder<Session> 
     */
    open class func createForExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<Session> {
        var path = "/ehealth/v2/sessions/{externalId}"
        let externalIdPreEscape = "\(externalId)"
        let externalIdPostEscape = externalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalId}", with: externalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Session>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, completion: @escaping ((_ data: Session?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/sessions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "accountType" : "PATIENT",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "userId" : "userId"
}}]
     
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Session> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil) -> RequestBuilder<Session> {
        let path = "/ehealth/v2/sessions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Session>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
