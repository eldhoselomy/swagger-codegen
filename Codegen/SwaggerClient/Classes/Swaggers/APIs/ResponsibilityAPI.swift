//
// CooeyAPIClient
// ResponsibilityAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ResponsibilityAPI {
    /**

     - parameter id: (path)  
     - parameter isEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveResponsibility(id: String, isEnabled: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        archiveResponsibilityWithRequestBuilder(id: id, isEnabled: isEnabled).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/responsibilities/{id}/active
     
     - parameter id: (path)  
     - parameter isEnabled: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func archiveResponsibilityWithRequestBuilder(id: String, isEnabled: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/responsibilities/{id}/active"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "isEnabled": isEnabled
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createResponsibility(body: ResponsibilityRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createResponsibilityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/responsibilities
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createResponsibilityWithRequestBuilder(body: ResponsibilityRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/responsibilities"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func responsibility(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        responsibilityWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/responsibilities/{id}
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func responsibilityWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/responsibilities/{id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_submit: String { 
        case pending = "PENDING"
        case completed = "COMPLETED"
        case archived = "ARCHIVED"
    }

    /**

     - parameter id: (path)  
     - parameter status: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submit(id: String, status: Status_submit, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        submitWithRequestBuilder(id: id, status: status).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/responsibilities/{id}/submit
     
     - parameter id: (path)  
     - parameter status: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func submitWithRequestBuilder(id: String, status: Status_submit) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/responsibilities/{id}/submit"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateResponsibility(id: String, body: ResponsibilityRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateResponsibilityWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/responsibilities/{id}
     
     - parameter id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateResponsibilityWithRequestBuilder(id: String, body: ResponsibilityRequestDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/responsibilities/{id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
