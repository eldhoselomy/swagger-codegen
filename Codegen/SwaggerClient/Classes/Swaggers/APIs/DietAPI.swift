//
// CooeyAPIClient
// DietAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DietAPI {
    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to -1)
     - parameter type: (query)  (optional, default to groupActions)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, type: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, offset: offset, limit: limit, type: type, start: start, end: end).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/diet/tenants/{tenantId}/templates
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to -1)
     - parameter type: (query)  (optional, default to groupActions)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func callGetWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, type: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/diet/tenants/{tenantId}/templates"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "type": type, 
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(tenantId: String, xAuthToken: String? = nil, body: DietTemplate? = nil, completion: @escaping ((_ data: DietTemplate?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/diet/tenants/{tenantId}/templates
     - examples: [{contentType=application/json, example={
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DietTemplate> 
     */
    open class func createWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: DietTemplate? = nil) -> RequestBuilder<DietTemplate> {
        var path = "/ehealth/v2/diet/tenants/{tenantId}/templates"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DietTemplate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTag(xAuthToken: String? = nil, body: MealTags? = nil, completion: @escaping ((_ data: MealTags?,_ error: Error?) -> Void)) {
        createTagWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/diet/dietTag
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "tenantId" : "tenantId",
  "id" : "id"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<MealTags> 
     */
    open class func createTagWithRequestBuilder(xAuthToken: String? = nil, body: MealTags? = nil) -> RequestBuilder<MealTags> {
        let path = "/ehealth/v2/diet/dietTag"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MealTags>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDiet(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteDietWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/diet/template/{id}
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDietWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/diet/template/{id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter dietId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssignedPatient(dietId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getAssignedPatientWithRequestBuilder(dietId: dietId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/assignedDiet/{dietId}
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter dietId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getAssignedPatientWithRequestBuilder(dietId: String, xAuthToken: String? = nil) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/diet/assignedDiet/{dietId}"
        let dietIdPreEscape = "\(dietId)"
        let dietIdPostEscape = dietIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dietId}", with: dietIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCaretakerTemplates(caretakerId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: [CaretakerDietTemplate]?,_ error: Error?) -> Void)) {
        getCaretakerTemplatesWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, start: start, end: end).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/templaltes/caretakers/{caretakerId}
     - examples: [{contentType=application/json, example=[ {
  "tagList" : {
    "key" : "tagList"
  },
  "userIds" : [ "userIds", "userIds" ],
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  }
}, {
  "tagList" : {
    "key" : "tagList"
  },
  "userIds" : [ "userIds", "userIds" ],
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  }
} ]}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<[CaretakerDietTemplate]> 
     */
    open class func getCaretakerTemplatesWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<[CaretakerDietTemplate]> {
        var path = "/ehealth/v2/diet/templaltes/caretakers/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[CaretakerDietTemplate]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDiet(id: String, xAuthToken: String? = nil, completion: @escaping ((_ data: DietTemplate?,_ error: Error?) -> Void)) {
        getDietWithRequestBuilder(id: id, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/template/{id}
     - examples: [{contentType=application/json, example={
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
}}]
     
     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<DietTemplate> 
     */
    open class func getDietWithRequestBuilder(id: String, xAuthToken: String? = nil) -> RequestBuilder<DietTemplate> {
        var path = "/ehealth/v2/diet/template/{id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DietTemplate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDietRelation(userId: String? = nil, type: String? = nil, body: [UserDietRelation]? = nil, completion: @escaping ((_ data: [UserDietRelation]?,_ error: Error?) -> Void)) {
        getDietRelationWithRequestBuilder(userId: userId, type: type, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/diet/templates
     - examples: [{contentType=application/json, example=[ {
  "start" : 0,
  "dietTemplateId" : "dietTemplateId",
  "end" : 6,
  "id" : "id",
  "ownerId" : "ownerId"
}, {
  "start" : 0,
  "dietTemplateId" : "dietTemplateId",
  "end" : 6,
  "id" : "id",
  "ownerId" : "ownerId"
} ]}]
     
     - parameter userId: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[UserDietRelation]> 
     */
    open class func getDietRelationWithRequestBuilder(userId: String? = nil, type: String? = nil, body: [UserDietRelation]? = nil) -> RequestBuilder<[UserDietRelation]> {
        let path = "/ehealth/v2/diet/templates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<[UserDietRelation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter ownerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOwner(ownerId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: [DietTemplate]?,_ error: Error?) -> Void)) {
        getOwnerWithRequestBuilder(ownerId: ownerId, xAuthToken: xAuthToken, start: start, end: end).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/owners/{ownerId}/templates
     - examples: [{contentType=application/json, example=[ {
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
}, {
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
} ]}]
     
     - parameter ownerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<[DietTemplate]> 
     */
    open class func getOwnerWithRequestBuilder(ownerId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<[DietTemplate]> {
        var path = "/ehealth/v2/diet/owners/{ownerId}/templates"
        let ownerIdPreEscape = "\(ownerId)"
        let ownerIdPostEscape = ownerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ownerId}", with: ownerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[DietTemplate]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTag(xAuthToken: String? = nil, completion: @escaping ((_ data: [MealTags]?,_ error: Error?) -> Void)) {
        getTagWithRequestBuilder(xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/dietTag
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "tenantId" : "tenantId",
  "id" : "id"
}, {
  "name" : "name",
  "tenantId" : "tenantId",
  "id" : "id"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[MealTags]> 
     */
    open class func getTagWithRequestBuilder(xAuthToken: String? = nil) -> RequestBuilder<[MealTags]> {
        let path = "/ehealth/v2/diet/dietTag"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[MealTags]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagById(id: String, xAuthToken: String? = nil, completion: @escaping ((_ data: MealTags?,_ error: Error?) -> Void)) {
        getTagByIdWithRequestBuilder(id: id, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/dietTag/{id}
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "tenantId" : "tenantId",
  "id" : "id"
}}]
     
     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<MealTags> 
     */
    open class func getTagByIdWithRequestBuilder(id: String, xAuthToken: String? = nil) -> RequestBuilder<MealTags> {
        var path = "/ehealth/v2/diet/dietTag/{id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MealTags>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter type: (query)  (optional, default to groupActions)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(xAuthToken: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil, type: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(xAuthToken: xAuthToken, query: query, offset: offset, limit: limit, type: type, start: start, end: end).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/diet/search
     
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter type: (query)  (optional, default to groupActions)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func searchWithRequestBuilder(xAuthToken: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil, type: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/diet/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "type": type, 
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter query: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchDiet(query: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Food]?,_ error: Error?) -> Void)) {
        searchDietWithRequestBuilder(query: query, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/search/{query}
     - examples: [{contentType=application/json, example=[ {
  "carbs" : "carbs",
  "proteins" : "proteins",
  "fat" : "fat",
  "name" : "name",
  "id" : "id",
  "calories" : "calories",
  "type" : "type",
  "servingSize" : "servingSize"
}, {
  "carbs" : "carbs",
  "proteins" : "proteins",
  "fat" : "fat",
  "name" : "name",
  "id" : "id",
  "calories" : "calories",
  "type" : "type",
  "servingSize" : "servingSize"
} ]}]
     
     - parameter query: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Food]> 
     */
    open class func searchDietWithRequestBuilder(query: String, xAuthToken: String? = nil) -> RequestBuilder<[Food]> {
        var path = "/ehealth/v2/diet/search/{query}"
        let queryPreEscape = "\(query)"
        let queryPostEscape = queryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{query}", with: queryPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Food]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchDiet_0(xAuthToken: String? = nil, query: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: [DietTemplate]?,_ error: Error?) -> Void)) {
        searchDiet_0WithRequestBuilder(xAuthToken: xAuthToken, query: query, start: start, end: end).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/diet/templates/search
     - examples: [{contentType=application/json, example=[ {
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
}, {
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<[DietTemplate]> 
     */
    open class func searchDiet_0WithRequestBuilder(xAuthToken: String? = nil, query: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<[DietTemplate]> {
        let path = "/ehealth/v2/diet/templates/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[DietTemplate]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter dietId: (path)  
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unAssignedPatient(dietId: String, patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        unAssignedPatientWithRequestBuilder(dietId: dietId, patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/diet/unassignedDiet/{dietId}/{patientId}
     
     - parameter dietId: (path)  
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func unAssignedPatientWithRequestBuilder(dietId: String, patientId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/diet/unassignedDiet/{dietId}/{patientId}"
        let dietIdPreEscape = "\(dietId)"
        let dietIdPostEscape = dietIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dietId}", with: dietIdPostEscape, options: .literal, range: nil)
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDiet(tenantId: String, xAuthToken: String? = nil, body: DietTemplate? = nil, completion: @escaping ((_ data: DietTemplate?,_ error: Error?) -> Void)) {
        updateDietWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/diet/tenants/{tenantId}/templates
     - examples: [{contentType=application/json, example={
  "saturday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "carbs" : "carbs",
  "ownerPermission" : "READ",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "mealPlanList" : [ {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  }, {
    "fiber" : "fiber",
    "dietId" : "dietId",
    "tagId" : "tagId",
    "carbs" : "carbs",
    "name" : "name",
    "startTime" : "startTime",
    "calories" : "calories",
    "endTime" : "endTime",
    "dietRecomendation" : "dietRecomendation",
    "mealPlans" : [ {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    }, {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    } ]
  } ],
  "archived" : false,
  "fat" : "fat",
  "wednesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "friday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "from" : 5,
  "id" : "id",
  "protien" : "protien",
  "monday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "fiber" : "fiber",
  "totalCalorie" : "totalCalorie",
  "externalId" : "externalId",
  "active" : false,
  "allergy" : "allergy",
  "thursday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "updatedOn" : 6,
  "tagList" : {
    "key" : "tagList"
  },
  "sunday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tuesday" : {
    "quantity" : 1,
    "carbs" : "carbs",
    "proteins" : "proteins",
    "fat" : "fat",
    "name" : "name",
    "id" : "id",
    "calories" : "calories",
    "type" : "type",
    "servingSize" : "servingSize"
  },
  "tenantId" : "tenantId",
  "name" : "name",
  "to" : 5,
  "applicationId" : "applicationId"
}}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DietTemplate> 
     */
    open class func updateDietWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: DietTemplate? = nil) -> RequestBuilder<DietTemplate> {
        var path = "/ehealth/v2/diet/tenants/{tenantId}/templates"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DietTemplate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTag(xAuthToken: String? = nil, body: MealTags? = nil, completion: @escaping ((_ data: MealTags?,_ error: Error?) -> Void)) {
        updateTagWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/diet/dietTag
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "tenantId" : "tenantId",
  "id" : "id"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<MealTags> 
     */
    open class func updateTagWithRequestBuilder(xAuthToken: String? = nil, body: MealTags? = nil) -> RequestBuilder<MealTags> {
        let path = "/ehealth/v2/diet/dietTag"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MealTags>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
