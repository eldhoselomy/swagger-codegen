//
// CooeyAPIClient
// AlertsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AlertsAPI {
    /**

     - parameter alertId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlert(alertId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Alert?,_ error: Error?) -> Void)) {
        getAlertWithRequestBuilder(alertId: alertId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/alerts/{alertId}
     - examples: [{contentType=application/json, example={
  "closedBy" : "closedBy",
  "notes" : "notes",
  "patientId" : "patientId",
  "closedOn" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "message" : "message",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "caretakerId" : "caretakerId",
  "notifierId" : "notifierId",
  "tenantId" : "tenantId",
  "closed" : false,
  "id" : "id",
  "applicationId" : "applicationId",
  "causerId" : "causerId",
  "status" : "status"
}}]
     
     - parameter alertId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Alert> 
     */
    open class func getAlertWithRequestBuilder(alertId: String, xAuthToken: String? = nil) -> RequestBuilder<Alert> {
        var path = "/ehealth/v2/alerts/{alertId}"
        let alertIdPreEscape = "\(alertId)"
        let alertIdPostEscape = alertIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alertId}", with: alertIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Alert>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter notifierId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlertForNotifier(notifierId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Alert]?,_ error: Error?) -> Void)) {
        getAlertForNotifierWithRequestBuilder(notifierId: notifierId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/alerts/notifier/{notifierId}
     - examples: [{contentType=application/json, example=[ {
  "closedBy" : "closedBy",
  "notes" : "notes",
  "patientId" : "patientId",
  "closedOn" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "message" : "message",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "caretakerId" : "caretakerId",
  "notifierId" : "notifierId",
  "tenantId" : "tenantId",
  "closed" : false,
  "id" : "id",
  "applicationId" : "applicationId",
  "causerId" : "causerId",
  "status" : "status"
}, {
  "closedBy" : "closedBy",
  "notes" : "notes",
  "patientId" : "patientId",
  "closedOn" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "message" : "message",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "caretakerId" : "caretakerId",
  "notifierId" : "notifierId",
  "tenantId" : "tenantId",
  "closed" : false,
  "id" : "id",
  "applicationId" : "applicationId",
  "causerId" : "causerId",
  "status" : "status"
} ]}]
     
     - parameter notifierId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Alert]> 
     */
    open class func getAlertForNotifierWithRequestBuilder(notifierId: String, xAuthToken: String? = nil) -> RequestBuilder<[Alert]> {
        var path = "/ehealth/v2/alerts/notifier/{notifierId}"
        let notifierIdPreEscape = "\(notifierId)"
        let notifierIdPostEscape = notifierIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notifierId}", with: notifierIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Alert]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlerts(tenantId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Alert]?,_ error: Error?) -> Void)) {
        getAlertsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/alerts/tenant/{tenantId}
     - examples: [{contentType=application/json, example=[ {
  "closedBy" : "closedBy",
  "notes" : "notes",
  "patientId" : "patientId",
  "closedOn" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "message" : "message",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "caretakerId" : "caretakerId",
  "notifierId" : "notifierId",
  "tenantId" : "tenantId",
  "closed" : false,
  "id" : "id",
  "applicationId" : "applicationId",
  "causerId" : "causerId",
  "status" : "status"
}, {
  "closedBy" : "closedBy",
  "notes" : "notes",
  "patientId" : "patientId",
  "closedOn" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "message" : "message",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "caretakerId" : "caretakerId",
  "notifierId" : "notifierId",
  "tenantId" : "tenantId",
  "closed" : false,
  "id" : "id",
  "applicationId" : "applicationId",
  "causerId" : "causerId",
  "status" : "status"
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Alert]> 
     */
    open class func getAlertsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil) -> RequestBuilder<[Alert]> {
        var path = "/ehealth/v2/alerts/tenant/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Alert]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter fromDate: (query)  (optional)
     - parameter toDate: (query)  (optional)
     - parameter timeSpent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patientCommunicationAlerts(fromDate: Int64? = nil, toDate: Int64? = nil, timeSpent: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        patientCommunicationAlertsWithRequestBuilder(fromDate: fromDate, toDate: toDate, timeSpent: timeSpent).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/alerts/patient-communication
     
     - parameter fromDate: (query)  (optional)
     - parameter toDate: (query)  (optional)
     - parameter timeSpent: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patientCommunicationAlertsWithRequestBuilder(fromDate: Int64? = nil, toDate: Int64? = nil, timeSpent: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/alerts/patient-communication"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(), 
            "toDate": toDate?.encodeToJSON(), 
            "timeSpent": timeSpent?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAlert(xAuthToken: String? = nil, body: Alert? = nil, completion: @escaping ((_ data: Alert?,_ error: Error?) -> Void)) {
        updateAlertWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/alerts
     - examples: [{contentType=application/json, example={
  "closedBy" : "closedBy",
  "notes" : "notes",
  "patientId" : "patientId",
  "closedOn" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "message" : "message",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "caretakerId" : "caretakerId",
  "notifierId" : "notifierId",
  "tenantId" : "tenantId",
  "closed" : false,
  "id" : "id",
  "applicationId" : "applicationId",
  "causerId" : "causerId",
  "status" : "status"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Alert> 
     */
    open class func updateAlertWithRequestBuilder(xAuthToken: String? = nil, body: Alert? = nil) -> RequestBuilder<Alert> {
        let path = "/ehealth/v2/alerts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Alert>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
