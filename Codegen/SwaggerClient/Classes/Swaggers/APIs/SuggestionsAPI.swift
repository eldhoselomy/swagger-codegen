//
// CooeyAPIClient
// SuggestionsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SuggestionsAPI {
    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(userId: String, xAuthToken: String? = nil, body: SuggestiosCreateRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/suggestions/users/{userId}
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder(userId: String, xAuthToken: String? = nil, body: SuggestiosCreateRequest? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/suggestions/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter prompt: (query)  (optional)
     - parameter type: (query)  (optional, default to Default)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSuggestions(userId: String, prompt: String? = nil, type: String? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getSuggestionsWithRequestBuilder(userId: userId, prompt: prompt, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/suggestions/users/{userId}
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter userId: (path)  
     - parameter prompt: (query)  (optional)
     - parameter type: (query)  (optional, default to Default)

     - returns: RequestBuilder<[String]> 
     */
    open class func getSuggestionsWithRequestBuilder(userId: String, prompt: String? = nil, type: String? = nil) -> RequestBuilder<[String]> {
        var path = "/ehealth/v2/suggestions/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "prompt": prompt, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
