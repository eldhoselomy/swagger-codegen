//
// CooeyAPIClient
// ContentAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ContentAPI {
    /**

     - parameter contentId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(contentId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: ContentTemplate?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(contentId: contentId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/content/{contentId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "type" : "BLOG",
  "createdOn" : 0,
  "url" : "url",
  "tags" : [ "tags", "tags" ]
}}]
     
     - parameter contentId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<ContentTemplate> 
     */
    open class func callGetWithRequestBuilder(contentId: String, xAuthToken: String? = nil) -> RequestBuilder<ContentTemplate> {
        var path = "/ehealth/v2/content/{contentId}"
        let contentIdPreEscape = "\(contentId)"
        let contentIdPostEscape = contentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contentId}", with: contentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ContentTemplate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: ContentTemplate? = nil, completion: @escaping ((_ data: ContentTemplate?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/content
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "type" : "BLOG",
  "createdOn" : 0,
  "url" : "url",
  "tags" : [ "tags", "tags" ]
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ContentTemplate> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: ContentTemplate? = nil) -> RequestBuilder<ContentTemplate> {
        let path = "/ehealth/v2/content"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ContentTemplate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAll(xAuthToken: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAllWithRequestBuilder(xAuthToken: xAuthToken, type: type, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/content
     
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func getAllWithRequestBuilder(xAuthToken: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/content"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(xAuthToken: String? = nil, type: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(xAuthToken: xAuthToken, type: type, query: query, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/content/search
     
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func searchWithRequestBuilder(xAuthToken: String? = nil, type: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/content/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "query": query, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: ContentTemplate? = nil, completion: @escaping ((_ data: ContentTemplate?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/content
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "type" : "BLOG",
  "createdOn" : 0,
  "url" : "url",
  "tags" : [ "tags", "tags" ]
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ContentTemplate> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: ContentTemplate? = nil) -> RequestBuilder<ContentTemplate> {
        let path = "/ehealth/v2/content"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ContentTemplate>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
