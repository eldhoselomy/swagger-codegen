//
// CooeyAPIClient
// ProductsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ProductsAPI {
    /**

     - parameter productId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveProduct(productId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        archiveProductWithRequestBuilder(productId: productId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/products/{productId}
     
     - parameter productId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func archiveProductWithRequestBuilder(productId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/products/{productId}"
        let productIdPreEscape = "\(productId)"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/products
     - examples: [{contentType=application/json, example={
  "unitPrice" : 1,
  "taxApplied" : [ {
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 3,
    "id" : "id",
    "applicationId" : "applicationId",
    "taxAmount" : 2.027123023002322,
    "createdOn" : 9,
    "percent" : 4.145608029883936
  }, {
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 3,
    "id" : "id",
    "applicationId" : "applicationId",
    "taxAmount" : 2.027123023002322,
    "createdOn" : 9,
    "percent" : 4.145608029883936
  } ],
  "code" : "code",
  "quantity" : 1.2315135367772556,
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 7,
  "discountApplied" : 7.386281948385884,
  "createdOn" : 2,
  "totalTax" : 6.84685269835264,
  "archived" : false,
  "totalAmount" : 1.0246457001441578,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "serviceable" : false,
  "applicationId" : "applicationId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: Product? = nil) -> RequestBuilder<Product> {
        let path = "/ehealth/v2/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter productId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProductById(productId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        getProductByIdWithRequestBuilder(productId: productId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/products/{productId}
     - examples: [{contentType=application/json, example={
  "unitPrice" : 1,
  "taxApplied" : [ {
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 3,
    "id" : "id",
    "applicationId" : "applicationId",
    "taxAmount" : 2.027123023002322,
    "createdOn" : 9,
    "percent" : 4.145608029883936
  }, {
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 3,
    "id" : "id",
    "applicationId" : "applicationId",
    "taxAmount" : 2.027123023002322,
    "createdOn" : 9,
    "percent" : 4.145608029883936
  } ],
  "code" : "code",
  "quantity" : 1.2315135367772556,
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 7,
  "discountApplied" : 7.386281948385884,
  "createdOn" : 2,
  "totalTax" : 6.84685269835264,
  "archived" : false,
  "totalAmount" : 1.0246457001441578,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "serviceable" : false,
  "applicationId" : "applicationId"
}}]
     
     - parameter productId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func getProductByIdWithRequestBuilder(productId: String, xAuthToken: String? = nil) -> RequestBuilder<Product> {
        var path = "/ehealth/v2/products/{productId}"
        let productIdPreEscape = "\(productId)"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter offset: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTenants(xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTenantsWithRequestBuilder(xAuthToken: xAuthToken, limit: limit, offset: offset).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/products
     
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 5)
     - parameter offset: (query)  (optional, default to 0)

     - returns: RequestBuilder<Void> 
     */
    open class func getTenantsWithRequestBuilder(xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to -1)
     - parameter authKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchProduct(xAuthToken: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil, authKey: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        searchProductWithRequestBuilder(xAuthToken: xAuthToken, query: query, offset: offset, limit: limit, authKey: authKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/products/search
     
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to -1)
     - parameter authKey: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func searchProductWithRequestBuilder(xAuthToken: String? = nil, query: String? = nil, offset: Int? = nil, limit: Int? = nil, authKey: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/products/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "authKey": authKey
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/products
     - examples: [{contentType=application/json, example={
  "unitPrice" : 1,
  "taxApplied" : [ {
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 3,
    "id" : "id",
    "applicationId" : "applicationId",
    "taxAmount" : 2.027123023002322,
    "createdOn" : 9,
    "percent" : 4.145608029883936
  }, {
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 3,
    "id" : "id",
    "applicationId" : "applicationId",
    "taxAmount" : 2.027123023002322,
    "createdOn" : 9,
    "percent" : 4.145608029883936
  } ],
  "code" : "code",
  "quantity" : 1.2315135367772556,
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 7,
  "discountApplied" : 7.386281948385884,
  "createdOn" : 2,
  "totalTax" : 6.84685269835264,
  "archived" : false,
  "totalAmount" : 1.0246457001441578,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "serviceable" : false,
  "applicationId" : "applicationId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Product? = nil) -> RequestBuilder<Product> {
        let path = "/ehealth/v2/products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
