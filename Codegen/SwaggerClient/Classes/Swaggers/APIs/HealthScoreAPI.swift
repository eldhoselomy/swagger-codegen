//
// CooeyAPIClient
// HealthScoreAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class HealthScoreAPI {
    /**

     - parameter patientId: (path)  
     - parameter limit: (query)  (optional, default to 3)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func basevalueHealthScore(patientId: String, limit: Int? = nil, completion: @escaping ((_ data: RIScoreBaseValue?,_ error: Error?) -> Void)) {
        basevalueHealthScoreWithRequestBuilder(patientId: patientId, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/health_score/base-value/patient/{patientId}
     - examples: [{contentType=application/json, example={
  "valid" : false,
  "baseValue" : 0,
  "message" : "message"
}}]
     
     - parameter patientId: (path)  
     - parameter limit: (query)  (optional, default to 3)

     - returns: RequestBuilder<RIScoreBaseValue> 
     */
    open class func basevalueHealthScoreWithRequestBuilder(patientId: String, limit: Int? = nil) -> RequestBuilder<RIScoreBaseValue> {
        var path = "/ehealth/v2/health_score/base-value/patient/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<RIScoreBaseValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 6)
     - parameter platform: (query)  (optional, default to MOBILE)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCalculatedHealthScore(patientId: String, xAuthToken: String? = nil, limit: Int? = nil, platform: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: HealthScore?,_ error: Error?) -> Void)) {
        getCalculatedHealthScoreWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken, limit: limit, platform: platform, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/health_score/patients/{patientId}
     - examples: [{contentType=application/json, example={
  "notices" : [ {
    "type" : "SUGGESTION",
    "message" : "message"
  }, {
    "type" : "SUGGESTION",
    "message" : "message"
  } ],
  "valueSynced" : false,
  "calculatedOn" : 1,
  "gradeScale" : {
    "high" : 5,
    "low" : 7,
    "veryHigh" : 5,
    "medium" : 2
  },
  "scoreCalculationHistory" : [ {
    "score" : 9,
    "calculatedOn" : 3,
    "scoreParametersSections" : [ {
      "sectionName" : "sectionName",
      "scoreParameters" : [ {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      }, {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      } ]
    }, {
      "sectionName" : "sectionName",
      "scoreParameters" : [ {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      }, {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      } ]
    } ]
  }, {
    "score" : 9,
    "calculatedOn" : 3,
    "scoreParametersSections" : [ {
      "sectionName" : "sectionName",
      "scoreParameters" : [ {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      }, {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      } ]
    }, {
      "sectionName" : "sectionName",
      "scoreParameters" : [ {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      }, {
        "measuredOn" : 2,
        "name" : "name",
        "type" : "type",
        "prompt" : "prompt",
        "value" : "value",
        "mandatory" : false
      } ]
    } ]
  } ],
  "totalScore" : 0,
  "outOfScore" : 6
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 6)
     - parameter platform: (query)  (optional, default to MOBILE)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<HealthScore> 
     */
    open class func getCalculatedHealthScoreWithRequestBuilder(patientId: String, xAuthToken: String? = nil, limit: Int? = nil, platform: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<HealthScore> {
        var path = "/ehealth/v2/health_score/patients/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "platform": platform, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HealthScore>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListRequirements(patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: FormBluePrint?,_ error: Error?) -> Void)) {
        getListRequirementsWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/health_score/requirements/patients/{patientId}
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "formHeader" : {
    "headerLogo" : "headerLogo",
    "headerTitle" : "headerTitle"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 2,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 3,
  "tags" : [ "tags", "tags" ],
  "archived" : false,
  "percentageComplete" : 4.145608029883936,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "sectionList" : [ {
    "formId" : "formId",
    "fieldInputs" : {
      "fieldComponent" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ]
    },
    "sectionMode" : "CASCADING",
    "sectionDescription" : "sectionDescription",
    "sectionHeading" : "sectionHeading"
  }, {
    "formId" : "formId",
    "fieldInputs" : {
      "fieldComponent" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ]
    },
    "sectionMode" : "CASCADING",
    "sectionDescription" : "sectionDescription",
    "sectionHeading" : "sectionHeading"
  } ],
  "formFooter" : {
    "vendorSignatureTile" : "vendorSignatureTile",
    "consumerSignatureTitle" : "consumerSignatureTitle"
  }
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<FormBluePrint> 
     */
    open class func getListRequirementsWithRequestBuilder(patientId: String, xAuthToken: String? = nil) -> RequestBuilder<FormBluePrint> {
        var path = "/ehealth/v2/health_score/requirements/patients/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FormBluePrint>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func insertRequirements(patientId: String, xAuthToken: String? = nil, body: FormBluePrint? = nil, completion: @escaping ((_ data: FormBluePrint?,_ error: Error?) -> Void)) {
        insertRequirementsWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/health_score/requirements/patients/{patientId}
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "formHeader" : {
    "headerLogo" : "headerLogo",
    "headerTitle" : "headerTitle"
  },
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 2,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 3,
  "tags" : [ "tags", "tags" ],
  "archived" : false,
  "percentageComplete" : 4.145608029883936,
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "sectionList" : [ {
    "formId" : "formId",
    "fieldInputs" : {
      "fieldComponent" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ]
    },
    "sectionMode" : "CASCADING",
    "sectionDescription" : "sectionDescription",
    "sectionHeading" : "sectionHeading"
  }, {
    "formId" : "formId",
    "fieldInputs" : {
      "fieldComponent" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ]
    },
    "sectionMode" : "CASCADING",
    "sectionDescription" : "sectionDescription",
    "sectionHeading" : "sectionHeading"
  } ],
  "formFooter" : {
    "vendorSignatureTile" : "vendorSignatureTile",
    "consumerSignatureTitle" : "consumerSignatureTitle"
  }
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<FormBluePrint> 
     */
    open class func insertRequirementsWithRequestBuilder(patientId: String, xAuthToken: String? = nil, body: FormBluePrint? = nil) -> RequestBuilder<FormBluePrint> {
        var path = "/ehealth/v2/health_score/requirements/patients/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FormBluePrint>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
