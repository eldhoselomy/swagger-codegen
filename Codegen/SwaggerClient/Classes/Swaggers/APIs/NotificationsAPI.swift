//
// CooeyAPIClient
// NotificationsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NotificationsAPI {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/notifications
     - examples: [{contentType=application/json, example={
  "read" : false,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "recieverId" : "recieverId",
  "createdOn" : 0,
  "content" : "content",
  "occuranceId" : "occuranceId",
  "archived" : false,
  "dataMap" : {
    "key" : "dataMap"
  },
  "tenantId" : "tenantId",
  "action" : "action",
  "id" : "id",
  "notificationActions" : [ {
    "actionType" : "ACCEPT",
    "modifiedBy" : "modifiedBy",
    "entityId" : "entityId",
    "label" : "label"
  }, {
    "actionType" : "ACCEPT",
    "modifiedBy" : "modifiedBy",
    "entityId" : "entityId",
    "label" : "label"
  } ],
  "applicationId" : "applicationId",
  "lang" : "lang"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func createWithRequestBuilder(body: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/ehealth/v2/notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter skip: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationsForUser(userId: String, xAuthToken: String? = nil, skip: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: PagedResultNotification?,_ error: Error?) -> Void)) {
        getNotificationsForUserWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, skip: skip, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/notifications/users/{userId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "read" : false,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "title" : "title",
    "recieverId" : "recieverId",
    "createdOn" : 0,
    "content" : "content",
    "occuranceId" : "occuranceId",
    "archived" : false,
    "dataMap" : {
      "key" : "dataMap"
    },
    "tenantId" : "tenantId",
    "action" : "action",
    "id" : "id",
    "notificationActions" : [ {
      "actionType" : "ACCEPT",
      "modifiedBy" : "modifiedBy",
      "entityId" : "entityId",
      "label" : "label"
    }, {
      "actionType" : "ACCEPT",
      "modifiedBy" : "modifiedBy",
      "entityId" : "entityId",
      "label" : "label"
    } ],
    "applicationId" : "applicationId",
    "lang" : "lang"
  }, {
    "read" : false,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "title" : "title",
    "recieverId" : "recieverId",
    "createdOn" : 0,
    "content" : "content",
    "occuranceId" : "occuranceId",
    "archived" : false,
    "dataMap" : {
      "key" : "dataMap"
    },
    "tenantId" : "tenantId",
    "action" : "action",
    "id" : "id",
    "notificationActions" : [ {
      "actionType" : "ACCEPT",
      "modifiedBy" : "modifiedBy",
      "entityId" : "entityId",
      "label" : "label"
    }, {
      "actionType" : "ACCEPT",
      "modifiedBy" : "modifiedBy",
      "entityId" : "entityId",
      "label" : "label"
    } ],
    "applicationId" : "applicationId",
    "lang" : "lang"
  } ],
  "offset" : 6,
  "totalPages" : 1,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter skip: (query)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<PagedResultNotification> 
     */
    open class func getNotificationsForUserWithRequestBuilder(userId: String, xAuthToken: String? = nil, skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<PagedResultNotification> {
        var path = "/ehealth/v2/notifications/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": skip?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter skip: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOccurrenceForUser(userId: String, xAuthToken: String? = nil, skip: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: PagedResultOccurrence?,_ error: Error?) -> Void)) {
        getOccurrenceForUserWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, skip: skip, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/notifications/occurrences/users/{userId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "archived" : false,
    "actedBy" : "actedBy",
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "entityId" : "entityId",
    "updatedOn" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "type" : "VITAL_LIMIT_CROSSED",
    "createdOn" : 1,
    "actedOn" : "actedOn"
  }, {
    "archived" : false,
    "actedBy" : "actedBy",
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "entityId" : "entityId",
    "updatedOn" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "type" : "VITAL_LIMIT_CROSSED",
    "createdOn" : 1,
    "actedOn" : "actedOn"
  } ],
  "offset" : 6,
  "totalPages" : 5,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter skip: (query)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<PagedResultOccurrence> 
     */
    open class func getOccurrenceForUserWithRequestBuilder(userId: String, xAuthToken: String? = nil, skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<PagedResultOccurrence> {
        var path = "/ehealth/v2/notifications/occurrences/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": skip?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultOccurrence>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUnreadNotificationCount(userId: String, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        getUnreadNotificationCountWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/notifications/users/{userId}/count
     - examples: [{contentType=application/json, example=0}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func getUnreadNotificationCountWithRequestBuilder(userId: String) -> RequestBuilder<Int> {
        var path = "/ehealth/v2/notifications/users/{userId}/count"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markAsReadAllNotifications(userId: String, completion: @escaping ((_ data: UpdateCountResponseDTO?,_ error: Error?) -> Void)) {
        markAsReadAllNotificationsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/notifications/read/all/{userId}
     - examples: [{contentType=application/json, example={
  "acknowledged" : false,
  "modifiedCount" : 6,
  "matchedCount" : 0
}}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<UpdateCountResponseDTO> 
     */
    open class func markAsReadAllNotificationsWithRequestBuilder(userId: String) -> RequestBuilder<UpdateCountResponseDTO> {
        var path = "/ehealth/v2/notifications/read/all/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateCountResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func test(userId: String, completion: @escaping ((_ data: PushNotification?,_ error: Error?) -> Void)) {
        testWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/notifications/test/push/{userId}
     - examples: [{contentType=application/json, example={
  "scheduledOn" : 0,
  "entityType" : "ACTION_ITEM",
  "persistNotification" : false,
  "dataMap" : {
    "key" : "dataMap"
  },
  "action" : "action",
  "entityId" : "entityId",
  "id" : "id",
  "title" : "title",
  "toUserId" : "toUserId",
  "contentAvailable" : false,
  "content" : "content"
}}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<PushNotification> 
     */
    open class func testWithRequestBuilder(userId: String) -> RequestBuilder<PushNotification> {
        var path = "/ehealth/v2/notifications/test/push/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PushNotification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateIsRead(body: CollectionRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateIsReadWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/notifications/read
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateIsReadWithRequestBuilder(body: CollectionRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/notifications/read"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNotification(body: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        updateNotificationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/notifications
     - examples: [{contentType=application/json, example={
  "read" : false,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "recieverId" : "recieverId",
  "createdOn" : 0,
  "content" : "content",
  "occuranceId" : "occuranceId",
  "archived" : false,
  "dataMap" : {
    "key" : "dataMap"
  },
  "tenantId" : "tenantId",
  "action" : "action",
  "id" : "id",
  "notificationActions" : [ {
    "actionType" : "ACCEPT",
    "modifiedBy" : "modifiedBy",
    "entityId" : "entityId",
    "label" : "label"
  }, {
    "actionType" : "ACCEPT",
    "modifiedBy" : "modifiedBy",
    "entityId" : "entityId",
    "label" : "label"
  } ],
  "applicationId" : "applicationId",
  "lang" : "lang"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func updateNotificationWithRequestBuilder(body: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/ehealth/v2/notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter occurrenceId: (path)  
     - parameter actorId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOccurrenceActor(occurrenceId: String, actorId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Occurrence?,_ error: Error?) -> Void)) {
        updateOccurrenceActorWithRequestBuilder(occurrenceId: occurrenceId, actorId: actorId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/notifications/occurrences/{occurrenceId}/actor/{actorId}
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "actedBy" : "actedBy",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "entityId" : "entityId",
  "updatedOn" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "type" : "VITAL_LIMIT_CROSSED",
  "createdOn" : 1,
  "actedOn" : "actedOn"
}}]
     
     - parameter occurrenceId: (path)  
     - parameter actorId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Occurrence> 
     */
    open class func updateOccurrenceActorWithRequestBuilder(occurrenceId: String, actorId: String, xAuthToken: String? = nil) -> RequestBuilder<Occurrence> {
        var path = "/ehealth/v2/notifications/occurrences/{occurrenceId}/actor/{actorId}"
        let occurrenceIdPreEscape = "\(occurrenceId)"
        let occurrenceIdPostEscape = occurrenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{occurrenceId}", with: occurrenceIdPostEscape, options: .literal, range: nil)
        let actorIdPreEscape = "\(actorId)"
        let actorIdPostEscape = actorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actorId}", with: actorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Occurrence>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
