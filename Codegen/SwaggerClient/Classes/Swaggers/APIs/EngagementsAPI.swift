//
// CooeyAPIClient
// EngagementsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EngagementsAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: Engagement? = nil, completion: @escaping ((_ data: Engagement?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/engagements
     - examples: [{contentType=application/json, example={
  "channel" : "NOTIFICATION",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "receiverId" : "receiverId",
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Engagement> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: Engagement? = nil) -> RequestBuilder<Engagement> {
        let path = "/ehealth/v2/engagements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Engagement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(xAuthToken: String? = nil, body: Engagement? = nil, completion: @escaping ((_ data: Engagement?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /ehealth/v2/engagements
     - examples: [{contentType=application/json, example={
  "channel" : "NOTIFICATION",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "receiverId" : "receiverId",
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Engagement> 
     */
    open class func deleteWithRequestBuilder(xAuthToken: String? = nil, body: Engagement? = nil) -> RequestBuilder<Engagement> {
        let path = "/ehealth/v2/engagements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Engagement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter engagementId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter channel: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEngagements(engagementId: String, xAuthToken: String? = nil, channel: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getEngagementsWithRequestBuilder(engagementId: engagementId, xAuthToken: xAuthToken, channel: channel, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/engagements
     
     - parameter engagementId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter channel: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func getEngagementsWithRequestBuilder(engagementId: String, xAuthToken: String? = nil, channel: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/engagements"
        let engagementIdPreEscape = "\(engagementId)"
        let engagementIdPostEscape = engagementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engagementId}", with: engagementIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channel": channel, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter engagementId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEngagmentById(engagementId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Engagement?,_ error: Error?) -> Void)) {
        getEngagmentByIdWithRequestBuilder(engagementId: engagementId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/engagements/{engagementId}
     - examples: [{contentType=application/json, example={
  "channel" : "NOTIFICATION",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "receiverId" : "receiverId",
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter engagementId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Engagement> 
     */
    open class func getEngagmentByIdWithRequestBuilder(engagementId: String, xAuthToken: String? = nil) -> RequestBuilder<Engagement> {
        var path = "/ehealth/v2/engagements/{engagementId}"
        let engagementIdPreEscape = "\(engagementId)"
        let engagementIdPostEscape = engagementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engagementId}", with: engagementIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Engagement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter receiverId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEngagmentForUsers(receiverId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Engagement]?,_ error: Error?) -> Void)) {
        getEngagmentForUsersWithRequestBuilder(receiverId: receiverId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/engagements/receiver/{receiverId}
     - examples: [{contentType=application/json, example=[ {
  "channel" : "NOTIFICATION",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "receiverId" : "receiverId",
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
}, {
  "channel" : "NOTIFICATION",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "receiverId" : "receiverId",
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
} ]}]
     
     - parameter receiverId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Engagement]> 
     */
    open class func getEngagmentForUsersWithRequestBuilder(receiverId: String, xAuthToken: String? = nil) -> RequestBuilder<[Engagement]> {
        var path = "/ehealth/v2/engagements/receiver/{receiverId}"
        let receiverIdPreEscape = "\(receiverId)"
        let receiverIdPostEscape = receiverIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{receiverId}", with: receiverIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Engagement]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Engagement? = nil, completion: @escaping ((_ data: Engagement?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/engagements
     - examples: [{contentType=application/json, example={
  "channel" : "NOTIFICATION",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "title" : "title",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "schedule" : {
    "endDate" : 9,
    "occuranceStartTime" : "occuranceStartTime",
    "occuranceEndTime" : "occuranceEndTime",
    "externalId" : "externalId",
    "active" : false,
    "repeatedEvent" : false,
    "updatedOn" : 5,
    "createdOn" : 4,
    "scheduleFor" : "CAREPLAN",
    "archived" : false,
    "allDayEvent" : false,
    "attendeesList" : [ "attendeesList", "attendeesList" ],
    "repeat" : {
      "summary" : "summary",
      "occuranceType" : "NO_OF_DAYS",
      "occurances" : "occurances",
      "type" : "DAILY",
      "repeatOn" : {
        "sunday" : false,
        "saturday" : false,
        "tuesday" : false,
        "wednesday" : false,
        "thursday" : false,
        "friday" : false,
        "monday" : false
      },
      "startDate" : 8,
      "frequency" : 6
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "id" : "id",
    "applicationId" : "applicationId",
    "startDate" : 9,
    "assignerId" : "assignerId"
  },
  "receiverId" : "receiverId",
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "id" : "id",
  "applicationId" : "applicationId"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Engagement> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Engagement? = nil) -> RequestBuilder<Engagement> {
        let path = "/ehealth/v2/engagements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Engagement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
