//
// CooeyAPIClient
// MedicinesAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MedicinesAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addRequest(xAuthToken: String? = nil, body: String? = nil, completion: @escaping ((_ data: Medicine?,_ error: Error?) -> Void)) {
        addRequestWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/medicines/request
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "components" : [ {
    "name" : "name",
    "description" : "description"
  }, {
    "name" : "name",
    "description" : "description"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "id" : "id",
  "source" : "source",
  "applicationId" : "applicationId",
  "createdOn" : 0
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Medicine> 
     */
    open class func addRequestWithRequestBuilder(xAuthToken: String? = nil, body: String? = nil) -> RequestBuilder<Medicine> {
        let path = "/ehealth/v2/medicines/request"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Medicine>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func approveMedicine(xAuthToken: String? = nil, body: UnapprovedMedicine? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        approveMedicineWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/medicines/approve
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func approveMedicineWithRequestBuilder(xAuthToken: String? = nil, body: UnapprovedMedicine? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/medicines/approve"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func approveMedicine_0(tenantId: String, xAuthToken: String? = nil, body: UnapprovedMedicine? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        approveMedicine_0WithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/medicines/tenants/{tenantId}
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func approveMedicine_0WithRequestBuilder(tenantId: String, xAuthToken: String? = nil, body: UnapprovedMedicine? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/medicines/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: PagedResultUserMedicinesResponse?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/medicines/users/{userId}/medstats
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "assignerName" : "assignerName",
    "adherenceReport" : {
      "onTrack" : false,
      "notTakenCount" : 5,
      "careplanEnabled" : false,
      "percentage" : 1.4658129805029452,
      "takenCount" : 5,
      "careplanId" : "careplanId",
      "userMedicineId" : "userMedicineId",
      "message" : "message",
      "userId" : "userId",
      "interventionId" : "interventionId",
      "medicineName" : "medicineName"
    },
    "medInfo" : {
      "reminders" : [ {
        "activeDays" : [ true, true ],
        "timeOfDay" : "timeOfDay"
      }, {
        "activeDays" : [ true, true ],
        "timeOfDay" : "timeOfDay"
      } ],
      "sourceId" : "sourceId",
      "notes" : "notes",
      "color" : "color",
      "reasonToDiscontinue" : "reasonToDiscontinue",
      "scheduled" : false,
      "dosages" : [ {
        "schedule" : {
          "endDate" : 9,
          "occuranceStartTime" : "occuranceStartTime",
          "occuranceEndTime" : "occuranceEndTime",
          "externalId" : "externalId",
          "active" : false,
          "repeatedEvent" : false,
          "updatedOn" : 5,
          "createdOn" : 4,
          "scheduleFor" : "CAREPLAN",
          "archived" : false,
          "allDayEvent" : false,
          "attendeesList" : [ "attendeesList", "attendeesList" ],
          "repeat" : {
            "summary" : "summary",
            "occuranceType" : "NO_OF_DAYS",
            "occurances" : "occurances",
            "type" : "DAILY",
            "repeatOn" : {
              "sunday" : false,
              "saturday" : false,
              "tuesday" : false,
              "wednesday" : false,
              "thursday" : false,
              "friday" : false,
              "monday" : false
            },
            "startDate" : 8,
            "frequency" : 6
          },
          "tenantId" : "tenantId",
          "name" : "name",
          "id" : "id",
          "applicationId" : "applicationId",
          "startDate" : 9,
          "assignerId" : "assignerId"
        },
        "unit" : "unit",
        "quantity" : "quantity",
        "type" : "TABLET"
      }, {
        "schedule" : {
          "endDate" : 9,
          "occuranceStartTime" : "occuranceStartTime",
          "occuranceEndTime" : "occuranceEndTime",
          "externalId" : "externalId",
          "active" : false,
          "repeatedEvent" : false,
          "updatedOn" : 5,
          "createdOn" : 4,
          "scheduleFor" : "CAREPLAN",
          "archived" : false,
          "allDayEvent" : false,
          "attendeesList" : [ "attendeesList", "attendeesList" ],
          "repeat" : {
            "summary" : "summary",
            "occuranceType" : "NO_OF_DAYS",
            "occurances" : "occurances",
            "type" : "DAILY",
            "repeatOn" : {
              "sunday" : false,
              "saturday" : false,
              "tuesday" : false,
              "wednesday" : false,
              "thursday" : false,
              "friday" : false,
              "monday" : false
            },
            "startDate" : 8,
            "frequency" : 6
          },
          "tenantId" : "tenantId",
          "name" : "name",
          "id" : "id",
          "applicationId" : "applicationId",
          "startDate" : 9,
          "assignerId" : "assignerId"
        },
        "unit" : "unit",
        "quantity" : "quantity",
        "type" : "TABLET"
      } ],
      "description" : "description",
      "source" : "CAREPLAN",
      "createdOn" : 4,
      "archived" : false,
      "permissions" : "permissions",
      "id" : "id",
      "careplanId" : "careplanId",
      "shape" : "shape",
      "discontinuedOn" : 1,
      "medicineId" : "medicineId",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 7,
      "discontinuedBy" : "discontinuedBy",
      "userId" : "userId",
      "prn" : false,
      "addedOn" : 1,
      "instruction" : "instruction",
      "tenantId" : "tenantId",
      "name" : "name",
      "toBeTakenTill" : 1,
      "applicationId" : "applicationId",
      "interventionId" : "interventionId",
      "assignerId" : "assignerId",
      "status" : "ACTIVE"
    }
  }, {
    "assignerName" : "assignerName",
    "adherenceReport" : {
      "onTrack" : false,
      "notTakenCount" : 5,
      "careplanEnabled" : false,
      "percentage" : 1.4658129805029452,
      "takenCount" : 5,
      "careplanId" : "careplanId",
      "userMedicineId" : "userMedicineId",
      "message" : "message",
      "userId" : "userId",
      "interventionId" : "interventionId",
      "medicineName" : "medicineName"
    },
    "medInfo" : {
      "reminders" : [ {
        "activeDays" : [ true, true ],
        "timeOfDay" : "timeOfDay"
      }, {
        "activeDays" : [ true, true ],
        "timeOfDay" : "timeOfDay"
      } ],
      "sourceId" : "sourceId",
      "notes" : "notes",
      "color" : "color",
      "reasonToDiscontinue" : "reasonToDiscontinue",
      "scheduled" : false,
      "dosages" : [ {
        "schedule" : {
          "endDate" : 9,
          "occuranceStartTime" : "occuranceStartTime",
          "occuranceEndTime" : "occuranceEndTime",
          "externalId" : "externalId",
          "active" : false,
          "repeatedEvent" : false,
          "updatedOn" : 5,
          "createdOn" : 4,
          "scheduleFor" : "CAREPLAN",
          "archived" : false,
          "allDayEvent" : false,
          "attendeesList" : [ "attendeesList", "attendeesList" ],
          "repeat" : {
            "summary" : "summary",
            "occuranceType" : "NO_OF_DAYS",
            "occurances" : "occurances",
            "type" : "DAILY",
            "repeatOn" : {
              "sunday" : false,
              "saturday" : false,
              "tuesday" : false,
              "wednesday" : false,
              "thursday" : false,
              "friday" : false,
              "monday" : false
            },
            "startDate" : 8,
            "frequency" : 6
          },
          "tenantId" : "tenantId",
          "name" : "name",
          "id" : "id",
          "applicationId" : "applicationId",
          "startDate" : 9,
          "assignerId" : "assignerId"
        },
        "unit" : "unit",
        "quantity" : "quantity",
        "type" : "TABLET"
      }, {
        "schedule" : {
          "endDate" : 9,
          "occuranceStartTime" : "occuranceStartTime",
          "occuranceEndTime" : "occuranceEndTime",
          "externalId" : "externalId",
          "active" : false,
          "repeatedEvent" : false,
          "updatedOn" : 5,
          "createdOn" : 4,
          "scheduleFor" : "CAREPLAN",
          "archived" : false,
          "allDayEvent" : false,
          "attendeesList" : [ "attendeesList", "attendeesList" ],
          "repeat" : {
            "summary" : "summary",
            "occuranceType" : "NO_OF_DAYS",
            "occurances" : "occurances",
            "type" : "DAILY",
            "repeatOn" : {
              "sunday" : false,
              "saturday" : false,
              "tuesday" : false,
              "wednesday" : false,
              "thursday" : false,
              "friday" : false,
              "monday" : false
            },
            "startDate" : 8,
            "frequency" : 6
          },
          "tenantId" : "tenantId",
          "name" : "name",
          "id" : "id",
          "applicationId" : "applicationId",
          "startDate" : 9,
          "assignerId" : "assignerId"
        },
        "unit" : "unit",
        "quantity" : "quantity",
        "type" : "TABLET"
      } ],
      "description" : "description",
      "source" : "CAREPLAN",
      "createdOn" : 4,
      "archived" : false,
      "permissions" : "permissions",
      "id" : "id",
      "careplanId" : "careplanId",
      "shape" : "shape",
      "discontinuedOn" : 1,
      "medicineId" : "medicineId",
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 7,
      "discontinuedBy" : "discontinuedBy",
      "userId" : "userId",
      "prn" : false,
      "addedOn" : 1,
      "instruction" : "instruction",
      "tenantId" : "tenantId",
      "name" : "name",
      "toBeTakenTill" : 1,
      "applicationId" : "applicationId",
      "interventionId" : "interventionId",
      "assignerId" : "assignerId",
      "status" : "ACTIVE"
    }
  } ],
  "offset" : 6,
  "totalPages" : 2,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<PagedResultUserMedicinesResponse> 
     */
    open class func callGetWithRequestBuilder(userId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<PagedResultUserMedicinesResponse> {
        var path = "/ehealth/v2/medicines/users/{userId}/medstats"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultUserMedicinesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter body: (body) User Medicine Object 
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: UserMedicine, xAuthToken: String? = nil, completion: @escaping ((_ data: UserMedicine?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/medicines
     - examples: [{contentType=application/json, example={
  "reminders" : [ {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  }, {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  } ],
  "sourceId" : "sourceId",
  "notes" : "notes",
  "color" : "color",
  "reasonToDiscontinue" : "reasonToDiscontinue",
  "scheduled" : false,
  "dosages" : [ {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  }, {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  } ],
  "description" : "description",
  "source" : "CAREPLAN",
  "createdOn" : 4,
  "archived" : false,
  "permissions" : "permissions",
  "id" : "id",
  "careplanId" : "careplanId",
  "shape" : "shape",
  "discontinuedOn" : 1,
  "medicineId" : "medicineId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 7,
  "discontinuedBy" : "discontinuedBy",
  "userId" : "userId",
  "prn" : false,
  "addedOn" : 1,
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "name" : "name",
  "toBeTakenTill" : 1,
  "applicationId" : "applicationId",
  "interventionId" : "interventionId",
  "assignerId" : "assignerId",
  "status" : "ACTIVE"
}}]
     
     - parameter body: (body) User Medicine Object 
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<UserMedicine> 
     */
    open class func createWithRequestBuilder(body: UserMedicine, xAuthToken: String? = nil) -> RequestBuilder<UserMedicine> {
        let path = "/ehealth/v2/medicines"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserMedicine>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userMedicineId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserMedicines(userMedicineId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUserMedicinesWithRequestBuilder(userMedicineId: userMedicineId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/medicines/users/medicine/{userMedicineId}
     
     - parameter userMedicineId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserMedicinesWithRequestBuilder(userMedicineId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/medicines/users/medicine/{userMedicineId}"
        let userMedicineIdPreEscape = "\(userMedicineId)"
        let userMedicineIdPostEscape = userMedicineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userMedicineId}", with: userMedicineIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Discontinue a medicine.
     
     - parameter body: (body) User Medicine Id 
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func discontinueMedicine(body: MedicineDiscontinueRequest, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        discontinueMedicineWithRequestBuilder(body: body, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Discontinue a medicine.
     - PUT /ehealth/v2/medicines/discontinue
     - 
     
     - parameter body: (body) User Medicine Id 
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func discontinueMedicineWithRequestBuilder(body: MedicineDiscontinueRequest, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/medicines/discontinue"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter approvalState: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUnapprovedMedicines(tenantId: String, xAuthToken: String? = nil, approvalState: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [UnapprovedMedicine]?,_ error: Error?) -> Void)) {
        getUnapprovedMedicinesWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, approvalState: approvalState, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/medicines/tenants/{tenantId}
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "tenantId" : "tenantId",
  "accepted" : false,
  "id" : "id",
  "state" : "PENDING",
  "source" : "source",
  "createdOn" : 0,
  "baseComponents" : [ "baseComponents", "baseComponents" ]
}, {
  "name" : "name",
  "tenantId" : "tenantId",
  "accepted" : false,
  "id" : "id",
  "state" : "PENDING",
  "source" : "source",
  "createdOn" : 0,
  "baseComponents" : [ "baseComponents", "baseComponents" ]
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter approvalState: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[UnapprovedMedicine]> 
     */
    open class func getUnapprovedMedicinesWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, approvalState: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[UnapprovedMedicine]> {
        var path = "/ehealth/v2/medicines/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "approvalState": approvalState, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UnapprovedMedicine]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter userId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserMedicine(xAuthToken: String? = nil, userId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getUserMedicineWithRequestBuilder(xAuthToken: xAuthToken, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/medicines
     
     - parameter xAuthToken: (header)  (optional)
     - parameter userId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getUserMedicineWithRequestBuilder(xAuthToken: String? = nil, userId: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/medicines"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter medicineId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserMedicineByIds(xAuthToken: String? = nil, medicineId: [String]? = nil, completion: @escaping ((_ data: [UserMedicine]?,_ error: Error?) -> Void)) {
        getUserMedicineByIdsWithRequestBuilder(xAuthToken: xAuthToken, medicineId: medicineId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/medicines/users/medicine
     - examples: [{contentType=application/json, example=[ {
  "reminders" : [ {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  }, {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  } ],
  "sourceId" : "sourceId",
  "notes" : "notes",
  "color" : "color",
  "reasonToDiscontinue" : "reasonToDiscontinue",
  "scheduled" : false,
  "dosages" : [ {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  }, {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  } ],
  "description" : "description",
  "source" : "CAREPLAN",
  "createdOn" : 4,
  "archived" : false,
  "permissions" : "permissions",
  "id" : "id",
  "careplanId" : "careplanId",
  "shape" : "shape",
  "discontinuedOn" : 1,
  "medicineId" : "medicineId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 7,
  "discontinuedBy" : "discontinuedBy",
  "userId" : "userId",
  "prn" : false,
  "addedOn" : 1,
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "name" : "name",
  "toBeTakenTill" : 1,
  "applicationId" : "applicationId",
  "interventionId" : "interventionId",
  "assignerId" : "assignerId",
  "status" : "ACTIVE"
}, {
  "reminders" : [ {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  }, {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  } ],
  "sourceId" : "sourceId",
  "notes" : "notes",
  "color" : "color",
  "reasonToDiscontinue" : "reasonToDiscontinue",
  "scheduled" : false,
  "dosages" : [ {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  }, {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  } ],
  "description" : "description",
  "source" : "CAREPLAN",
  "createdOn" : 4,
  "archived" : false,
  "permissions" : "permissions",
  "id" : "id",
  "careplanId" : "careplanId",
  "shape" : "shape",
  "discontinuedOn" : 1,
  "medicineId" : "medicineId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 7,
  "discontinuedBy" : "discontinuedBy",
  "userId" : "userId",
  "prn" : false,
  "addedOn" : 1,
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "name" : "name",
  "toBeTakenTill" : 1,
  "applicationId" : "applicationId",
  "interventionId" : "interventionId",
  "assignerId" : "assignerId",
  "status" : "ACTIVE"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter medicineId: (query)  (optional)

     - returns: RequestBuilder<[UserMedicine]> 
     */
    open class func getUserMedicineByIdsWithRequestBuilder(xAuthToken: String? = nil, medicineId: [String]? = nil) -> RequestBuilder<[UserMedicine]> {
        let path = "/ehealth/v2/medicines/users/medicine"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "medicineId": medicineId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserMedicine]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter userId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserMedicineByUserId(xAuthToken: String? = nil, userId: String? = nil, completion: @escaping ((_ data: [UserMedicine]?,_ error: Error?) -> Void)) {
        getUserMedicineByUserIdWithRequestBuilder(xAuthToken: xAuthToken, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/medicines/users/{userId}/medicines
     - examples: [{contentType=application/json, example=[ {
  "reminders" : [ {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  }, {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  } ],
  "sourceId" : "sourceId",
  "notes" : "notes",
  "color" : "color",
  "reasonToDiscontinue" : "reasonToDiscontinue",
  "scheduled" : false,
  "dosages" : [ {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  }, {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  } ],
  "description" : "description",
  "source" : "CAREPLAN",
  "createdOn" : 4,
  "archived" : false,
  "permissions" : "permissions",
  "id" : "id",
  "careplanId" : "careplanId",
  "shape" : "shape",
  "discontinuedOn" : 1,
  "medicineId" : "medicineId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 7,
  "discontinuedBy" : "discontinuedBy",
  "userId" : "userId",
  "prn" : false,
  "addedOn" : 1,
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "name" : "name",
  "toBeTakenTill" : 1,
  "applicationId" : "applicationId",
  "interventionId" : "interventionId",
  "assignerId" : "assignerId",
  "status" : "ACTIVE"
}, {
  "reminders" : [ {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  }, {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  } ],
  "sourceId" : "sourceId",
  "notes" : "notes",
  "color" : "color",
  "reasonToDiscontinue" : "reasonToDiscontinue",
  "scheduled" : false,
  "dosages" : [ {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  }, {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  } ],
  "description" : "description",
  "source" : "CAREPLAN",
  "createdOn" : 4,
  "archived" : false,
  "permissions" : "permissions",
  "id" : "id",
  "careplanId" : "careplanId",
  "shape" : "shape",
  "discontinuedOn" : 1,
  "medicineId" : "medicineId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 7,
  "discontinuedBy" : "discontinuedBy",
  "userId" : "userId",
  "prn" : false,
  "addedOn" : 1,
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "name" : "name",
  "toBeTakenTill" : 1,
  "applicationId" : "applicationId",
  "interventionId" : "interventionId",
  "assignerId" : "assignerId",
  "status" : "ACTIVE"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter userId: (query)  (optional)

     - returns: RequestBuilder<[UserMedicine]> 
     */
    open class func getUserMedicineByUserIdWithRequestBuilder(xAuthToken: String? = nil, userId: String? = nil) -> RequestBuilder<[UserMedicine]> {
        let path = "/ehealth/v2/medicines/users/{userId}/medicines"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserMedicine]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter medicineId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rejectMedicine(medicineId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rejectMedicineWithRequestBuilder(medicineId: medicineId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/medicines/{medicineId}
     
     - parameter medicineId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func rejectMedicineWithRequestBuilder(medicineId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/medicines/{medicineId}"
        let medicineIdPreEscape = "\(medicineId)"
        let medicineIdPostEscape = medicineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{medicineId}", with: medicineIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(xAuthToken: String? = nil, query: String? = nil, completion: @escaping ((_ data: [Medicine]?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(xAuthToken: xAuthToken, query: query).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/medicines/search
     - examples: [{contentType=application/json, example=[ {
  "archived" : false,
  "components" : [ {
    "name" : "name",
    "description" : "description"
  }, {
    "name" : "name",
    "description" : "description"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "id" : "id",
  "source" : "source",
  "applicationId" : "applicationId",
  "createdOn" : 0
}, {
  "archived" : false,
  "components" : [ {
    "name" : "name",
    "description" : "description"
  }, {
    "name" : "name",
    "description" : "description"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "id" : "id",
  "source" : "source",
  "applicationId" : "applicationId",
  "createdOn" : 0
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter query: (query)  (optional)

     - returns: RequestBuilder<[Medicine]> 
     */
    open class func searchWithRequestBuilder(xAuthToken: String? = nil, query: String? = nil) -> RequestBuilder<[Medicine]> {
        let path = "/ehealth/v2/medicines/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Medicine]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter medicineId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(medicineId: String, xAuthToken: String? = nil, body: UserMedicine? = nil, completion: @escaping ((_ data: UserMedicine?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(medicineId: medicineId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/medicines/{medicineId}
     - examples: [{contentType=application/json, example={
  "reminders" : [ {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  }, {
    "activeDays" : [ true, true ],
    "timeOfDay" : "timeOfDay"
  } ],
  "sourceId" : "sourceId",
  "notes" : "notes",
  "color" : "color",
  "reasonToDiscontinue" : "reasonToDiscontinue",
  "scheduled" : false,
  "dosages" : [ {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  }, {
    "schedule" : {
      "endDate" : 9,
      "occuranceStartTime" : "occuranceStartTime",
      "occuranceEndTime" : "occuranceEndTime",
      "externalId" : "externalId",
      "active" : false,
      "repeatedEvent" : false,
      "updatedOn" : 5,
      "createdOn" : 4,
      "scheduleFor" : "CAREPLAN",
      "archived" : false,
      "allDayEvent" : false,
      "attendeesList" : [ "attendeesList", "attendeesList" ],
      "repeat" : {
        "summary" : "summary",
        "occuranceType" : "NO_OF_DAYS",
        "occurances" : "occurances",
        "type" : "DAILY",
        "repeatOn" : {
          "sunday" : false,
          "saturday" : false,
          "tuesday" : false,
          "wednesday" : false,
          "thursday" : false,
          "friday" : false,
          "monday" : false
        },
        "startDate" : 8,
        "frequency" : 6
      },
      "tenantId" : "tenantId",
      "name" : "name",
      "id" : "id",
      "applicationId" : "applicationId",
      "startDate" : 9,
      "assignerId" : "assignerId"
    },
    "unit" : "unit",
    "quantity" : "quantity",
    "type" : "TABLET"
  } ],
  "description" : "description",
  "source" : "CAREPLAN",
  "createdOn" : 4,
  "archived" : false,
  "permissions" : "permissions",
  "id" : "id",
  "careplanId" : "careplanId",
  "shape" : "shape",
  "discontinuedOn" : 1,
  "medicineId" : "medicineId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 7,
  "discontinuedBy" : "discontinuedBy",
  "userId" : "userId",
  "prn" : false,
  "addedOn" : 1,
  "instruction" : "instruction",
  "tenantId" : "tenantId",
  "name" : "name",
  "toBeTakenTill" : 1,
  "applicationId" : "applicationId",
  "interventionId" : "interventionId",
  "assignerId" : "assignerId",
  "status" : "ACTIVE"
}}]
     
     - parameter medicineId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserMedicine> 
     */
    open class func updateWithRequestBuilder(medicineId: String, xAuthToken: String? = nil, body: UserMedicine? = nil) -> RequestBuilder<UserMedicine> {
        var path = "/ehealth/v2/medicines/{medicineId}"
        let medicineIdPreEscape = "\(medicineId)"
        let medicineIdPostEscape = medicineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{medicineId}", with: medicineIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserMedicine>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update the added medicine.
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMedicine(xAuthToken: String? = nil, body: UserMedicine? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateMedicineWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update the added medicine.
     - PUT /ehealth/v2/medicines/update
     - 
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateMedicineWithRequestBuilder(xAuthToken: String? = nil, body: UserMedicine? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/medicines/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
