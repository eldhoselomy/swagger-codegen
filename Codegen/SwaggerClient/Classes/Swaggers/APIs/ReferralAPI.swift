//
// CooeyAPIClient
// ReferralAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ReferralAPI {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addReferral(body: ReferralRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addReferralWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/referrals
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addReferralWithRequestBuilder(body: ReferralRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/referrals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter referralId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveReferral(referralId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        archiveReferralWithRequestBuilder(referralId: referralId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/referrals/{referralId}
     
     - parameter referralId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func archiveReferralWithRequestBuilder(referralId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/{referralId}"
        let referralIdPreEscape = "\(referralId)"
        let referralIdPostEscape = referralIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{referralId}", with: referralIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter referralId: (path)  
     - parameter isEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeReferralStatus(referralId: String, isEnabled: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        changeReferralStatusWithRequestBuilder(referralId: referralId, isEnabled: isEnabled).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/referrals/{referralId}/active
     
     - parameter referralId: (path)  
     - parameter isEnabled: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func changeReferralStatusWithRequestBuilder(referralId: String, isEnabled: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/{referralId}/active"
        let referralIdPreEscape = "\(referralId)"
        let referralIdPostEscape = referralIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{referralId}", with: referralIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "isEnabled": isEnabled
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter documentType
     */
    public enum DocumentType_downloadDocument: String { 
        case preauth = "PREAUTH"
        case prelim = "PRELIM"
        case referral = "REFERRAL"
    }

    /**

     - parameter fileName: (path)  
     - parameter documentId: (path)  
     - parameter documentType: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadDocument(fileName: String, documentId: String, documentType: DocumentType_downloadDocument, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadDocumentWithRequestBuilder(fileName: fileName, documentId: documentId, documentType: documentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/referrals/files/{fileName}/documents/{documentId}
     
     - parameter fileName: (path)  
     - parameter documentId: (path)  
     - parameter documentType: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func downloadDocumentWithRequestBuilder(fileName: String, documentId: String, documentType: DocumentType_downloadDocument) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/files/{fileName}/documents/{documentId}"
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "documentType": documentType.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActiveReferrals(tenantId: String, offset: Int64? = nil, limit: Int? = nil, completion: @escaping ((_ data: PagedResultReferral?,_ error: Error?) -> Void)) {
        getActiveReferralsWithRequestBuilder(tenantId: tenantId, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/referrals/tenants/{tenantId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "gender" : "MALE",
    "insured" : false,
    "responsibilityId" : "responsibilityId",
    "createdOn" : 1,
    "icdCodes" : [ "icdCodes", "icdCodes" ],
    "archived" : false,
    "countryCode" : "countryCode",
    "referralProvider" : {
      "npi" : "npi",
      "countryCode" : "countryCode",
      "mobile" : "mobile",
      "faxNumber" : "faxNumber",
      "id" : "id",
      "reasonForReferral" : "reasonForReferral"
    },
    "insuranceInformation" : {
      "primaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsured" : false
    },
    "id" : "id",
    "prelimForms" : [ "prelimForms", "prelimForms" ],
    "evaluationForms" : [ "evaluationForms", "evaluationForms" ],
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "timeZone" : "timeZone",
    "active" : false,
    "updatedOn" : 5,
    "preAuthDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "firstName" : { },
    "tenantId" : "tenantId",
    "patientCondition" : {
      "otherAccident" : {
        "description" : "description",
        "met" : false
      },
      "autoAccident" : {
        "description" : "description",
        "met" : false
      },
      "employment" : false
    },
    "referralDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "status" : "PRELIM_PENDING"
  }, {
    "gender" : "MALE",
    "insured" : false,
    "responsibilityId" : "responsibilityId",
    "createdOn" : 1,
    "icdCodes" : [ "icdCodes", "icdCodes" ],
    "archived" : false,
    "countryCode" : "countryCode",
    "referralProvider" : {
      "npi" : "npi",
      "countryCode" : "countryCode",
      "mobile" : "mobile",
      "faxNumber" : "faxNumber",
      "id" : "id",
      "reasonForReferral" : "reasonForReferral"
    },
    "insuranceInformation" : {
      "primaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsured" : false
    },
    "id" : "id",
    "prelimForms" : [ "prelimForms", "prelimForms" ],
    "evaluationForms" : [ "evaluationForms", "evaluationForms" ],
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "timeZone" : "timeZone",
    "active" : false,
    "updatedOn" : 5,
    "preAuthDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "firstName" : { },
    "tenantId" : "tenantId",
    "patientCondition" : {
      "otherAccident" : {
        "description" : "description",
        "met" : false
      },
      "autoAccident" : {
        "description" : "description",
        "met" : false
      },
      "employment" : false
    },
    "referralDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "status" : "PRELIM_PENDING"
  } ],
  "offset" : 6,
  "totalPages" : 5,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<PagedResultReferral> 
     */
    open class func getActiveReferralsWithRequestBuilder(tenantId: String, offset: Int64? = nil, limit: Int? = nil) -> RequestBuilder<PagedResultReferral> {
        var path = "/ehealth/v2/referrals/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PagedResultReferral>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter referralId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReferralById(referralId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getReferralByIdWithRequestBuilder(referralId: referralId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/referrals/{referralId}
     
     - parameter referralId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getReferralByIdWithRequestBuilder(referralId: String) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/{referralId}"
        let referralIdPreEscape = "\(referralId)"
        let referralIdPostEscape = referralIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{referralId}", with: referralIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter status
     */
    public enum Status_referrals: String { 
        case prelimPending = "PRELIM_PENDING"
        case prelimFinished = "PRELIM_FINISHED"
        case preauthPending = "PREAUTH_PENDING"
        case preauthFinished = "PREAUTH_FINISHED"
        case rejected = "REJECTED"
        case accepted = "ACCEPTED"
        case archived = "ARCHIVED"
    }

    /**

     - parameter tenantId: (path)  
     - parameter query: (query)  (optional)
     - parameter active: (query)  (optional, default to true)
     - parameter limit: (query)  (optional, default to 10)
     - parameter offset: (query)  (optional, default to 0)
     - parameter sort: (query)  (optional, default to DESC)
     - parameter status: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func referrals(tenantId: String, query: String? = nil, active: String? = nil, limit: Int? = nil, offset: Int64? = nil, sort: String? = nil, status: Status_referrals? = nil, completion: @escaping ((_ data: PagedResultReferralResponseDTO?,_ error: Error?) -> Void)) {
        referralsWithRequestBuilder(tenantId: tenantId, query: query, active: active, limit: limit, offset: offset, sort: sort, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/referrals/tenants/{tenantId}/search
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "gender" : "MALE",
    "insured" : false,
    "responsibilityId" : "responsibilityId",
    "diagnosisCodeResponseDTOS" : [ {
      "description" : "description",
      "id" : "id",
      "category" : "category"
    }, {
      "description" : "description",
      "id" : "id",
      "category" : "category"
    } ],
    "createdOn" : 1,
    "evaluationBluePrintForms" : [ {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    }, {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    } ],
    "icdCodes" : [ "icdCodes", "icdCodes" ],
    "archived" : false,
    "countryCode" : "countryCode",
    "referralProvider" : {
      "npi" : "npi",
      "countryCode" : "countryCode",
      "mobile" : "mobile",
      "faxNumber" : "faxNumber",
      "id" : "id",
      "reasonForReferral" : "reasonForReferral"
    },
    "responsibilityResponseDTO" : {
      "entityType" : "APPOINTMENT",
      "active" : false,
      "entityId" : "entityId",
      "updatedOn" : 2,
      "type" : "REFERRAL",
      "createdOn" : 5,
      "archived" : false,
      "entityStatus" : "entityStatus",
      "tenantId" : "tenantId",
      "staffName" : "staffName",
      "id" : "id",
      "staffId" : "staffId",
      "status" : "PENDING"
    },
    "insuranceInformation" : {
      "primaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsured" : false
    },
    "id" : "id",
    "prelimForms" : [ "prelimForms", "prelimForms" ],
    "evaluationForms" : [ "evaluationForms", "evaluationForms" ],
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "timeZone" : "timeZone",
    "active" : false,
    "updatedOn" : 5,
    "preAuthDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "firstName" : { },
    "tenantId" : "tenantId",
    "patientCondition" : {
      "otherAccident" : {
        "description" : "description",
        "met" : false
      },
      "autoAccident" : {
        "description" : "description",
        "met" : false
      },
      "employment" : false
    },
    "referralDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "status" : "PRELIM_PENDING",
    "prelimAsessmentBluePrintForms" : [ {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    }, {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    } ]
  }, {
    "gender" : "MALE",
    "insured" : false,
    "responsibilityId" : "responsibilityId",
    "diagnosisCodeResponseDTOS" : [ {
      "description" : "description",
      "id" : "id",
      "category" : "category"
    }, {
      "description" : "description",
      "id" : "id",
      "category" : "category"
    } ],
    "createdOn" : 1,
    "evaluationBluePrintForms" : [ {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    }, {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    } ],
    "icdCodes" : [ "icdCodes", "icdCodes" ],
    "archived" : false,
    "countryCode" : "countryCode",
    "referralProvider" : {
      "npi" : "npi",
      "countryCode" : "countryCode",
      "mobile" : "mobile",
      "faxNumber" : "faxNumber",
      "id" : "id",
      "reasonForReferral" : "reasonForReferral"
    },
    "responsibilityResponseDTO" : {
      "entityType" : "APPOINTMENT",
      "active" : false,
      "entityId" : "entityId",
      "updatedOn" : 2,
      "type" : "REFERRAL",
      "createdOn" : 5,
      "archived" : false,
      "entityStatus" : "entityStatus",
      "tenantId" : "tenantId",
      "staffName" : "staffName",
      "id" : "id",
      "staffId" : "staffId",
      "status" : "PENDING"
    },
    "insuranceInformation" : {
      "primaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsuranceDetails" : {
        "authorizationNumber" : "authorizationNumber",
        "carrierName" : "carrierName",
        "insuranceId" : "insuranceId"
      },
      "secondaryInsured" : false
    },
    "id" : "id",
    "prelimForms" : [ "prelimForms", "prelimForms" ],
    "evaluationForms" : [ "evaluationForms", "evaluationForms" ],
    "address" : {
      "zipCode" : "zipCode",
      "country" : "country",
      "lng" : "lng",
      "pin" : "pin",
      "city" : "city",
      "location" : "location",
      "state" : "state",
      "line2" : "line2",
      "line1" : "line1",
      "lat" : "lat"
    },
    "timeZone" : "timeZone",
    "active" : false,
    "updatedOn" : 5,
    "preAuthDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "firstName" : { },
    "tenantId" : "tenantId",
    "patientCondition" : {
      "otherAccident" : {
        "description" : "description",
        "met" : false
      },
      "autoAccident" : {
        "description" : "description",
        "met" : false
      },
      "employment" : false
    },
    "referralDocuments" : [ {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    }, {
      "extension" : "extension",
      "name" : "name",
      "referralFormType" : "CONSENT",
      "id" : "id"
    } ],
    "status" : "PRELIM_PENDING",
    "prelimAsessmentBluePrintForms" : [ {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    }, {
      "ownerType" : "TENANT",
      "name" : "name",
      "id" : "id",
      "type" : "type"
    } ]
  } ],
  "offset" : 6,
  "totalPages" : 7,
  "totalCount" : 0
}}]
     
     - parameter tenantId: (path)  
     - parameter query: (query)  (optional)
     - parameter active: (query)  (optional, default to true)
     - parameter limit: (query)  (optional, default to 10)
     - parameter offset: (query)  (optional, default to 0)
     - parameter sort: (query)  (optional, default to DESC)
     - parameter status: (query)  (optional)

     - returns: RequestBuilder<PagedResultReferralResponseDTO> 
     */
    open class func referralsWithRequestBuilder(tenantId: String, query: String? = nil, active: String? = nil, limit: Int? = nil, offset: Int64? = nil, sort: String? = nil, status: Status_referrals? = nil) -> RequestBuilder<PagedResultReferralResponseDTO> {
        var path = "/ehealth/v2/referrals/tenants/{tenantId}/search"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query, 
            "active": active, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "sort": sort, 
            "status": status?.rawValue
        ])

        let requestBuilder: RequestBuilder<PagedResultReferralResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter documentType
     */
    public enum DocumentType_updateFile: String { 
        case preauth = "PREAUTH"
        case prelim = "PRELIM"
        case referral = "REFERRAL"
    }

    /**

     - parameter referralId: (path)  
     - parameter fileName: (path)  
     - parameter documentId: (path)  
     - parameter documentType: (query)  
     - parameter file: (form)  (optional)
     - parameter fileUpdateRequest: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFile(referralId: String, fileName: String, documentId: String, documentType: DocumentType_updateFile, file: URL? = nil, fileUpdateRequest: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateFileWithRequestBuilder(referralId: referralId, fileName: fileName, documentId: documentId, documentType: documentType, file: file, fileUpdateRequest: fileUpdateRequest).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/referrals/{referralId}/files/{fileName}/documents/{documentId}
     
     - parameter referralId: (path)  
     - parameter fileName: (path)  
     - parameter documentId: (path)  
     - parameter documentType: (query)  
     - parameter file: (form)  (optional)
     - parameter fileUpdateRequest: (form)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateFileWithRequestBuilder(referralId: String, fileName: String, documentId: String, documentType: DocumentType_updateFile, file: URL? = nil, fileUpdateRequest: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/{referralId}/files/{fileName}/documents/{documentId}"
        let referralIdPreEscape = "\(referralId)"
        let referralIdPostEscape = referralIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{referralId}", with: referralIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file,
            "fileUpdateRequest": fileUpdateRequest
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "documentType": documentType.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter referralId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateReferral(referralId: String, body: ReferralRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateReferralWithRequestBuilder(referralId: referralId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/referrals/{referralId}
     
     - parameter referralId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateReferralWithRequestBuilder(referralId: String, body: ReferralRequestDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/{referralId}"
        let referralIdPreEscape = "\(referralId)"
        let referralIdPostEscape = referralIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{referralId}", with: referralIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter documentType
     */
    public enum DocumentType_uploadFile: String { 
        case preauth = "PREAUTH"
        case prelim = "PRELIM"
        case referral = "REFERRAL"
    }

    /**
     * enum for parameter formType
     */
    public enum FormType_uploadFile: String { 
        case consent = "CONSENT"
        case advancedBeneficiaryConsent = "ADVANCED_BENEFICIARY_CONSENT"
        case physicianOrder = "PHYSICIAN_ORDER"
        case preAuthorization = "PRE_AUTHORIZATION"
        case telephoneOrder = "TELEPHONE_ORDER"
        case other = "OTHER"
    }

    /**

     - parameter fileName: (path)  
     - parameter documentType: (query)  
     - parameter formType: (query)  
     - parameter file: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadFile(fileName: String, documentType: DocumentType_uploadFile, formType: FormType_uploadFile, file: URL? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadFileWithRequestBuilder(fileName: fileName, documentType: documentType, formType: formType, file: file).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/referrals/files/{fileName}/upload
     
     - parameter fileName: (path)  
     - parameter documentType: (query)  
     - parameter formType: (query)  
     - parameter file: (form)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func uploadFileWithRequestBuilder(fileName: String, documentType: DocumentType_uploadFile, formType: FormType_uploadFile, file: URL? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/files/{fileName}/upload"
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "documentType": documentType.rawValue, 
            "formType": formType.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter documentType
     */
    public enum DocumentType_uploadPreauthDocuments: String { 
        case preauth = "PREAUTH"
        case prelim = "PRELIM"
        case referral = "REFERRAL"
    }

    /**
     * enum for parameter status
     */
    public enum Status_uploadPreauthDocuments: String { 
        case prelimPending = "PRELIM_PENDING"
        case prelimFinished = "PRELIM_FINISHED"
        case preauthPending = "PREAUTH_PENDING"
        case preauthFinished = "PREAUTH_FINISHED"
        case rejected = "REJECTED"
        case accepted = "ACCEPTED"
        case archived = "ARCHIVED"
    }

    /**

     - parameter referralId: (path)  
     - parameter documentType: (query)  
     - parameter status: (query)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadPreauthDocuments(referralId: String, documentType: DocumentType_uploadPreauthDocuments, status: Status_uploadPreauthDocuments? = nil, body: ReferralBlobUploadDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadPreauthDocumentsWithRequestBuilder(referralId: referralId, documentType: documentType, status: status, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /ehealth/v2/referrals/{referralId}/files
     
     - parameter referralId: (path)  
     - parameter documentType: (query)  
     - parameter status: (query)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func uploadPreauthDocumentsWithRequestBuilder(referralId: String, documentType: DocumentType_uploadPreauthDocuments, status: Status_uploadPreauthDocuments? = nil, body: ReferralBlobUploadDTO? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/referrals/{referralId}/files"
        let referralIdPreEscape = "\(referralId)"
        let referralIdPostEscape = referralIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{referralId}", with: referralIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "documentType": documentType.rawValue, 
            "status": status?.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
