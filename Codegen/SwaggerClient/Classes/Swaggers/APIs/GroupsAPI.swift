//
// CooeyAPIClient
// GroupsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GroupsAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: Group? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/groups
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: Group? = nil) -> RequestBuilder<Group> {
        let path = "/ehealth/v2/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupUser(groupId: String, xAuthToken: String? = nil, body: GroupUser? = nil, completion: @escaping ((_ data: GroupUser?,_ error: Error?) -> Void)) {
        createGroupUserWithRequestBuilder(groupId: groupId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/groups/{groupId}/users
     - examples: [{contentType=application/json, example={
  "groupId" : "groupId",
  "id" : "id",
  "userId" : "userId"
}}]
     
     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GroupUser> 
     */
    open class func createGroupUserWithRequestBuilder(groupId: String, xAuthToken: String? = nil, body: GroupUser? = nil) -> RequestBuilder<GroupUser> {
        var path = "/ehealth/v2/groups/{groupId}/users"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GroupUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter locationId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(locationId: String, xAuthToken: String? = nil, body: Group? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(locationId: locationId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/groups/{locationId}
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter locationId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func create_0WithRequestBuilder(locationId: String, xAuthToken: String? = nil, body: Group? = nil) -> RequestBuilder<Group> {
        var path = "/ehealth/v2/groups/{locationId}"
        let locationIdPreEscape = "\(locationId)"
        let locationIdPostEscape = locationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{locationId}", with: locationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(xAuthToken: String? = nil, groupId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(xAuthToken: xAuthToken, groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/groups
     
     - parameter xAuthToken: (header)  (optional)
     - parameter groupId: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(xAuthToken: String? = nil, groupId: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "groupId": groupId
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroup(groupId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        getGroupWithRequestBuilder(groupId: groupId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups/{groupId}
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func getGroupWithRequestBuilder(groupId: String, xAuthToken: String? = nil) -> RequestBuilder<Group> {
        var path = "/ehealth/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter externalId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupByExternalId(externalId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        getGroupByExternalIdWithRequestBuilder(externalId: externalId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups/externalId/{externalId}
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter externalId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func getGroupByExternalIdWithRequestBuilder(externalId: String, xAuthToken: String? = nil) -> RequestBuilder<Group> {
        var path = "/ehealth/v2/groups/externalId/{externalId}"
        let externalIdPreEscape = "\(externalId)"
        let externalIdPostEscape = externalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalId}", with: externalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter name: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupByName(name: String, xAuthToken: String? = nil, type: String? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        getGroupByNameWithRequestBuilder(name: name, xAuthToken: xAuthToken, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups/unique/{name}
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter name: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func getGroupByNameWithRequestBuilder(name: String, xAuthToken: String? = nil, type: String? = nil) -> RequestBuilder<Group> {
        var path = "/ehealth/v2/groups/unique/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserGroups(userId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        getUserGroupsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups/users/{userId}
     - examples: [{contentType=application/json, example=[ {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}, {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func getUserGroupsWithRequestBuilder(userId: String, xAuthToken: String? = nil) -> RequestBuilder<[Group]> {
        var path = "/ehealth/v2/groups/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Group]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(groupId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(groupId: groupId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups/{groupId}/children
     - examples: [{contentType=application/json, example=[ {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}, {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
} ]}]
     
     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func readWithRequestBuilder(groupId: String, xAuthToken: String? = nil) -> RequestBuilder<[Group]> {
        var path = "/ehealth/v2/groups/{groupId}/children"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Group]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readGroup(xAuthToken: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        readGroupWithRequestBuilder(xAuthToken: xAuthToken, type: type, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups
     - examples: [{contentType=application/json, example=[ {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}, {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<[Group]> 
     */
    open class func readGroupWithRequestBuilder(xAuthToken: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Group]> {
        let path = "/ehealth/v2/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Group]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter authKey: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchGroup(xAuthToken: String? = nil, authKey: String? = nil, query: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        searchGroupWithRequestBuilder(xAuthToken: xAuthToken, authKey: authKey, query: query, type: type, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/groups/search
     - examples: [{contentType=application/json, example=[ {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}, {
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter authKey: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<[Group]> 
     */
    open class func searchGroupWithRequestBuilder(xAuthToken: String? = nil, authKey: String? = nil, query: String? = nil, type: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Group]> {
        let path = "/ehealth/v2/groups/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "authKey": authKey, 
            "query": query, 
            "type": type, 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Group]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Group? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/groups
     - examples: [{contentType=application/json, example={
  "externalId" : "externalId",
  "active" : false,
  "description" : "description",
  "updatedOn" : 6,
  "type" : "type",
  "createdOn" : 0,
  "dietTemplate" : {
    "saturday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "carbs" : "carbs",
    "ownerPermission" : "READ",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "mealPlanList" : [ {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    }, {
      "fiber" : "fiber",
      "dietId" : "dietId",
      "tagId" : "tagId",
      "carbs" : "carbs",
      "name" : "name",
      "startTime" : "startTime",
      "calories" : "calories",
      "endTime" : "endTime",
      "dietRecomendation" : "dietRecomendation",
      "mealPlans" : [ {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      }, {
        "quantity" : 1,
        "carbs" : "carbs",
        "proteins" : "proteins",
        "fat" : "fat",
        "name" : "name",
        "id" : "id",
        "calories" : "calories",
        "type" : "type",
        "servingSize" : "servingSize"
      } ]
    } ],
    "archived" : false,
    "fat" : "fat",
    "wednesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "friday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "from" : 5,
    "id" : "id",
    "protien" : "protien",
    "monday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "fiber" : "fiber",
    "totalCalorie" : "totalCalorie",
    "externalId" : "externalId",
    "active" : false,
    "allergy" : "allergy",
    "thursday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "updatedOn" : 6,
    "tagList" : {
      "key" : "tagList"
    },
    "sunday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tuesday" : {
      "quantity" : 1,
      "carbs" : "carbs",
      "proteins" : "proteins",
      "fat" : "fat",
      "name" : "name",
      "id" : "id",
      "calories" : "calories",
      "type" : "type",
      "servingSize" : "servingSize"
    },
    "tenantId" : "tenantId",
    "name" : "name",
    "to" : 5,
    "applicationId" : "applicationId"
  },
  "parentId" : "parentId",
  "archived" : false,
  "companyRegistrationNo" : "companyRegistrationNo",
  "tenantId" : "tenantId",
  "name" : "name",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Group? = nil) -> RequestBuilder<Group> {
        let path = "/ehealth/v2/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
