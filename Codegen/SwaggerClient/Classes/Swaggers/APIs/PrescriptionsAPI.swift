//
// CooeyAPIClient
// PrescriptionsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PrescriptionsAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPrescription(xAuthToken: String? = nil, body: PrescriptionCreateRequest? = nil, completion: @escaping ((_ data: Prescription?,_ error: Error?) -> Void)) {
        createPrescriptionWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/prescriptions
     - examples: [{contentType=application/json, example={
  "archived" : false,
  "prescriberId" : "prescriberId",
  "entities" : [ {
    "userMedicineId" : "userMedicineId",
    "type" : "MEDICINE"
  }, {
    "userMedicineId" : "userMedicineId",
    "type" : "MEDICINE"
  } ],
  "patientId" : "patientId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "prescribedBy" : "prescribedBy"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Prescription> 
     */
    open class func createPrescriptionWithRequestBuilder(xAuthToken: String? = nil, body: PrescriptionCreateRequest? = nil) -> RequestBuilder<Prescription> {
        let path = "/ehealth/v2/prescriptions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Prescription>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPrescriptionsForPatient(userId: String, completion: @escaping ((_ data: [Prescription]?,_ error: Error?) -> Void)) {
        getPrescriptionsForPatientWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/prescriptions/users/{userId}
     - examples: [{contentType=application/json, example=[ {
  "archived" : false,
  "prescriberId" : "prescriberId",
  "entities" : [ {
    "userMedicineId" : "userMedicineId",
    "type" : "MEDICINE"
  }, {
    "userMedicineId" : "userMedicineId",
    "type" : "MEDICINE"
  } ],
  "patientId" : "patientId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "prescribedBy" : "prescribedBy"
}, {
  "archived" : false,
  "prescriberId" : "prescriberId",
  "entities" : [ {
    "userMedicineId" : "userMedicineId",
    "type" : "MEDICINE"
  }, {
    "userMedicineId" : "userMedicineId",
    "type" : "MEDICINE"
  } ],
  "patientId" : "patientId",
  "tenantId" : "tenantId",
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "id" : "id",
  "applicationId" : "applicationId",
  "createdOn" : 0,
  "prescribedBy" : "prescribedBy"
} ]}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<[Prescription]> 
     */
    open class func getPrescriptionsForPatientWithRequestBuilder(userId: String) -> RequestBuilder<[Prescription]> {
        var path = "/ehealth/v2/prescriptions/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Prescription]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePrescription(xAuthToken: String? = nil, body: UpdatePrescriptionRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updatePrescriptionWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /ehealth/v2/prescriptions
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updatePrescriptionWithRequestBuilder(xAuthToken: String? = nil, body: UpdatePrescriptionRequest? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/prescriptions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
