//
// CooeyAPIClient
// ActionsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ActionsAPI {
    /**

     - parameter startTime: (query)  (optional)
     - parameter duration: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetchActionItems(startTime: Int64? = nil, duration: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        fetchActionItemsWithRequestBuilder(startTime: startTime, duration: duration).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/actions/schedules/push-notifications
     
     - parameter startTime: (query)  (optional)
     - parameter duration: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func fetchActionItemsWithRequestBuilder(startTime: Int64? = nil, duration: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/actions/schedules/push-notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": startTime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateActionItemsForClients(groupId: String, xAuthToken: String? = nil, body: ClientRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        generateActionItemsForClientsWithRequestBuilder(groupId: groupId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/actions/groups/{groupId}
     
     - parameter groupId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func generateActionItemsForClientsWithRequestBuilder(groupId: String, xAuthToken: String? = nil, body: ClientRequest? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/actions/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionEngagements(xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getActionEngagementsWithRequestBuilder(xAuthToken: xAuthToken, type: type, beginTime: beginTime, endTime: endTime, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/actions/engagements
     
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func getActionEngagementsWithRequestBuilder(xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/actions/engagements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter actionItemId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionItemById(actionItemId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: ActionItem?,_ error: Error?) -> Void)) {
        getActionItemByIdWithRequestBuilder(actionItemId: actionItemId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/{actionItemId}
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}}]
     
     - parameter actionItemId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<ActionItem> 
     */
    open class func getActionItemByIdWithRequestBuilder(actionItemId: String, xAuthToken: String? = nil) -> RequestBuilder<ActionItem> {
        var path = "/ehealth/v2/actions/{actionItemId}"
        let actionItemIdPreEscape = "\(actionItemId)"
        let actionItemIdPostEscape = actionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionItemId}", with: actionItemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ActionItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionItemsForAppointments(appointmentId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [ActionItem]?,_ error: Error?) -> Void)) {
        getActionItemsForAppointmentsWithRequestBuilder(appointmentId: appointmentId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/appointments/{appointmentId}
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}, {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter appointmentId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[ActionItem]> 
     */
    open class func getActionItemsForAppointmentsWithRequestBuilder(appointmentId: String, xAuthToken: String? = nil) -> RequestBuilder<[ActionItem]> {
        var path = "/ehealth/v2/actions/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ActionItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter careplanId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionItemsForCareplan(careplanId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [ActionItem]?,_ error: Error?) -> Void)) {
        getActionItemsForCareplanWithRequestBuilder(careplanId: careplanId, xAuthToken: xAuthToken, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/careplans/{careplanId}
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}, {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter careplanId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[ActionItem]> 
     */
    open class func getActionItemsForCareplanWithRequestBuilder(careplanId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[ActionItem]> {
        var path = "/ehealth/v2/actions/careplans/{careplanId}"
        let careplanIdPreEscape = "\(careplanId)"
        let careplanIdPostEscape = careplanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{careplanId}", with: careplanIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ActionItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionItemsForCaretaker(caretakerId: String, xAuthToken: String? = nil, name: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: ActionGroupsResponse?,_ error: Error?) -> Void)) {
        getActionItemsForCaretakerWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, name: name, startTime: startTime, endTime: endTime, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/groups/caretakers/{caretakerId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "patientName" : "patientName",
    "locationName" : "locationName",
    "patientId" : "patientId",
    "patientImageUrl" : "patientImageUrl",
    "totalActionItemCount" : 7,
    "contextId" : "contextId",
    "startTime" : 1,
    "location" : {
      "lng" : 5.637376656633329,
      "name" : "name",
      "id" : "id",
      "deviceId" : "deviceId",
      "userId" : "userId",
      "lat" : 5.962133916683182,
      "timestamp" : 2
    },
    "type" : "type",
    "parameters" : "parameters",
    "completedActionItemCount" : 9
  }, {
    "patientName" : "patientName",
    "locationName" : "locationName",
    "patientId" : "patientId",
    "patientImageUrl" : "patientImageUrl",
    "totalActionItemCount" : 7,
    "contextId" : "contextId",
    "startTime" : 1,
    "location" : {
      "lng" : 5.637376656633329,
      "name" : "name",
      "id" : "id",
      "deviceId" : "deviceId",
      "userId" : "userId",
      "lat" : 5.962133916683182,
      "timestamp" : 2
    },
    "type" : "type",
    "parameters" : "parameters",
    "completedActionItemCount" : 9
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter name: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<ActionGroupsResponse> 
     */
    open class func getActionItemsForCaretakerWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, name: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<ActionGroupsResponse> {
        var path = "/ehealth/v2/actions/groups/caretakers/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ActionGroupsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter contextId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionItemsFromContextId(contextId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: ActionItemAndCaretakerNameResponse?,_ error: Error?) -> Void)) {
        getActionItemsFromContextIdWithRequestBuilder(contextId: contextId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/context/{contextId}
     - examples: [{contentType=application/json, example={
  "actionItems" : [ {
    "notes" : "notes",
    "patientLatitude" : 2.027123023002322,
    "patientId" : "patientId",
    "latitude" : 7.061401241503109,
    "title" : "title",
    "type" : "type",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "archived" : false,
    "scheduledOn" : 2,
    "permissions" : "permissions",
    "contextType" : "contextType",
    "startTime" : 1,
    "id" : "id",
    "state" : "state",
    "patientLongitude" : 5.962133916683182,
    "longitude" : 9.301444243932576,
    "patientName" : "patientName",
    "externalId" : "externalId",
    "active" : false,
    "contextId" : "contextId",
    "postAction" : "postAction",
    "updatedOn" : 6,
    "completed" : false,
    "parentType" : "CAREPLAN",
    "completedEntityId" : "completedEntityId",
    "completedOn" : 5,
    "tenantId" : "tenantId",
    "endTime" : 3,
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "interventionId" : "interventionId",
    "completedBy" : "completedBy"
  }, {
    "notes" : "notes",
    "patientLatitude" : 2.027123023002322,
    "patientId" : "patientId",
    "latitude" : 7.061401241503109,
    "title" : "title",
    "type" : "type",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "archived" : false,
    "scheduledOn" : 2,
    "permissions" : "permissions",
    "contextType" : "contextType",
    "startTime" : 1,
    "id" : "id",
    "state" : "state",
    "patientLongitude" : 5.962133916683182,
    "longitude" : 9.301444243932576,
    "patientName" : "patientName",
    "externalId" : "externalId",
    "active" : false,
    "contextId" : "contextId",
    "postAction" : "postAction",
    "updatedOn" : 6,
    "completed" : false,
    "parentType" : "CAREPLAN",
    "completedEntityId" : "completedEntityId",
    "completedOn" : 5,
    "tenantId" : "tenantId",
    "endTime" : 3,
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "interventionId" : "interventionId",
    "completedBy" : "completedBy"
  } ],
  "caretakerIdNameMapper" : {
    "key" : "caretakerIdNameMapper"
  }
}}]
     
     - parameter contextId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<ActionItemAndCaretakerNameResponse> 
     */
    open class func getActionItemsFromContextIdWithRequestBuilder(contextId: String, xAuthToken: String? = nil) -> RequestBuilder<ActionItemAndCaretakerNameResponse> {
        var path = "/ehealth/v2/actions/context/{contextId}"
        let contextIdPreEscape = "\(contextId)"
        let contextIdPostEscape = contextIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contextId}", with: contextIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ActionItemAndCaretakerNameResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionsForCaretaker(caretakerId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [ActionItem]?,_ error: Error?) -> Void)) {
        getActionsForCaretakerWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, type: type, beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/caretakers/{caretakerId}
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}, {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[ActionItem]> 
     */
    open class func getActionsForCaretakerWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[ActionItem]> {
        var path = "/ehealth/v2/actions/caretakers/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ActionItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionsForCaretakerLatest(caretakerId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: CareplanResponse?,_ error: Error?) -> Void)) {
        getActionsForCaretakerLatestWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, type: type, beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/caretakers/latest/{caretakerId}
     - examples: [{contentType=application/json, example={
  "actionItemResponseMap" : {
    "key" : {
      "grouppedActionResponse" : [ {
        "actionItems" : [ {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        }, {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        } ],
        "name" : "name",
        "id" : "id"
      }, {
        "actionItems" : [ {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        }, {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        } ],
        "name" : "name",
        "id" : "id"
      } ],
      "timeTrackabel" : false,
      "ungrouppedActionItems" : [ {
        "notes" : "notes",
        "patientLatitude" : 2.027123023002322,
        "patientId" : "patientId",
        "latitude" : 7.061401241503109,
        "title" : "title",
        "type" : "type",
        "ownerId" : "ownerId",
        "createdOn" : 0,
        "archived" : false,
        "scheduledOn" : 2,
        "permissions" : "permissions",
        "contextType" : "contextType",
        "startTime" : 1,
        "id" : "id",
        "state" : "state",
        "patientLongitude" : 5.962133916683182,
        "longitude" : 9.301444243932576,
        "patientName" : "patientName",
        "externalId" : "externalId",
        "active" : false,
        "contextId" : "contextId",
        "postAction" : "postAction",
        "updatedOn" : 6,
        "completed" : false,
        "parentType" : "CAREPLAN",
        "completedEntityId" : "completedEntityId",
        "completedOn" : 5,
        "tenantId" : "tenantId",
        "endTime" : 3,
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "interventionId" : "interventionId",
        "completedBy" : "completedBy"
      }, {
        "notes" : "notes",
        "patientLatitude" : 2.027123023002322,
        "patientId" : "patientId",
        "latitude" : 7.061401241503109,
        "title" : "title",
        "type" : "type",
        "ownerId" : "ownerId",
        "createdOn" : 0,
        "archived" : false,
        "scheduledOn" : 2,
        "permissions" : "permissions",
        "contextType" : "contextType",
        "startTime" : 1,
        "id" : "id",
        "state" : "state",
        "patientLongitude" : 5.962133916683182,
        "longitude" : 9.301444243932576,
        "patientName" : "patientName",
        "externalId" : "externalId",
        "active" : false,
        "contextId" : "contextId",
        "postAction" : "postAction",
        "updatedOn" : 6,
        "completed" : false,
        "parentType" : "CAREPLAN",
        "completedEntityId" : "completedEntityId",
        "completedOn" : 5,
        "tenantId" : "tenantId",
        "endTime" : 3,
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "interventionId" : "interventionId",
        "completedBy" : "completedBy"
      } ]
    }
  }
}}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<CareplanResponse> 
     */
    open class func getActionsForCaretakerLatestWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<CareplanResponse> {
        var path = "/ehealth/v2/actions/caretakers/latest/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CareplanResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActionsForPatient(patientId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [ActionItem]?,_ error: Error?) -> Void)) {
        getActionsForPatientWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken, type: type, beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/patients/{patientId}
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}, {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[ActionItem]> 
     */
    open class func getActionsForPatientWithRequestBuilder(patientId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[ActionItem]> {
        var path = "/ehealth/v2/actions/patients/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ActionItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCareplanLogs(caretakerId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getCareplanLogsWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/actions/logs/{caretakerId}
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 5)

     - returns: RequestBuilder<Void> 
     */
    open class func getCareplanLogsWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/actions/logs/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCompletedActionItems(caretakerId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [ActionItem]?,_ error: Error?) -> Void)) {
        getCompletedActionItemsWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/actionLogs/{caretakerId}
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}, {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[ActionItem]> 
     */
    open class func getCompletedActionItemsWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil) -> RequestBuilder<[ActionItem]> {
        var path = "/ehealth/v2/actions/actionLogs/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ActionItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCompletedActionItemsCare(patientId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [ActionItem]?,_ error: Error?) -> Void)) {
        getCompletedActionItemsCareWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/actioncompleted/{patientId}
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}, {
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
} ]}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[ActionItem]> 
     */
    open class func getCompletedActionItemsCareWithRequestBuilder(patientId: String, xAuthToken: String? = nil) -> RequestBuilder<[ActionItem]> {
        var path = "/ehealth/v2/actions/actioncompleted/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ActionItem]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGourppedActionItem(patientId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: CareplanResponse?,_ error: Error?) -> Void)) {
        getGourppedActionItemWithRequestBuilder(patientId: patientId, xAuthToken: xAuthToken, type: type, beginTime: beginTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/patients/latest/{patientId}
     - examples: [{contentType=application/json, example={
  "actionItemResponseMap" : {
    "key" : {
      "grouppedActionResponse" : [ {
        "actionItems" : [ {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        }, {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        } ],
        "name" : "name",
        "id" : "id"
      }, {
        "actionItems" : [ {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        }, {
          "notes" : "notes",
          "patientLatitude" : 2.027123023002322,
          "patientId" : "patientId",
          "latitude" : 7.061401241503109,
          "title" : "title",
          "type" : "type",
          "ownerId" : "ownerId",
          "createdOn" : 0,
          "archived" : false,
          "scheduledOn" : 2,
          "permissions" : "permissions",
          "contextType" : "contextType",
          "startTime" : 1,
          "id" : "id",
          "state" : "state",
          "patientLongitude" : 5.962133916683182,
          "longitude" : 9.301444243932576,
          "patientName" : "patientName",
          "externalId" : "externalId",
          "active" : false,
          "contextId" : "contextId",
          "postAction" : "postAction",
          "updatedOn" : 6,
          "completed" : false,
          "parentType" : "CAREPLAN",
          "completedEntityId" : "completedEntityId",
          "completedOn" : 5,
          "tenantId" : "tenantId",
          "endTime" : 3,
          "applicationId" : "applicationId",
          "parameters" : "parameters",
          "interventionId" : "interventionId",
          "completedBy" : "completedBy"
        } ],
        "name" : "name",
        "id" : "id"
      } ],
      "timeTrackabel" : false,
      "ungrouppedActionItems" : [ {
        "notes" : "notes",
        "patientLatitude" : 2.027123023002322,
        "patientId" : "patientId",
        "latitude" : 7.061401241503109,
        "title" : "title",
        "type" : "type",
        "ownerId" : "ownerId",
        "createdOn" : 0,
        "archived" : false,
        "scheduledOn" : 2,
        "permissions" : "permissions",
        "contextType" : "contextType",
        "startTime" : 1,
        "id" : "id",
        "state" : "state",
        "patientLongitude" : 5.962133916683182,
        "longitude" : 9.301444243932576,
        "patientName" : "patientName",
        "externalId" : "externalId",
        "active" : false,
        "contextId" : "contextId",
        "postAction" : "postAction",
        "updatedOn" : 6,
        "completed" : false,
        "parentType" : "CAREPLAN",
        "completedEntityId" : "completedEntityId",
        "completedOn" : 5,
        "tenantId" : "tenantId",
        "endTime" : 3,
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "interventionId" : "interventionId",
        "completedBy" : "completedBy"
      }, {
        "notes" : "notes",
        "patientLatitude" : 2.027123023002322,
        "patientId" : "patientId",
        "latitude" : 7.061401241503109,
        "title" : "title",
        "type" : "type",
        "ownerId" : "ownerId",
        "createdOn" : 0,
        "archived" : false,
        "scheduledOn" : 2,
        "permissions" : "permissions",
        "contextType" : "contextType",
        "startTime" : 1,
        "id" : "id",
        "state" : "state",
        "patientLongitude" : 5.962133916683182,
        "longitude" : 9.301444243932576,
        "patientName" : "patientName",
        "externalId" : "externalId",
        "active" : false,
        "contextId" : "contextId",
        "postAction" : "postAction",
        "updatedOn" : 6,
        "completed" : false,
        "parentType" : "CAREPLAN",
        "completedEntityId" : "completedEntityId",
        "completedOn" : 5,
        "tenantId" : "tenantId",
        "endTime" : 3,
        "applicationId" : "applicationId",
        "parameters" : "parameters",
        "interventionId" : "interventionId",
        "completedBy" : "completedBy"
      } ]
    }
  }
}}]
     
     - parameter patientId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter beginTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<CareplanResponse> 
     */
    open class func getGourppedActionItemWithRequestBuilder(patientId: String, xAuthToken: String? = nil, type: String? = nil, beginTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<CareplanResponse> {
        var path = "/ehealth/v2/actions/patients/latest/{patientId}"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "beginTime": beginTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CareplanResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter careplanId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupedActionItemsForCareplan(careplanId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, completion: @escaping ((_ data: [GroupedActionItemResponse]?,_ error: Error?) -> Void)) {
        getGroupedActionItemsForCareplanWithRequestBuilder(careplanId: careplanId, xAuthToken: xAuthToken, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/actions/careplans/{careplanId}/grouped
     - examples: [{contentType=application/json, example=[ {
  "groupName" : "groupName",
  "actionItems" : [ {
    "notes" : "notes",
    "patientLatitude" : 2.027123023002322,
    "patientId" : "patientId",
    "latitude" : 7.061401241503109,
    "title" : "title",
    "type" : "type",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "archived" : false,
    "scheduledOn" : 2,
    "permissions" : "permissions",
    "contextType" : "contextType",
    "startTime" : 1,
    "id" : "id",
    "state" : "state",
    "patientLongitude" : 5.962133916683182,
    "longitude" : 9.301444243932576,
    "patientName" : "patientName",
    "externalId" : "externalId",
    "active" : false,
    "contextId" : "contextId",
    "postAction" : "postAction",
    "updatedOn" : 6,
    "completed" : false,
    "parentType" : "CAREPLAN",
    "completedEntityId" : "completedEntityId",
    "completedOn" : 5,
    "tenantId" : "tenantId",
    "endTime" : 3,
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "interventionId" : "interventionId",
    "completedBy" : "completedBy"
  }, {
    "notes" : "notes",
    "patientLatitude" : 2.027123023002322,
    "patientId" : "patientId",
    "latitude" : 7.061401241503109,
    "title" : "title",
    "type" : "type",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "archived" : false,
    "scheduledOn" : 2,
    "permissions" : "permissions",
    "contextType" : "contextType",
    "startTime" : 1,
    "id" : "id",
    "state" : "state",
    "patientLongitude" : 5.962133916683182,
    "longitude" : 9.301444243932576,
    "patientName" : "patientName",
    "externalId" : "externalId",
    "active" : false,
    "contextId" : "contextId",
    "postAction" : "postAction",
    "updatedOn" : 6,
    "completed" : false,
    "parentType" : "CAREPLAN",
    "completedEntityId" : "completedEntityId",
    "completedOn" : 5,
    "tenantId" : "tenantId",
    "endTime" : 3,
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "interventionId" : "interventionId",
    "completedBy" : "completedBy"
  } ]
}, {
  "groupName" : "groupName",
  "actionItems" : [ {
    "notes" : "notes",
    "patientLatitude" : 2.027123023002322,
    "patientId" : "patientId",
    "latitude" : 7.061401241503109,
    "title" : "title",
    "type" : "type",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "archived" : false,
    "scheduledOn" : 2,
    "permissions" : "permissions",
    "contextType" : "contextType",
    "startTime" : 1,
    "id" : "id",
    "state" : "state",
    "patientLongitude" : 5.962133916683182,
    "longitude" : 9.301444243932576,
    "patientName" : "patientName",
    "externalId" : "externalId",
    "active" : false,
    "contextId" : "contextId",
    "postAction" : "postAction",
    "updatedOn" : 6,
    "completed" : false,
    "parentType" : "CAREPLAN",
    "completedEntityId" : "completedEntityId",
    "completedOn" : 5,
    "tenantId" : "tenantId",
    "endTime" : 3,
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "interventionId" : "interventionId",
    "completedBy" : "completedBy"
  }, {
    "notes" : "notes",
    "patientLatitude" : 2.027123023002322,
    "patientId" : "patientId",
    "latitude" : 7.061401241503109,
    "title" : "title",
    "type" : "type",
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "archived" : false,
    "scheduledOn" : 2,
    "permissions" : "permissions",
    "contextType" : "contextType",
    "startTime" : 1,
    "id" : "id",
    "state" : "state",
    "patientLongitude" : 5.962133916683182,
    "longitude" : 9.301444243932576,
    "patientName" : "patientName",
    "externalId" : "externalId",
    "active" : false,
    "contextId" : "contextId",
    "postAction" : "postAction",
    "updatedOn" : 6,
    "completed" : false,
    "parentType" : "CAREPLAN",
    "completedEntityId" : "completedEntityId",
    "completedOn" : 5,
    "tenantId" : "tenantId",
    "endTime" : 3,
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "interventionId" : "interventionId",
    "completedBy" : "completedBy"
  } ]
} ]}]
     
     - parameter careplanId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)

     - returns: RequestBuilder<[GroupedActionItemResponse]> 
     */
    open class func getGroupedActionItemsForCareplanWithRequestBuilder(careplanId: String, xAuthToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) -> RequestBuilder<[GroupedActionItemResponse]> {
        var path = "/ehealth/v2/actions/careplans/{careplanId}/grouped"
        let careplanIdPreEscape = "\(careplanId)"
        let careplanIdPostEscape = careplanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{careplanId}", with: careplanIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startTime": startTime?.encodeToJSON(), 
            "endTime": endTime?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GroupedActionItemResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter endTime: (query)  (optional)
     - parameter currentTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pendingActionItems(endTime: Int64? = nil, currentTime: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pendingActionItemsWithRequestBuilder(endTime: endTime, currentTime: currentTime).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/actions/pending
     
     - parameter endTime: (query)  (optional)
     - parameter currentTime: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func pendingActionItemsWithRequestBuilder(endTime: Int64? = nil, currentTime: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/actions/pending"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "endTime": endTime?.encodeToJSON(), 
            "currentTime": currentTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func skipToDoTask(body: ActionItem? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        skipToDoTaskWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /ehealth/v2/actions/skip-task
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func skipToDoTaskWithRequestBuilder(body: ActionItem? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/actions/skip-task"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter actionId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActionItem(actionId: String, xAuthToken: String? = nil, body: ActionItem? = nil, completion: @escaping ((_ data: ActionItem?,_ error: Error?) -> Void)) {
        updateActionItemWithRequestBuilder(actionId: actionId, xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/actions/{actionId}
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "patientLatitude" : 2.027123023002322,
  "patientId" : "patientId",
  "latitude" : 7.061401241503109,
  "title" : "title",
  "type" : "type",
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "archived" : false,
  "scheduledOn" : 2,
  "permissions" : "permissions",
  "contextType" : "contextType",
  "startTime" : 1,
  "id" : "id",
  "state" : "state",
  "patientLongitude" : 5.962133916683182,
  "longitude" : 9.301444243932576,
  "patientName" : "patientName",
  "externalId" : "externalId",
  "active" : false,
  "contextId" : "contextId",
  "postAction" : "postAction",
  "updatedOn" : 6,
  "completed" : false,
  "parentType" : "CAREPLAN",
  "completedEntityId" : "completedEntityId",
  "completedOn" : 5,
  "tenantId" : "tenantId",
  "endTime" : 3,
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "interventionId" : "interventionId",
  "completedBy" : "completedBy"
}}]
     
     - parameter actionId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ActionItem> 
     */
    open class func updateActionItemWithRequestBuilder(actionId: String, xAuthToken: String? = nil, body: ActionItem? = nil) -> RequestBuilder<ActionItem> {
        var path = "/ehealth/v2/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ActionItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
