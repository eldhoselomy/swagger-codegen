//
// CooeyAPIClient
// EventsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EventsAPI {
    /**

     - parameter eventId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(eventId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Event?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(eventId: eventId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/{eventId}
     - examples: [{contentType=application/json, example={
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
}}]
     
     - parameter eventId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Event> 
     */
    open class func callGetWithRequestBuilder(eventId: String, xAuthToken: String? = nil) -> RequestBuilder<Event> {
        var path = "/ehealth/v2/events/{eventId}"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Event>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: Event? = nil, completion: @escaping ((_ data: Event?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/events
     - examples: [{contentType=application/json, example={
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Event> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: Event? = nil) -> RequestBuilder<Event> {
        let path = "/ehealth/v2/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Event>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEvent(body: [UserEventRelation]? = nil, completion: @escaping ((_ data: [UserEventRelation]?,_ error: Error?) -> Void)) {
        createEventWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/events/users
     - examples: [{contentType=application/json, example=[ {
  "eventId" : "eventId",
  "start" : 0,
  "end" : 6,
  "id" : "id",
  "userId" : "userId"
}, {
  "eventId" : "eventId",
  "start" : 0,
  "end" : 6,
  "id" : "id",
  "userId" : "userId"
} ]}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[UserEventRelation]> 
     */
    open class func createEventWithRequestBuilder(body: [UserEventRelation]? = nil) -> RequestBuilder<[UserEventRelation]> {
        let path = "/ehealth/v2/events/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UserEventRelation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAll(userId: String, completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getAllWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/users/{userId}
     - examples: [{contentType=application/json, example=[ {
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
}, {
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
} ]}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<[Event]> 
     */
    open class func getAllWithRequestBuilder(userId: String) -> RequestBuilder<[Event]> {
        var path = "/ehealth/v2/events/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCaretakerDietTemplates(caretakerId: String, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: [CaretakerEvent]?,_ error: Error?) -> Void)) {
        getCaretakerDietTemplatesWithRequestBuilder(caretakerId: caretakerId, start: start, end: end).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/caretakers/{caretakerId}
     - examples: [{contentType=application/json, example=[ {
  "userIds" : [ "userIds", "userIds" ],
  "event" : {
    "notificationBefore" : 5,
    "start" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "enableNotification" : false,
    "end" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "category" : "category"
  }
}, {
  "userIds" : [ "userIds", "userIds" ],
  "event" : {
    "notificationBefore" : 5,
    "start" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "enableNotification" : false,
    "end" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "category" : "category"
  }
} ]}]
     
     - parameter caretakerId: (path)  
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<[CaretakerEvent]> 
     */
    open class func getCaretakerDietTemplatesWithRequestBuilder(caretakerId: String, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<[CaretakerEvent]> {
        var path = "/ehealth/v2/events/caretakers/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[CaretakerEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCaretakerDietTemplateslatest(caretakerId: String, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: [CaretakerEvent]?,_ error: Error?) -> Void)) {
        getCaretakerDietTemplateslatestWithRequestBuilder(caretakerId: caretakerId, start: start, end: end).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/caretakers/{caretakerId}/latest
     - examples: [{contentType=application/json, example=[ {
  "userIds" : [ "userIds", "userIds" ],
  "event" : {
    "notificationBefore" : 5,
    "start" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "enableNotification" : false,
    "end" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "category" : "category"
  }
}, {
  "userIds" : [ "userIds", "userIds" ],
  "event" : {
    "notificationBefore" : 5,
    "start" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "enableNotification" : false,
    "end" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "category" : "category"
  }
} ]}]
     
     - parameter caretakerId: (path)  
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<[CaretakerEvent]> 
     */
    open class func getCaretakerDietTemplateslatestWithRequestBuilder(caretakerId: String, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<[CaretakerEvent]> {
        var path = "/ehealth/v2/events/caretakers/{caretakerId}/latest"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[CaretakerEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter caretakerId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvents(xAuthToken: String? = nil, type: String? = nil, query: String? = nil, caretakerId: String? = nil, groupId: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getEventsWithRequestBuilder(xAuthToken: xAuthToken, type: type, query: query, caretakerId: caretakerId, groupId: groupId, start: start, end: end).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/events/tenant
     
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter caretakerId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getEventsWithRequestBuilder(xAuthToken: String? = nil, type: String? = nil, query: String? = nil, caretakerId: String? = nil, groupId: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/events/tenant"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "query": query, 
            "caretakerId": caretakerId, 
            "groupId": groupId, 
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter caretakerId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsForCaretaker(userId: String, xAuthToken: String? = nil, type: String? = nil, query: String? = nil, caretakerId: String? = nil, groupId: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getEventsForCaretakerWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, type: type, query: query, caretakerId: caretakerId, groupId: groupId, start: start, end: end).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/events/user/{userId}
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter caretakerId: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getEventsForCaretakerWithRequestBuilder(userId: String, xAuthToken: String? = nil, type: String? = nil, query: String? = nil, caretakerId: String? = nil, groupId: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/events/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "query": query, 
            "caretakerId": caretakerId, 
            "groupId": groupId, 
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScheduledEvents(caretakerId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getScheduledEventsWithRequestBuilder(caretakerId: caretakerId, xAuthToken: xAuthToken, start: start, end: end).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/events/schedules/caretakers/{caretakerId}
     
     - parameter caretakerId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getScheduledEventsWithRequestBuilder(caretakerId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/events/schedules/caretakers/{caretakerId}"
        let caretakerIdPreEscape = "\(caretakerId)"
        let caretakerIdPostEscape = caretakerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{caretakerId}", with: caretakerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScheduledEvents_0(eventId: String, xAuthToken: String? = nil, type: String? = nil, query: String? = nil, groupId: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getScheduledEvents_0WithRequestBuilder(eventId: eventId, xAuthToken: xAuthToken, type: type, query: query, groupId: groupId, start: start, end: end).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/events/{eventId}/schedules
     
     - parameter eventId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter type: (query)  (optional)
     - parameter query: (query)  (optional)
     - parameter groupId: (query)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getScheduledEvents_0WithRequestBuilder(eventId: String, xAuthToken: String? = nil, type: String? = nil, query: String? = nil, groupId: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/events/{eventId}/schedules"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type, 
            "query": query, 
            "groupId": groupId, 
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(eventId: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(eventId: eventId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/{eventId}/users
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "occupation" : "occupation",
  "education" : "education",
  "groupId" : "groupId",
  "type" : "type",
  "shiftTimings" : "shiftTimings",
  "internalId" : "internalId",
  "bloodGroup" : "bloodGroup",
  "password" : "password",
  "id" : "id",
  "profilePhotoId" : "profilePhotoId",
  "governmentId" : "governmentId",
  "height" : {
    "unit" : "unit",
    "value" : 2.027123
  },
  "maratialstatus" : "maratialstatus",
  "emergencyContact" : "emergencyContact",
  "active" : false,
  "weight" : {
    "unit" : "unit",
    "value" : 3.6160767
  },
  "timeZone" : "timeZone",
  "passwordResetEnabled" : false,
  "updatedOn" : 6,
  "profilePhotoURL" : "profilePhotoURL",
  "firstName" : "firstName",
  "authenticationProvider" : "COOEY",
  "userSettings" : {
    "featureList" : {
      "key" : true
    },
    "vitalLimitNotificationEnabled" : false,
    "defaultNotificationMode" : "PUSH_NOTIFICATION",
    "vitalNotificationEnabled" : false,
    "eventNotificationEnabled" : false,
    "vitalLimits" : [ {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    }, {
      "higherLimit" : 5.637377,
      "lowerLimit" : 5.962134,
      "limitType" : "limitType"
    } ],
    "notificationEnabled" : false
  },
  "hipSize" : {
    "unit" : "unit",
    "value" : 4.145608
  },
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "status" : "status",
  "lastName" : "lastName",
  "userStatus" : 7,
  "gender" : "gender",
  "authToken" : "authToken",
  "careTaker" : "careTaker",
  "createdOn" : 0,
  "authId" : "authId",
  "encryptedPassword" : "encryptedPassword",
  "archived" : false,
  "icdCodes" : [ "icdCodes", "icdCodes" ],
  "countryCode" : "countryCode",
  "skill" : "skill",
  "alarmId" : "alarmId",
  "currency" : "currency",
  "insuranceInformation" : {
    "primaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsuranceDetails" : {
      "authorizationNumber" : "authorizationNumber",
      "carrierName" : "carrierName",
      "insuranceId" : "insuranceId"
    },
    "secondaryInsured" : false
  },
  "allergires" : [ {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  }, {
    "symptoms" : [ "symptoms", "symptoms" ],
    "level" : "LOW",
    "name" : "name"
  } ],
  "hourlyPrice" : 1.2315135,
  "email" : "email",
  "shiftId" : "shiftId",
  "address" : {
    "zipCode" : "zipCode",
    "country" : "country",
    "lng" : "lng",
    "pin" : "pin",
    "city" : "city",
    "location" : "location",
    "state" : "state",
    "line2" : "line2",
    "line1" : "line1",
    "lat" : "lat"
  },
  "mobile" : "mobile",
  "externalId" : "externalId",
  "dateOfBirth" : 1,
  "room" : "room",
  "additionalInfoList" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "profileTags" : [ "profileTags", "profileTags" ],
  "waistSize" : {
    "unit" : "unit",
    "value" : 7.386282
  },
  "tenantId" : "tenantId",
  "pulse" : "pulse",
  "category" : "category",
  "publicId" : 2,
  "age" : 9,
  "username" : "username"
} ]}]
     
     - parameter eventId: (path)  

     - returns: RequestBuilder<[User]> 
     */
    open class func getUsersWithRequestBuilder(eventId: String) -> RequestBuilder<[User]> {
        var path = "/ehealth/v2/events/{eventId}/users"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modifyEventForPatient(body: EventRescheduleRequestVO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        modifyEventForPatientWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /ehealth/v2/events/guardian/changeEvent
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func modifyEventForPatientWithRequestBuilder(body: EventRescheduleRequestVO? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/events/guardian/changeEvent"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, completion: @escaping ((_ data: [CaretakerEvent]?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, start: start, end: end).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/caretaker/{userId}
     - examples: [{contentType=application/json, example=[ {
  "userIds" : [ "userIds", "userIds" ],
  "event" : {
    "notificationBefore" : 5,
    "start" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "enableNotification" : false,
    "end" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "category" : "category"
  }
}, {
  "userIds" : [ "userIds", "userIds" ],
  "event" : {
    "notificationBefore" : 5,
    "start" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "ownerId" : "ownerId",
    "createdOn" : 0,
    "userId" : "userId",
    "archived" : false,
    "tenantId" : "tenantId",
    "name" : "name",
    "enableNotification" : false,
    "end" : 5,
    "id" : "id",
    "applicationId" : "applicationId",
    "category" : "category"
  }
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)

     - returns: RequestBuilder<[CaretakerEvent]> 
     */
    open class func readWithRequestBuilder(userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil) -> RequestBuilder<[CaretakerEvent]> {
        var path = "/ehealth/v2/events/caretaker/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[CaretakerEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read_0(userId: String, xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        read_0WithRequestBuilder(userId: userId, xAuthToken: xAuthToken, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/events/{userId}/latest
     - examples: [{contentType=application/json, example=[ {
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
}, {
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)

     - returns: RequestBuilder<[Event]> 
     */
    open class func read_0WithRequestBuilder(userId: String, xAuthToken: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Event]> {
        var path = "/ehealth/v2/events/{userId}/latest"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Event]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: Event? = nil, completion: @escaping ((_ data: Event?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/events
     - examples: [{contentType=application/json, example={
  "notificationBefore" : 5,
  "start" : 1,
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "createdOn" : 0,
  "userId" : "userId",
  "archived" : false,
  "tenantId" : "tenantId",
  "name" : "name",
  "enableNotification" : false,
  "end" : 5,
  "id" : "id",
  "applicationId" : "applicationId",
  "category" : "category"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Event> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: Event? = nil) -> RequestBuilder<Event> {
        let path = "/ehealth/v2/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Event>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
