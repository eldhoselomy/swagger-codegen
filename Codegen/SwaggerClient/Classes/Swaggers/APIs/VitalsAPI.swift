//
// CooeyAPIClient
// VitalsAPI.swift
//
// Generated by Eldhose Lomy
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VitalsAPI {
    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter value: (query)  (optional, default to 10)
     - parameter type: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(xAuthToken: String? = nil, offset: Int? = nil, value: Int? = nil, type: String? = nil, userId: String? = nil, completion: @escaping ((_ data: [Vital]?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(xAuthToken: xAuthToken, offset: offset, value: value, type: type, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}, {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter value: (query)  (optional, default to 10)
     - parameter type: (query)  (optional)
     - parameter userId: (query)  (optional)

     - returns: RequestBuilder<[Vital]> 
     */
    open class func callGetWithRequestBuilder(xAuthToken: String? = nil, offset: Int? = nil, value: Int? = nil, type: String? = nil, userId: String? = nil) -> RequestBuilder<[Vital]> {
        let path = "/ehealth/v2/vitals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "value": value?.encodeToJSON(), 
            "type": type, 
            "userId": userId
        ])
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Vital]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_0(id: String, xAuthToken: String? = nil, completion: @escaping ((_ data: VitalBlueprint?,_ error: Error?) -> Void)) {
        callGet_0WithRequestBuilder(id: id, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/blueprints/{id}
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
}}]
     
     - parameter id: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<VitalBlueprint> 
     */
    open class func callGet_0WithRequestBuilder(id: String, xAuthToken: String? = nil) -> RequestBuilder<VitalBlueprint> {
        var path = "/ehealth/v2/vitals/blueprints/{id}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VitalBlueprint>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_1(userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, skip: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [Vital]?,_ error: Error?) -> Void)) {
        callGet_1WithRequestBuilder(userId: userId, xAuthToken: xAuthToken, start: start, end: end, skip: skip, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/user/{userId}
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}, {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
} ]}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[Vital]> 
     */
    open class func callGet_1WithRequestBuilder(userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Vital]> {
        var path = "/ehealth/v2/vitals/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "skip": skip?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-auth-token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Vital]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter vitalId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet_2(vitalId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Vital?,_ error: Error?) -> Void)) {
        callGet_2WithRequestBuilder(vitalId: vitalId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/{vitalId}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}}]
     
     - parameter vitalId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Vital> 
     */
    open class func callGet_2WithRequestBuilder(vitalId: String, xAuthToken: String? = nil) -> RequestBuilder<Vital> {
        var path = "/ehealth/v2/vitals/{vitalId}"
        let vitalIdPreEscape = "\(vitalId)"
        let vitalIdPostEscape = vitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vitalId}", with: vitalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Vital>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(xAuthToken: String? = nil, body: CreateVitalRequest? = nil, completion: @escaping ((_ data: Vital?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/vitals
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Vital> 
     */
    open class func createWithRequestBuilder(xAuthToken: String? = nil, body: CreateVitalRequest? = nil) -> RequestBuilder<Vital> {
        let path = "/ehealth/v2/vitals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Vital>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTenantBlueprints(xAuthToken: String? = nil, body: VitalBlueprintRequest? = nil, completion: @escaping ((_ data: VitalBlueprint?,_ error: Error?) -> Void)) {
        createTenantBlueprintsWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/vitals/blueprints
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<VitalBlueprint> 
     */
    open class func createTenantBlueprintsWithRequestBuilder(xAuthToken: String? = nil, body: VitalBlueprintRequest? = nil) -> RequestBuilder<VitalBlueprint> {
        let path = "/ehealth/v2/vitals/blueprints"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VitalBlueprint>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserAlert(body: PatientVitalAlertRequest? = nil, completion: @escaping ((_ data: PatientVitalAlert?,_ error: Error?) -> Void)) {
        createUserAlertWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/vitals/patients/alerts
     - examples: [{contentType=application/json, example={
  "patientId" : "patientId",
  "alert" : {
    "closedBy" : "closedBy",
    "notes" : "notes",
    "patientId" : "patientId",
    "closedOn" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "message" : "message",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "caretakerId" : "caretakerId",
    "notifierId" : "notifierId",
    "tenantId" : "tenantId",
    "closed" : false,
    "id" : "id",
    "applicationId" : "applicationId",
    "causerId" : "causerId",
    "status" : "status"
  },
  "context" : {
    "answer" : "answer",
    "title" : "title"
  },
  "id" : "id",
  "fieldType" : "fieldType",
  "vitalType" : "vitalType"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PatientVitalAlert> 
     */
    open class func createUserAlertWithRequestBuilder(body: PatientVitalAlertRequest? = nil) -> RequestBuilder<PatientVitalAlert> {
        let path = "/ehealth/v2/vitals/patients/alerts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PatientVitalAlert>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create_0(xAuthToken: String? = nil, body: CreateBatchVitalRequest? = nil, completion: @escaping ((_ data: [Vital]?,_ error: Error?) -> Void)) {
        create_0WithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /ehealth/v2/vitals/batch
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}, {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Vital]> 
     */
    open class func create_0WithRequestBuilder(xAuthToken: String? = nil, body: CreateBatchVitalRequest? = nil) -> RequestBuilder<[Vital]> {
        let path = "/ehealth/v2/vitals/batch"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-Auth-token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Vital]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter vitalId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(vitalId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(vitalId: vitalId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/vitals/{vitalId}
     
     - parameter vitalId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(vitalId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/vitals/{vitalId}"
        let vitalIdPreEscape = "\(vitalId)"
        let vitalIdPostEscape = vitalIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{vitalId}", with: vitalIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter alertId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePatientAlert(patientId: String, alertId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deletePatientAlertWithRequestBuilder(patientId: patientId, alertId: alertId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /ehealth/v2/vitals/patients/{patientId}/alerts/{alertId}/delete
     
     - parameter patientId: (path)  
     - parameter alertId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deletePatientAlertWithRequestBuilder(patientId: String, alertId: String, xAuthToken: String? = nil) -> RequestBuilder<Void> {
        var path = "/ehealth/v2/vitals/patients/{patientId}/alerts/{alertId}/delete"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let alertIdPreEscape = "\(alertId)"
        let alertIdPostEscape = alertIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{alertId}", with: alertIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGlobaVitalBlueprints(xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getGlobaVitalBlueprintsWithRequestBuilder(xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/vitals/blueprints/global
     
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<Void> 
     */
    open class func getGlobaVitalBlueprintsWithRequestBuilder(xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/vitals/blueprints/global"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter tenantId: (query)  (optional)
     - parameter vitalType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGraphEnabledContext(xAuthToken: String? = nil, tenantId: String? = nil, vitalType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getGraphEnabledContextWithRequestBuilder(xAuthToken: xAuthToken, tenantId: tenantId, vitalType: vitalType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/vitals/blueprints/graph-enabled-context
     
     - parameter xAuthToken: (header)  (optional)
     - parameter tenantId: (query)  (optional)
     - parameter vitalType: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getGraphEnabledContextWithRequestBuilder(xAuthToken: String? = nil, tenantId: String? = nil, vitalType: String? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/vitals/blueprints/graph-enabled-context"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": tenantId, 
            "vitalType": vitalType
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 1)
     - parameter secondary: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLatestVitals(userId: String, xAuthToken: String? = nil, limit: Int? = nil, secondary: Bool? = nil, completion: @escaping ((_ data: LatestPatientVitalsResponse?,_ error: Error?) -> Void)) {
        getLatestVitalsWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, limit: limit, secondary: secondary).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/latest/users/{userId}
     - examples: [{contentType=application/json, example={
  "vitalsSections" : [ {
    "vitalBlueprint" : {
      "ownerType" : "TENANT",
      "contextFields" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ],
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 6,
      "ownerId" : "ownerId",
      "type" : "type",
      "createdOn" : 0,
      "archived" : false,
      "noteEnabled" : false,
      "contextActuations" : [ {
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "label" : "label"
      }, {
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "label" : "label"
      } ],
      "tenantId" : "tenantId",
      "name" : "name",
      "graphRequired" : false,
      "id" : "id",
      "iconURL" : "iconURL",
      "applicationId" : "applicationId",
      "fields" : [ {
        "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
        "unit" : "unit",
        "vitalValidations" : {
          "minValue" : 5.962133916683182,
          "maxValue" : 1.4658129805029452
        },
        "dataType" : "INTEGER",
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "graphRequired" : false,
        "label" : "label",
        "type" : "type",
        "key" : "key"
      }, {
        "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
        "unit" : "unit",
        "vitalValidations" : {
          "minValue" : 5.962133916683182,
          "maxValue" : 1.4658129805029452
        },
        "dataType" : "INTEGER",
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "graphRequired" : false,
        "label" : "label",
        "type" : "type",
        "key" : "key"
      } ],
      "primary" : false
    },
    "vitals" : [ {
      "deviceType" : "deviceType",
      "externalId" : "externalId",
      "active" : false,
      "takenOn" : 1,
      "postAction" : "postAction",
      "noteId" : "noteId",
      "contextId" : "contextId",
      "updatedOn" : 7,
      "source" : "MANUAL",
      "deviceReading" : false,
      "createdOn" : 4,
      "userId" : "userId",
      "deviceId" : "deviceId",
      "platform" : "platform",
      "archived" : false,
      "takenBy" : "takenBy",
      "contextType" : "contextType",
      "tenantId" : "tenantId",
      "context" : "context",
      "id" : "id",
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "vitalType" : "vitalType"
    }, {
      "deviceType" : "deviceType",
      "externalId" : "externalId",
      "active" : false,
      "takenOn" : 1,
      "postAction" : "postAction",
      "noteId" : "noteId",
      "contextId" : "contextId",
      "updatedOn" : 7,
      "source" : "MANUAL",
      "deviceReading" : false,
      "createdOn" : 4,
      "userId" : "userId",
      "deviceId" : "deviceId",
      "platform" : "platform",
      "archived" : false,
      "takenBy" : "takenBy",
      "contextType" : "contextType",
      "tenantId" : "tenantId",
      "context" : "context",
      "id" : "id",
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "vitalType" : "vitalType"
    } ]
  }, {
    "vitalBlueprint" : {
      "ownerType" : "TENANT",
      "contextFields" : [ {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      }, {
        "template" : "{}",
        "archived" : false,
        "contextGraphEnabled" : false,
        "tenantId" : "tenantId",
        "externalId" : "externalId",
        "active" : false,
        "updatedOn" : 1,
        "applicationId" : "applicationId",
        "title" : "title",
        "type" : "type",
        "createdOn" : 7,
        "mandatory" : false
      } ],
      "externalId" : "externalId",
      "active" : false,
      "updatedOn" : 6,
      "ownerId" : "ownerId",
      "type" : "type",
      "createdOn" : 0,
      "archived" : false,
      "noteEnabled" : false,
      "contextActuations" : [ {
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "label" : "label"
      }, {
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "label" : "label"
      } ],
      "tenantId" : "tenantId",
      "name" : "name",
      "graphRequired" : false,
      "id" : "id",
      "iconURL" : "iconURL",
      "applicationId" : "applicationId",
      "fields" : [ {
        "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
        "unit" : "unit",
        "vitalValidations" : {
          "minValue" : 5.962133916683182,
          "maxValue" : 1.4658129805029452
        },
        "dataType" : "INTEGER",
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "graphRequired" : false,
        "label" : "label",
        "type" : "type",
        "key" : "key"
      }, {
        "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
        "unit" : "unit",
        "vitalValidations" : {
          "minValue" : 5.962133916683182,
          "maxValue" : 1.4658129805029452
        },
        "dataType" : "INTEGER",
        "actuations" : [ {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        }, {
          "type" : "MAX_LIMIT",
          "parameters" : {
            "key" : "parameters"
          }
        } ],
        "graphRequired" : false,
        "label" : "label",
        "type" : "type",
        "key" : "key"
      } ],
      "primary" : false
    },
    "vitals" : [ {
      "deviceType" : "deviceType",
      "externalId" : "externalId",
      "active" : false,
      "takenOn" : 1,
      "postAction" : "postAction",
      "noteId" : "noteId",
      "contextId" : "contextId",
      "updatedOn" : 7,
      "source" : "MANUAL",
      "deviceReading" : false,
      "createdOn" : 4,
      "userId" : "userId",
      "deviceId" : "deviceId",
      "platform" : "platform",
      "archived" : false,
      "takenBy" : "takenBy",
      "contextType" : "contextType",
      "tenantId" : "tenantId",
      "context" : "context",
      "id" : "id",
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "vitalType" : "vitalType"
    }, {
      "deviceType" : "deviceType",
      "externalId" : "externalId",
      "active" : false,
      "takenOn" : 1,
      "postAction" : "postAction",
      "noteId" : "noteId",
      "contextId" : "contextId",
      "updatedOn" : 7,
      "source" : "MANUAL",
      "deviceReading" : false,
      "createdOn" : 4,
      "userId" : "userId",
      "deviceId" : "deviceId",
      "platform" : "platform",
      "archived" : false,
      "takenBy" : "takenBy",
      "contextType" : "contextType",
      "tenantId" : "tenantId",
      "context" : "context",
      "id" : "id",
      "applicationId" : "applicationId",
      "parameters" : "parameters",
      "vitalType" : "vitalType"
    } ]
  } ]
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter limit: (query)  (optional, default to 1)
     - parameter secondary: (query)  (optional, default to false)

     - returns: RequestBuilder<LatestPatientVitalsResponse> 
     */
    open class func getLatestVitalsWithRequestBuilder(userId: String, xAuthToken: String? = nil, limit: Int? = nil, secondary: Bool? = nil) -> RequestBuilder<LatestPatientVitalsResponse> {
        var path = "/ehealth/v2/vitals/latest/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "secondary": secondary
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LatestPatientVitalsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter patientId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPatientAlerts(patientId: String, completion: @escaping ((_ data: [PatientVitalAlert]?,_ error: Error?) -> Void)) {
        getPatientAlertsWithRequestBuilder(patientId: patientId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/patients/{patientId}/alerts
     - examples: [{contentType=application/json, example=[ {
  "patientId" : "patientId",
  "alert" : {
    "closedBy" : "closedBy",
    "notes" : "notes",
    "patientId" : "patientId",
    "closedOn" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "message" : "message",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "caretakerId" : "caretakerId",
    "notifierId" : "notifierId",
    "tenantId" : "tenantId",
    "closed" : false,
    "id" : "id",
    "applicationId" : "applicationId",
    "causerId" : "causerId",
    "status" : "status"
  },
  "context" : {
    "answer" : "answer",
    "title" : "title"
  },
  "id" : "id",
  "fieldType" : "fieldType",
  "vitalType" : "vitalType"
}, {
  "patientId" : "patientId",
  "alert" : {
    "closedBy" : "closedBy",
    "notes" : "notes",
    "patientId" : "patientId",
    "closedOn" : 1,
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 6,
    "message" : "message",
    "type" : "type",
    "createdOn" : 0,
    "archived" : false,
    "caretakerId" : "caretakerId",
    "notifierId" : "notifierId",
    "tenantId" : "tenantId",
    "closed" : false,
    "id" : "id",
    "applicationId" : "applicationId",
    "causerId" : "causerId",
    "status" : "status"
  },
  "context" : {
    "answer" : "answer",
    "title" : "title"
  },
  "id" : "id",
  "fieldType" : "fieldType",
  "vitalType" : "vitalType"
} ]}]
     
     - parameter patientId: (path)  

     - returns: RequestBuilder<[PatientVitalAlert]> 
     */
    open class func getPatientAlertsWithRequestBuilder(patientId: String) -> RequestBuilder<[PatientVitalAlert]> {
        var path = "/ehealth/v2/vitals/patients/{patientId}/alerts"
        let patientIdPreEscape = "\(patientId)"
        let patientIdPostEscape = patientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{patientId}", with: patientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PatientVitalAlert]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTenantBlueprints(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [VitalBlueprint]?,_ error: Error?) -> Void)) {
        getTenantBlueprintsWithRequestBuilder(tenantId: tenantId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/blueprints/tenants/{tenantId}
     - examples: [{contentType=application/json, example=[ {
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
}, {
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
} ]}]
     
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[VitalBlueprint]> 
     */
    open class func getTenantBlueprintsWithRequestBuilder(tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[VitalBlueprint]> {
        var path = "/ehealth/v2/vitals/blueprints/tenants/{tenantId}"
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[VitalBlueprint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter careTakerId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalForUsers(xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, skip: Int? = nil, limit: Int? = nil, careTakerId: String? = nil, completion: @escaping ((_ data: [Vital]?,_ error: Error?) -> Void)) {
        getVitalForUsersWithRequestBuilder(xAuthToken: xAuthToken, start: start, end: end, skip: skip, limit: limit, careTakerId: careTakerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/users/vitals
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}, {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
} ]}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter skip: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter careTakerId: (query)  (optional)

     - returns: RequestBuilder<[Vital]> 
     */
    open class func getVitalForUsersWithRequestBuilder(xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, skip: Int? = nil, limit: Int? = nil, careTakerId: String? = nil) -> RequestBuilder<[Vital]> {
        let path = "/ehealth/v2/vitals/users/vitals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "skip": skip?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "careTakerId": careTakerId
        ])
        let nillableHeaders: [String: Any?] = [
            "x-auth-token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Vital]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter contextId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalForuser(contextId: String, xAuthToken: String? = nil, completion: @escaping ((_ data: [Vital]?,_ error: Error?) -> Void)) {
        getVitalForuserWithRequestBuilder(contextId: contextId, xAuthToken: xAuthToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/context/{contextId}
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}, {
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
} ]}]
     
     - parameter contextId: (path)  
     - parameter xAuthToken: (header)  (optional)

     - returns: RequestBuilder<[Vital]> 
     */
    open class func getVitalForuserWithRequestBuilder(contextId: String, xAuthToken: String? = nil) -> RequestBuilder<[Vital]> {
        var path = "/ehealth/v2/vitals/context/{contextId}"
        let contextIdPreEscape = "\(contextId)"
        let contextIdPostEscape = contextIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contextId}", with: contextIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-auth-token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Vital]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter userId: (query)  (optional)
     - parameter vitalType: (query)  (optional)
     - parameter contextQuestion: (query)  (optional)
     - parameter context: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalsBasedOnContext(xAuthToken: String? = nil, userId: String? = nil, vitalType: String? = nil, contextQuestion: String? = nil, context: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVitalsBasedOnContextWithRequestBuilder(xAuthToken: xAuthToken, userId: userId, vitalType: vitalType, contextQuestion: contextQuestion, context: context, limit: limit).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /ehealth/v2/vitals/context-vitals
     
     - parameter xAuthToken: (header)  (optional)
     - parameter userId: (query)  (optional)
     - parameter vitalType: (query)  (optional)
     - parameter contextQuestion: (query)  (optional)
     - parameter context: (query)  (optional)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<Void> 
     */
    open class func getVitalsBasedOnContextWithRequestBuilder(xAuthToken: String? = nil, userId: String? = nil, vitalType: String? = nil, contextQuestion: String? = nil, context: String? = nil, limit: Int? = nil) -> RequestBuilder<Void> {
        let path = "/ehealth/v2/vitals/context-vitals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId, 
            "vitalType": vitalType, 
            "contextQuestion": contextQuestion, 
            "context": context, 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter type: (query)  (optional)
     - parameter primary: (query)  (optional)
     - parameter secondary: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVitalsForUser(userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, offset: Int? = nil, limit: Int? = nil, type: String? = nil, primary: Bool? = nil, secondary: Bool? = nil, completion: @escaping ((_ data: PagedResultVitalResponse?,_ error: Error?) -> Void)) {
        getVitalsForUserWithRequestBuilder(userId: userId, xAuthToken: xAuthToken, start: start, end: end, offset: offset, limit: limit, type: type, primary: primary, secondary: secondary).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/users/{userId}
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "deviceType" : "deviceType",
    "takenByName" : "takenByName",
    "externalId" : "externalId",
    "active" : false,
    "takenOn" : 5,
    "postAction" : "postAction",
    "noteId" : "noteId",
    "contextId" : "contextId",
    "updatedOn" : 5,
    "source" : "MANUAL",
    "deviceReading" : false,
    "createdOn" : 1,
    "userId" : "userId",
    "deviceId" : "deviceId",
    "platform" : "platform",
    "archived" : false,
    "takenBy" : "takenBy",
    "contextType" : "contextType",
    "tenantId" : "tenantId",
    "context" : "context",
    "id" : "id",
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "vitalType" : "vitalType"
  }, {
    "deviceType" : "deviceType",
    "takenByName" : "takenByName",
    "externalId" : "externalId",
    "active" : false,
    "takenOn" : 5,
    "postAction" : "postAction",
    "noteId" : "noteId",
    "contextId" : "contextId",
    "updatedOn" : 5,
    "source" : "MANUAL",
    "deviceReading" : false,
    "createdOn" : 1,
    "userId" : "userId",
    "deviceId" : "deviceId",
    "platform" : "platform",
    "archived" : false,
    "takenBy" : "takenBy",
    "contextType" : "contextType",
    "tenantId" : "tenantId",
    "context" : "context",
    "id" : "id",
    "applicationId" : "applicationId",
    "parameters" : "parameters",
    "vitalType" : "vitalType"
  } ],
  "offset" : 6,
  "totalCount" : 0
}}]
     
     - parameter userId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter type: (query)  (optional)
     - parameter primary: (query)  (optional)
     - parameter secondary: (query)  (optional)

     - returns: RequestBuilder<PagedResultVitalResponse> 
     */
    open class func getVitalsForUserWithRequestBuilder(userId: String, xAuthToken: String? = nil, start: Int64? = nil, end: Int64? = nil, offset: Int? = nil, limit: Int? = nil, type: String? = nil, primary: Bool? = nil, secondary: Bool? = nil) -> RequestBuilder<PagedResultVitalResponse> {
        var path = "/ehealth/v2/vitals/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "type": type, 
            "primary": primary, 
            "secondary": secondary
        ])
        let nillableHeaders: [String: Any?] = [
            "x-auth-token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PagedResultVitalResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter query: (path)  
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchTenantBlueprints(query: String, tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [VitalBlueprint]?,_ error: Error?) -> Void)) {
        searchTenantBlueprintsWithRequestBuilder(query: query, tenantId: tenantId, xAuthToken: xAuthToken, offset: offset, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /ehealth/v2/vitals/blueprints/tenants/{tenantId}/search/{query}
     - examples: [{contentType=application/json, example=[ {
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
}, {
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
} ]}]
     
     - parameter query: (path)  
     - parameter tenantId: (path)  
     - parameter xAuthToken: (header)  (optional)
     - parameter offset: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)

     - returns: RequestBuilder<[VitalBlueprint]> 
     */
    open class func searchTenantBlueprintsWithRequestBuilder(query: String, tenantId: String, xAuthToken: String? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[VitalBlueprint]> {
        var path = "/ehealth/v2/vitals/blueprints/tenants/{tenantId}/search/{query}"
        let queryPreEscape = "\(query)"
        let queryPostEscape = queryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{query}", with: queryPostEscape, options: .literal, range: nil)
        let tenantIdPreEscape = "\(tenantId)"
        let tenantIdPostEscape = tenantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tenantId}", with: tenantIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[VitalBlueprint]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xAuthToken: String? = nil, body: CreateVitalRequest? = nil, completion: @escaping ((_ data: Vital?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/vitals
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "externalId" : "externalId",
  "active" : false,
  "takenOn" : 1,
  "postAction" : "postAction",
  "noteId" : "noteId",
  "contextId" : "contextId",
  "updatedOn" : 7,
  "source" : "MANUAL",
  "deviceReading" : false,
  "createdOn" : 4,
  "userId" : "userId",
  "deviceId" : "deviceId",
  "platform" : "platform",
  "archived" : false,
  "takenBy" : "takenBy",
  "contextType" : "contextType",
  "tenantId" : "tenantId",
  "context" : "context",
  "id" : "id",
  "applicationId" : "applicationId",
  "parameters" : "parameters",
  "vitalType" : "vitalType"
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Vital> 
     */
    open class func updateWithRequestBuilder(xAuthToken: String? = nil, body: CreateVitalRequest? = nil) -> RequestBuilder<Vital> {
        let path = "/ehealth/v2/vitals"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Vital>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update_0(xAuthToken: String? = nil, body: VitalBlueprint? = nil, completion: @escaping ((_ data: VitalBlueprint?,_ error: Error?) -> Void)) {
        update_0WithRequestBuilder(xAuthToken: xAuthToken, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /ehealth/v2/vitals/blueprints
     - examples: [{contentType=application/json, example={
  "ownerType" : "TENANT",
  "contextFields" : [ {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  }, {
    "template" : "{}",
    "archived" : false,
    "contextGraphEnabled" : false,
    "tenantId" : "tenantId",
    "externalId" : "externalId",
    "active" : false,
    "updatedOn" : 1,
    "applicationId" : "applicationId",
    "title" : "title",
    "type" : "type",
    "createdOn" : 7,
    "mandatory" : false
  } ],
  "externalId" : "externalId",
  "active" : false,
  "updatedOn" : 6,
  "ownerId" : "ownerId",
  "type" : "type",
  "createdOn" : 0,
  "archived" : false,
  "noteEnabled" : false,
  "contextActuations" : [ {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  }, {
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "label" : "label"
  } ],
  "tenantId" : "tenantId",
  "name" : "name",
  "graphRequired" : false,
  "id" : "id",
  "iconURL" : "iconURL",
  "applicationId" : "applicationId",
  "fields" : [ {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  }, {
    "stakeholdersForNotification" : [ "stakeholdersForNotification", "stakeholdersForNotification" ],
    "unit" : "unit",
    "vitalValidations" : {
      "minValue" : 5.962133916683182,
      "maxValue" : 1.4658129805029452
    },
    "dataType" : "INTEGER",
    "actuations" : [ {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    }, {
      "type" : "MAX_LIMIT",
      "parameters" : {
        "key" : "parameters"
      }
    } ],
    "graphRequired" : false,
    "label" : "label",
    "type" : "type",
    "key" : "key"
  } ],
  "primary" : false
}}]
     
     - parameter xAuthToken: (header)  (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<VitalBlueprint> 
     */
    open class func update_0WithRequestBuilder(xAuthToken: String? = nil, body: VitalBlueprint? = nil) -> RequestBuilder<VitalBlueprint> {
        let path = "/ehealth/v2/vitals/blueprints"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Auth-Token": xAuthToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VitalBlueprint>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
